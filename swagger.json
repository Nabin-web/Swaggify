{
    "schemes": [],
    "swagger": "2.0",
    "info": {
      "description": "This is an API documentation of Tigg POS.",
      "title": "Tigg POS API Documentation",
      "contact": {
  
      },
      "version": "1.0"
    },
    "host": "",
    "basePath": "/api/v1/erp",
    "paths": {
      "/account-classes": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "List account class",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "accounts"
          ],
          "summary": "List all account",
          "parameters": [
            {
              "type": "boolean",
              "description": "State if pagination is required or not",
              "name": "pagination",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page number",
              "name": "page",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page limit",
              "name": "limit",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.AccountClass"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/account-groups": {
        "get": {
          "security": [
            {
              "Bearer": []
            },
            {
              "namespace": []
            }
          ],
          "description": "fetches all account groups from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "account-groups"
          ],
          "summary": "Get all account groups",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.AccountGroup"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates an account group with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "account-groups"
          ],
          "summary": "Creates an account group",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AccountGroupView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.AccountGroup"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/account-groups/{id}": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches account group by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "account-groups"
          ],
          "summary": "Get account group by id",
          "parameters": [
            {
              "type": "string",
              "description": "AccountGroup ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.AccountGroup"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates account group by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "account-groups"
          ],
          "summary": "Update account group by id",
          "parameters": [
            {
              "type": "string",
              "description": "AccountGroup ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AccountGroupView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.AccountGroup"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/account-tree": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Generates Charts of Account Tree for an entity",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "accounts"
          ],
          "summary": "Generate Charts of Account Tree",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.Node"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/accounts": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all accounts from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "accounts"
          ],
          "summary": "Get all accounts",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.Account"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates an account with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "accounts"
          ],
          "summary": "Creates an account",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AccountView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.Account"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/accounts-minimized": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "List account",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "accounts"
          ],
          "summary": "List all account minimized",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.Account"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/accounts-multi-add": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "add account",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "accounts"
          ],
          "summary": "Add multi account",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.MultiAccountView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/accounts-multi-edit": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "add account",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "accounts"
          ],
          "summary": "Add multi account",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.MultiAccountView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/accounts/{id}": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches account by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "accounts"
          ],
          "summary": "Get account by id",
          "parameters": [
            {
              "type": "string",
              "description": "Account ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.Account"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates account by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "accounts"
          ],
          "summary": "Update account by id",
          "parameters": [
            {
              "type": "string",
              "description": "Account ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AccountView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.Account"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/activity-logs": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all activity logs",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "activity_logs"
          ],
          "summary": "Get all activity logs",
          "parameters": [
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "csv",
              "name": "ids",
              "in": "query"
            },
            {
              "type": "string",
              "name": "inactive",
              "in": "query"
            },
            {
              "type": "string",
              "name": "limit",
              "in": "query"
            },
            {
              "type": "string",
              "name": "location_id",
              "in": "query"
            },
            {
              "type": "boolean",
              "name": "no_pagination",
              "in": "query"
            },
            {
              "type": "string",
              "name": "page",
              "in": "query"
            },
            {
              "type": "string",
              "name": "paginate",
              "in": "query"
            },
            {
              "type": "string",
              "name": "search",
              "in": "query"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "csv",
              "name": "sorts",
              "in": "query"
            },
            {
              "type": "string",
              "name": "source_id",
              "in": "query"
            },
            {
              "type": "string",
              "name": "source_type",
              "in": "query"
            },
            {
              "type": "string",
              "name": "status",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.Activity"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/additional-cost-summary": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Additional cost summary",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "purchase-bill"
          ],
          "summary": "Additional cost summary",
          "parameters": [
            {
              "type": "string",
              "description": "purchase bill id",
              "name": "id",
              "in": "query",
              "required": true
            },
            {
              "type": "string",
              "description": "[",
              "name": "is_export",
              "in": "query",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/additional-cost-terms": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all additional-cost-terms available",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "additional-cost-terms"
          ],
          "summary": "Get all additional-cost-terms",
          "parameters": [
            {
              "type": "boolean",
              "description": "Filter warehouses by inactive status",
              "name": "inactive",
              "in": "query"
            },
            {
              "type": "boolean",
              "description": "State if pagination is required or not",
              "name": "pagination",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page number",
              "name": "page",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page limit",
              "name": "limit",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.AdditionalCostTerm"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a additional-cost-term with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "additional-cost-terms"
          ],
          "summary": "Creates a additional-cost-term",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AdditionalCostTermView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/view.AdditionalCostTermView"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/additional-cost-terms/alter-active": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "alters additional-cost-terms status by ids from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "additional-cost-terms"
          ],
          "summary": "Alters status of additional-cost-terms by list of ids",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AlterActiveView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/additional-cost-terms/{id}": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates additional-cost-term by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "additional-cost-terms"
          ],
          "summary": "Update additional-cost-term by id",
          "parameters": [
            {
              "type": "string",
              "description": "Additional-Cost-Term ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AdditionalCostTermView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/view.AdditionalCostTermView"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/allocation-records": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Get all transaction allocation by id",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "allocation"
          ],
          "summary": "Get all  transaction allocation",
          "parameters": [
            {
              "type": "string",
              "description": " Allocation source id",
              "name": "AllocatorSourceId",
              "in": "query"
            },
            {
              "type": "string",
              "description": " Allocation source id",
              "name": "AllocatedSourceId",
              "in": "query"
            },
            {
              "type": "string",
              "description": " Allocation source id",
              "name": "AllocatorId",
              "in": "query"
            },
            {
              "type": "boolean",
              "description": "State if pagination is required or not",
              "name": "pagination",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page number",
              "name": "page",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page limit",
              "name": "limit",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.AllocationRecord"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/alter-active": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "alters",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "alter"
          ],
          "summary": "Alter   i.e. Toggle inactive",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AlterActiveSourceView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/alter-admin": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Alter admin",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "organization"
          ],
          "summary": "Alter admin",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AlterAdminView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/areas": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all areas from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "areas"
          ],
          "summary": "Get all areas based on location id",
          "parameters": [
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "csv",
              "name": "ids",
              "in": "query"
            },
            {
              "type": "string",
              "name": "inactive",
              "in": "query"
            },
            {
              "type": "string",
              "name": "limit",
              "in": "query"
            },
            {
              "type": "string",
              "name": "location_id",
              "in": "query"
            },
            {
              "type": "boolean",
              "name": "no_pagination",
              "in": "query"
            },
            {
              "type": "string",
              "name": "page",
              "in": "query"
            },
            {
              "type": "string",
              "name": "paginate",
              "in": "query"
            },
            {
              "type": "string",
              "name": "search",
              "in": "query"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "csv",
              "name": "sorts",
              "in": "query"
            },
            {
              "type": "string",
              "name": "status",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.Area"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a area with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "areas"
          ],
          "summary": "Creates a area",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AreaView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.Area"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/areas/{id}": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all areas from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "areas"
          ],
          "summary": "Get all areas based on location id",
          "parameters": [
            {
              "type": "string",
              "description": "Area ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.Area"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates area by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "areas"
          ],
          "summary": "Update area by id",
          "parameters": [
            {
              "type": "string",
              "description": "Area ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AreaView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.Area"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/attachments": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all attachments available",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "attachments"
          ],
          "summary": "Get all attachments",
          "parameters": [
            {
              "type": "boolean",
              "description": "Filter attachments by inactive status",
              "name": "inactive",
              "in": "query"
            },
            {
              "type": "string",
              "description": "Filter attachments by source_id",
              "name": "source_id",
              "in": "query"
            },
            {
              "enum": [
                "SalesOrder",
                "PurchaseOrder",
                "Quotation",
                "Contact",
                "Task",
                "DebitNote",
                "PurchaseBill",
                "Expense",
                "WarehouseTransfer",
                "WarehouseAdjustment",
                "ProductService",
                "JournalVoucher",
                "CashTransfer",
                "QuickPayment",
                "QuickReceipt",
                "BankAccount",
                "CreditNote",
                "Invoice",
                "CustomerPayment",
                "SupplierPayment"
              ],
              "type": "string",
              "description": "Filter attachments by source_type enums(SalesOrder, PurchaseOrder, Quotation, Contact, Task, DebitNote, PurchaseBill, Expense, WarehouseTransfer, WarehouseAdjustment, ProductService, JournalVoucher, CashTransfer, QuickPayment, QuickReceipt, BankAccount,  CreditNote, Invoice, CustomerPayment, SupplierPayment)",
              "name": "source_type",
              "in": "query"
            },
            {
              "type": "boolean",
              "description": "State if pagination is required or not",
              "name": "pagination",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page number",
              "name": "page",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page limit",
              "name": "limit",
              "in": "query"
            },
            {
              "type": "string",
              "description": "Filter attachments by status (Pending, Done)",
              "name": "status",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.AttachmentGroup"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a attachment with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "attachments"
          ],
          "summary": "Creates a attachment",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AttachmentCreate"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.AttachmentGroup"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/attachments-delete": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Delete  attachments available",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "attachments"
          ],
          "summary": "Delete attachment",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AttachmentDelete"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/attachments/alter-active": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Archived  attachments available",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "attachments"
          ],
          "summary": "Archived attachment i.e. Toggle inactive",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AlterActiveView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/attachments/merge": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "merge  attachments available",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "attachments"
          ],
          "summary": "Merge attachment",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AttachmentGroupMerge"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.AttachmentGroup"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/attachments/{id}": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches attachments against an id",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "attachments"
          ],
          "summary": "Get attachments by id",
          "parameters": [
            {
              "type": "string",
              "description": "attachments ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.AttachmentGroup"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Update  attachments available",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "attachments"
          ],
          "summary": "Update attachment",
          "parameters": [
            {
              "type": "string",
              "description": "AttachmentGroup ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AttachmentGroupUpdate"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.AttachmentGroup"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/bank-balance-summary": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Fetch balance summary of bank and cash accounts",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "dashboard"
          ],
          "summary": "Get balance summary of bank and cash accounts",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/view.BankAndCashBalanceSummary"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/bank-reconciliations": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Reconcile",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "bank-statement"
          ],
          "summary": "Reconcile",
          "parameters": [
            {
              "description": "Bankreconciliationdata",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/handler.bankReconciliationData"
              }
            },
            {
              "type": "boolean",
              "description": "State if pagination is required or not",
              "name": "pagination",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page number",
              "name": "page",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page limit",
              "name": "limit",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.ResponseWithPagination"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/bank-reconciliations/{reconciliationID}": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Export Reconciliation Report on excel",
          "produces": [
            "application/vnd.api+json"
          ],
          "tags": [
            "bank-statement"
          ],
          "summary": "Export Reconciliation Report on excel",
          "parameters": [
            {
              "type": "string",
              "description": "namespace",
              "name": "namespace",
              "in": "query",
              "required": true
            },
            {
              "type": "string",
              "description": "todate",
              "name": "date",
              "in": "query",
              "required": true
            },
            {
              "type": "string",
              "description": "account id ",
              "name": "account_id",
              "in": "query",
              "required": true
            },
            {
              "type": "string",
              "default": "Bearer \u003CAdd access token here\u003E",
              "description": "Insert your access token",
              "name": "Authorization",
              "in": "header",
              "required": true
            },
            {
              "type": "string",
              "description": "reconciliationID",
              "name": "reconciliationID",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "delete": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "UnReconcile",
          "produces": [
            "application/json"
          ],
          "tags": [
            "bank-statement"
          ],
          "summary": "UnReconcile",
          "parameters": [
            {
              "type": "string",
              "description": "Bankreconciliationdata",
              "name": "reconciliationID",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.ResponseWithPagination"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/bank-statements": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "List the given statements",
          "produces": [
            "application/json"
          ],
          "tags": [
            "bank-statement"
          ],
          "summary": "List BankStatement",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.ResponseWithPagination"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.BankStatement"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Create Bank Statement from file",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "bank-statement"
          ],
          "summary": "Create Bank Statement",
          "parameters": [
            {
              "type": "string",
              "description": "account id",
              "name": "account_id",
              "in": "query",
              "required": true
            },
            {
              "description": "BankStatement",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/domain.BankStatement"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/bank-statements-delete": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Delete the given statements of the account id",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "bank-statement"
          ],
          "summary": "Delete BankStatement",
          "parameters": [
            {
              "description": "AccountId and Statements",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/handler.DeleteReqDataType"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/bank-statements-matched": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "List the matched Transaction",
          "produces": [
            "application/json"
          ],
          "tags": [
            "bank-statement"
          ],
          "summary": "List Matched Transaction",
          "parameters": [
            {
              "type": "boolean",
              "description": "State if pagination is required or not",
              "name": "pagination",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page number",
              "name": "page",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page limit",
              "name": "limit",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.ResponseWithPagination"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.BankStatement"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/banks": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all banks from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "bank"
          ],
          "summary": "Get all banks",
          "parameters": [
            {
              "type": "boolean",
              "description": "Filter bank by inactive status",
              "name": "inactive",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/view.BankView"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a bank with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "bank"
          ],
          "summary": "Creates a bank",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.BankView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/view.BankView"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/banks/alter-active": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "alter bank against an id",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "bank"
          ],
          "summary": "Alter bank by id",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AlterActiveView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/banks/{id}": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates bank by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "bank"
          ],
          "summary": "Update bank by id",
          "parameters": [
            {
              "type": "string",
              "description": "Bank ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.BankView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/view.BankView"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/barcode-download-link": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "generates download url for printing barcodes",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "collection-report-print"
          ],
          "summary": "generates download url for printing barcodes",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.BarcodePrintReqView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/barcodes/{id}": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "List barcode of a product",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "products"
          ],
          "summary": "List barcode of a product",
          "parameters": [
            {
              "type": "string",
              "description": "product id",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.Param"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.Barcode"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/cash-and-bank-accounts": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all cash and bank accounts from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "cash-and-bank"
          ],
          "summary": "Get all cash and bank accounts",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/view.CashAndBankAccountView"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a cash and bank account with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "cash-and-bank"
          ],
          "summary": "Creates a cash and bank account",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.CashAndBankAccountView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/view.CashAndBankAccountView"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/cash-and-bank-accounts/alter-active": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "alters cash-and-bank status by ids from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "cash-and-bank"
          ],
          "summary": "Alters status of cash-and-bank by list of ids",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AlterActiveView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/cash-and-bank-accounts/{id}": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches cash-and-bank by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "cash-and-bank"
          ],
          "summary": "Get cash-and-bank by id",
          "parameters": [
            {
              "type": "string",
              "description": "CashAndBank ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/view.CashAndBankAccountView"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates cash-and-bank by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "cash-and-bank"
          ],
          "summary": "Update cash-and-bank by id",
          "parameters": [
            {
              "type": "string",
              "description": "Account ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.CashAndBankAccountView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/view.CashAndBankAccountView"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/cash-transfers": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all cash transfers from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "cash-transfers"
          ],
          "summary": "Get all cash transfers",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "allOf": [
                            {
                              "$ref": "#/definitions/domain.CashTransfer"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "items": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.CashItem"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a cash transfer with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "cash-transfers"
          ],
          "summary": "Creates a cash transfer",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AccountingView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "allOf": [
                          {
                            "$ref": "#/definitions/domain.CashTransfer"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "items": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/domain.CashItem"
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/cash-transfers/{id}": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches cash transfer by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "cash-transfers"
          ],
          "summary": "Get cash transfer by id",
          "parameters": [
            {
              "type": "string",
              "description": "CashTransfer ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "allOf": [
                          {
                            "$ref": "#/definitions/domain.CashTransfer"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "items": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/domain.CashItem"
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates cash transfer by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "cash-transfers"
          ],
          "summary": "Update cash transfer by id",
          "parameters": [
            {
              "type": "string",
              "description": "CashTransfer ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AccountingView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "allOf": [
                          {
                            "$ref": "#/definitions/domain.CashTransfer"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "items": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/domain.CashItem"
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/change-password": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Change password with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "password"
          ],
          "summary": "Change password",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.ChangePasswordView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/cheque-summary": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches a list of cheques summary",
          "produces": [
            "application/json"
          ],
          "tags": [
            "cheque"
          ],
          "summary": "Fetch Cheque Summary",
          "parameters": [
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "csv",
              "name": "accountID",
              "in": "query"
            },
            {
              "type": "string",
              "name": "amountEqualTo",
              "in": "query"
            },
            {
              "type": "string",
              "name": "amountGte",
              "in": "query"
            },
            {
              "type": "string",
              "name": "amountLte",
              "in": "query"
            },
            {
              "type": "string",
              "name": "bankID",
              "in": "query"
            },
            {
              "type": "string",
              "name": "chequeFromDate",
              "in": "query"
            },
            {
              "type": "string",
              "name": "chequeToDate",
              "in": "query"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "csv",
              "name": "ids",
              "in": "query"
            },
            {
              "type": "string",
              "name": "inactive",
              "in": "query"
            },
            {
              "type": "boolean",
              "name": "isProcessed",
              "in": "query"
            },
            {
              "type": "string",
              "name": "issuedFromDate",
              "in": "query"
            },
            {
              "type": "string",
              "name": "issuedToDate",
              "in": "query"
            },
            {
              "type": "string",
              "name": "limit",
              "in": "query"
            },
            {
              "type": "boolean",
              "name": "no_pagination",
              "in": "query"
            },
            {
              "type": "string",
              "name": "page",
              "in": "query"
            },
            {
              "type": "string",
              "name": "paginate",
              "in": "query"
            },
            {
              "type": "string",
              "name": "search",
              "in": "query"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "csv",
              "name": "sorts",
              "in": "query"
            },
            {
              "type": "string",
              "name": "status",
              "in": "query"
            },
            {
              "type": "string",
              "name": "statusID",
              "in": "query"
            },
            {
              "type": "string",
              "name": "txnType",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/view.ChequeSummaryView"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/cheques": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches a list of cheques with pagination",
          "produces": [
            "application/json"
          ],
          "tags": [
            "cheque"
          ],
          "summary": "List cheques",
          "parameters": [
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "csv",
              "name": "accountID",
              "in": "query"
            },
            {
              "type": "string",
              "name": "amountEqualTo",
              "in": "query"
            },
            {
              "type": "string",
              "name": "amountGte",
              "in": "query"
            },
            {
              "type": "string",
              "name": "amountLte",
              "in": "query"
            },
            {
              "type": "string",
              "name": "bankID",
              "in": "query"
            },
            {
              "type": "string",
              "name": "chequeFromDate",
              "in": "query"
            },
            {
              "type": "string",
              "name": "chequeToDate",
              "in": "query"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "csv",
              "name": "ids",
              "in": "query"
            },
            {
              "type": "string",
              "name": "inactive",
              "in": "query"
            },
            {
              "type": "boolean",
              "name": "isProcessed",
              "in": "query"
            },
            {
              "type": "string",
              "name": "issuedFromDate",
              "in": "query"
            },
            {
              "type": "string",
              "name": "issuedToDate",
              "in": "query"
            },
            {
              "type": "string",
              "name": "limit",
              "in": "query"
            },
            {
              "type": "boolean",
              "name": "no_pagination",
              "in": "query"
            },
            {
              "type": "string",
              "name": "page",
              "in": "query"
            },
            {
              "type": "string",
              "name": "paginate",
              "in": "query"
            },
            {
              "type": "string",
              "name": "search",
              "in": "query"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "csv",
              "name": "sorts",
              "in": "query"
            },
            {
              "type": "string",
              "name": "status",
              "in": "query"
            },
            {
              "type": "string",
              "name": "statusID",
              "in": "query"
            },
            {
              "type": "string",
              "name": "txnType",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.Cheque"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "adds a new cheque",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "cheque"
          ],
          "summary": "Add a new cheque",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.ChequeAddEditView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "patch": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates a single attribute of a cheque",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "cheque"
          ],
          "summary": "Update a single attribute of cheque",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.ChequeField"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/cheques/{id}": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches a cheque detail",
          "produces": [
            "application/json"
          ],
          "tags": [
            "cheque"
          ],
          "summary": "Fetch a cheque detail",
          "parameters": [
            {
              "type": "string",
              "description": "Cheque ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.Cheque"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "put": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates attributes a cheque",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "cheque"
          ],
          "summary": "Update a cheque",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.ChequeAddEditView"
              }
            },
            {
              "type": "string",
              "description": "Cheque ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.Cheque"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/collection-report-html": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a printing-template with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "collection-report-print"
          ],
          "summary": "Creates a printing-template",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/collection-report-link": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a printing-template with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "collection-report-print"
          ],
          "summary": "Creates a printing-template",
          "parameters": [
            {
              "type": "string",
              "description": "source",
              "name": "source",
              "in": "query",
              "required": true
            },
            {
              "type": "string",
              "description": "id-uuid",
              "name": "id",
              "in": "query",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/comments": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a comments with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "comments"
          ],
          "summary": "Creates a comments",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.CommentView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/contact-groups": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all contact groups available",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "contact_groups"
          ],
          "summary": "Get all contact groups",
          "parameters": [
            {
              "type": "boolean",
              "description": "Filter contact groups by inactive status",
              "name": "inactive",
              "in": "query"
            },
            {
              "type": "boolean",
              "description": "State if pagination is required or not",
              "name": "pagination",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page number",
              "name": "page",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page limit",
              "name": "limit",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.ContactGroup"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a contact group with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "contact_groups"
          ],
          "summary": "Creates a contact group type",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.ContactGroupView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.ContactGroup"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/contact-groups/alter-active": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "alter contact gruop i.e. Toggle inactive",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "contact_groups"
          ],
          "summary": "Alter active status",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AlterActiveView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/contact-groups/{id}": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches contact group against an id",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "contact_groups"
          ],
          "summary": "Get contact group by id",
          "parameters": [
            {
              "type": "string",
              "description": "Contact group ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.ContactGroup"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates contact gruop by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "contact_groups"
          ],
          "summary": "Update contact group by id",
          "parameters": [
            {
              "type": "string",
              "description": "Contact Group ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.ContactGroupView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.ContactGroup"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/contacts": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all contact available",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "contacts"
          ],
          "summary": "Get all contact",
          "parameters": [
            {
              "type": "boolean",
              "description": "Filter contacts by inactive status",
              "name": "inactive",
              "in": "query"
            },
            {
              "type": "array",
              "items": {
                "enum": [
                  "SUPPLIER",
                  "LEAD",
                  "CUSTOMER"
                ],
                "type": "string"
              },
              "collectionFormat": "multi",
              "description": "Filter contact by types",
              "name": "type",
              "in": "query"
            },
            {
              "type": "boolean",
              "description": "State if pagination is required or not",
              "name": "pagination",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page number",
              "name": "page",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page limit",
              "name": "limit",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.Contact"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a contact with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "contacts"
          ],
          "summary": "Creates a contact type",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.ContactView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.Contact"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/contacts-lead-conversion/{id}": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates contact type from lead to customer by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "contacts"
          ],
          "summary": "Update contact type from lead to customer by id",
          "parameters": [
            {
              "type": "string",
              "description": "Contact ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/contacts-minimized": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all contact available",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "contacts"
          ],
          "summary": "Get all contact minimized",
          "parameters": [
            {
              "type": "boolean",
              "description": "Filter contacts by inactive status",
              "name": "inactive",
              "in": "query"
            },
            {
              "type": "array",
              "items": {
                "enum": [
                  "SUPPLIER",
                  "LEAD",
                  "CUSTOMER"
                ],
                "type": "string"
              },
              "collectionFormat": "multi",
              "description": "Filter contact by types",
              "name": "type",
              "in": "query"
            },
            {
              "type": "boolean",
              "description": "State if pagination is required or not",
              "name": "pagination",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page number",
              "name": "page",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page limit",
              "name": "limit",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.Contact"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/contacts-multi-add": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "add contact",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "contacts"
          ],
          "summary": "Add multi contact",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.MultiContactView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/contacts-multi-edit": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "add contact",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "contacts"
          ],
          "summary": "Add multi contact",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.MultiContactView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/contacts/alter-active": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "alter contact",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "contacts"
          ],
          "summary": "Alter contact i.e. Toggle inactive",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AlterActiveView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/contacts/{id}": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches contact against an id",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "contacts"
          ],
          "summary": "Get contact by id",
          "parameters": [
            {
              "type": "string",
              "description": "Contact ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.Contact"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates contact by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "contacts"
          ],
          "summary": "Update contact by id",
          "parameters": [
            {
              "type": "string",
              "description": "Contact ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.ContactView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.Contact"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/credit-notes": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all credit-notes available",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "credit-notes"
          ],
          "summary": "Get all credit-notes",
          "parameters": [
            {
              "type": "boolean",
              "description": "Filter credit notes by inactive status",
              "name": "inactive",
              "in": "query"
            },
            {
              "enum": [
                "Void",
                "Approved",
                "Draft"
              ],
              "type": "string",
              "description": "Filter credit notes by status",
              "name": "status",
              "in": "query"
            },
            {
              "type": "boolean",
              "description": "State if pagination is required or not",
              "name": "pagination",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page number",
              "name": "page",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page limit",
              "name": "limit",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "allOf": [
                            {
                              "$ref": "#/definitions/domain.CreditNote"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "custom_fields": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.CustomFieldData"
                                  }
                                },
                                "items": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.OperationItem"
                                  }
                                },
                                "reporting_tags": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.ReportingTagData"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a credit-note with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "credit-notes"
          ],
          "summary": "Creates a credit-note",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.CreditNoteView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "allOf": [
                            {
                              "$ref": "#/definitions/domain.CreditNote"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "custom_fields": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.CustomFieldData"
                                  }
                                },
                                "items": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.OperationItem"
                                  }
                                },
                                "reporting_tags": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.ReportingTagData"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/credit-notes/{id}": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches credit-note by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "credit-notes"
          ],
          "summary": "Get credit-note by id",
          "parameters": [
            {
              "type": "string",
              "description": "CreditNote ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "allOf": [
                            {
                              "$ref": "#/definitions/domain.CreditNote"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "custom_fields": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.CustomFieldData"
                                  }
                                },
                                "items": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.OperationItem"
                                  }
                                },
                                "reporting_tags": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.ReportingTagData"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates credit-notes by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "credit-notes"
          ],
          "summary": "Update credit-notes by id",
          "parameters": [
            {
              "type": "string",
              "description": "CreditNote ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.CreditNoteView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "allOf": [
                            {
                              "$ref": "#/definitions/domain.CreditNote"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "custom_fields": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.CustomFieldData"
                                  }
                                },
                                "items": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.OperationItem"
                                  }
                                },
                                "reporting_tags": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.ReportingTagData"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/credit-notes/{id}/payments": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Export Reconciliation Report on excel",
          "produces": [
            "application/json"
          ],
          "tags": [
            "orders"
          ],
          "summary": "Export Reconciliation Report on excel",
          "parameters": [
            {
              "type": "string",
              "description": "creditnoteid",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.PaymentItem"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/credit-terms": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all credit-terms available",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "credit-terms"
          ],
          "summary": "Get all credit-terms",
          "parameters": [
            {
              "type": "boolean",
              "description": "Filter Deal Stage by inactive status",
              "name": "inactive",
              "in": "query"
            },
            {
              "type": "boolean",
              "description": "State if pagination is required or not",
              "name": "pagination",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page number",
              "name": "page",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page limit",
              "name": "limit",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.CreditTerm"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a credit-term with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "credit-terms"
          ],
          "summary": "Creates a credit-term",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.CreditTermsView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/view.CreditTermsView"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/credit-terms/alter-active": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "deletes  credit-terms",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "credit-terms"
          ],
          "summary": "Delete  credit-terms i.e. Toggle inactive",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AlterActiveView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/credit-terms/{id}": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates credit-term by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "credit-terms"
          ],
          "summary": "Update credit-term by id",
          "parameters": [
            {
              "type": "string",
              "description": "Credit-Term ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.CreditTermsView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/view.CreditTermsView"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/currencies": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all currencies available",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "currencies"
          ],
          "summary": "Get all currencies",
          "parameters": [
            {
              "type": "boolean",
              "description": "State if pagination is required or not",
              "name": "pagination",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page number",
              "name": "page",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page limit",
              "name": "limit",
              "in": "query"
            },
            {
              "type": "string",
              "description": "SearchPhase",
              "name": "search_phrase",
              "in": "query"
            },
            {
              "type": "string",
              "description": "Inactive Param",
              "name": "inactive",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.CurrencyCode"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "all currencies",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "currencies"
          ],
          "summary": "All currencies",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.CurrencyCodeView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/currencies/alter-active": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "alters currencies against an id",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "currencies"
          ],
          "summary": "Alter currencies by id",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AlterCurrencyView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/currencies/{code}": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "all currencies",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "currencies"
          ],
          "summary": "All currencies",
          "parameters": [
            {
              "type": "string",
              "description": "Code",
              "name": "code",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.CurrencyCodeEditView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/custom-fields": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all custom-fields from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "custom-fields"
          ],
          "summary": "Get all custom-fields",
          "parameters": [
            {
              "enum": [
                "SalesOrder",
                "PurchaseOrder",
                "Quotation",
                "DebitNote",
                "PurchaseBill",
                "Expense",
                "JournalVoucher",
                "CashTransfer",
                "QuickPayment",
                "QuickReceipt",
                "CreditNote",
                "Invoice",
                "CustomerPayment",
                "SupplierPayment"
              ],
              "type": "string",
              "description": "Filter CustomField by source",
              "name": "for_sources",
              "in": "query"
            },
            {
              "type": "boolean",
              "description": "Filter CustomField by inactive status",
              "name": "inactive",
              "in": "query"
            },
            {
              "type": "boolean",
              "description": "State if pagination is required or not",
              "name": "pagination",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page number",
              "name": "page",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page limit",
              "name": "limit",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.CustomField"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a custom-fields with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "custom-fields"
          ],
          "summary": "Creates a custom-fields",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.CustomFieldView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.CustomField"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/custom-fields/alter-active": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "deletes  custom-fields",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "custom-fields"
          ],
          "summary": "Delete  custom-fields i.e. Toggle inactive",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AlterActiveView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/custom-fields/{id}": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches custom-fields against an id",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "custom-fields"
          ],
          "summary": "Get custom-fields by id",
          "parameters": [
            {
              "type": "string",
              "description": "CustomField ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.CustomField"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates custom-fields against an id",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "custom-fields"
          ],
          "summary": "Update custom-fields by id",
          "parameters": [
            {
              "type": "string",
              "description": "CustomField ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.CustomFieldUpdate"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/custom-orders": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all custom-orders from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "custom-orders"
          ],
          "summary": "Get all custom-orders",
          "parameters": [
            {
              "enum": [
                "SalesOrder",
                "PurchaseOrder",
                "Quotation"
              ],
              "type": "string",
              "description": "Filter CustomStatus by statusFor",
              "name": "status_for",
              "in": "query"
            },
            {
              "type": "boolean",
              "description": "Filter CustomStatus by inactive status",
              "name": "inactive",
              "in": "query"
            },
            {
              "type": "boolean",
              "description": "State if pagination is required or not",
              "name": "pagination",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page number",
              "name": "page",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page limit",
              "name": "limit",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.CustomStatus"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a custom-orders with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "custom-orders"
          ],
          "summary": "Creates a custom-orders",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.CustomOrderView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.CustomStatus"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/custom-orders/alter-active": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "deletes  custom-orders",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "custom-orders"
          ],
          "summary": "Delete  custom-orders i.e. Toggle inactive",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AlterActiveView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/custom-orders/reorder": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Reorder custom orders",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "custom-orders"
          ],
          "summary": "Reorder custom orders",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.ReorderView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/custom-orders/{id}": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches custom-orders against an id",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "custom-orders"
          ],
          "summary": "Get custom-orders by id",
          "parameters": [
            {
              "type": "string",
              "description": "CustomOrder ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.CustomStatus"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates custom-orders by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "custom-orders"
          ],
          "summary": "Update custom-orders by id",
          "parameters": [
            {
              "type": "string",
              "description": "Custom Order ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.CustomOrderView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.CustomStatus"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/customer-payments": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all customer-payments available",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "customer-payment"
          ],
          "summary": "Get all customer-payments",
          "parameters": [
            {
              "type": "boolean",
              "description": "Filter warehouses by inactive status",
              "name": "inactive",
              "in": "query"
            },
            {
              "type": "boolean",
              "description": "State if pagination is required or not",
              "name": "pagination",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page number",
              "name": "page",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page limit",
              "name": "limit",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.SupplierPayment"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a customer-payment with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "customer-payment"
          ],
          "summary": "Creates a customer-payment",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.SupplierPayment"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.SupplierPayment"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/customer-payments/{id}": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches customer-payment against an id",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "customer-payment"
          ],
          "summary": "Get customer-payment by id",
          "parameters": [
            {
              "type": "string",
              "description": "customer-payment ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.SupplierPayment"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates customer-payment by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "customer-payment"
          ],
          "summary": "Update customer-payment by id",
          "parameters": [
            {
              "type": "string",
              "description": "customer-payment ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.SupplierPayment"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.SupplierPayment"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/deal-campaigns": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all deal-campaigns from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "deal-campaigns"
          ],
          "summary": "Get all deal-campaigns",
          "parameters": [
            {
              "type": "boolean",
              "description": "Filter Deal Campaign by inactive status",
              "name": "inactive",
              "in": "query"
            },
            {
              "type": "boolean",
              "description": "State if pagination is required or not",
              "name": "pagination",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page number",
              "name": "page",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page limit",
              "name": "limit",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.DealCampaign"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a deal-campaigns with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "deal-campaigns"
          ],
          "summary": "Creates a deal-campaigns",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.DealCampaignView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.DealCampaign"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/deal-campaigns/alter-active": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "deletes  deal-campaigns",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "deal-campaigns"
          ],
          "summary": "Delete  deal-campaigns i.e. Toggle inactive",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AlterActiveView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/deal-campaigns/reorder": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Reorder deal campaigns",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "deal-campaigns"
          ],
          "summary": "Reorder deal campaigns",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.ReorderView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/deal-campaigns/{id}": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates deal-campaigns by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "deal-campaigns"
          ],
          "summary": "Update deal-campaigns by id",
          "parameters": [
            {
              "type": "string",
              "description": "DealCampaign ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.DealCampaignView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.DealCampaign"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/deal-stages": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all deal-stages from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "deal-stages"
          ],
          "summary": "Get all deal-stages",
          "parameters": [
            {
              "type": "boolean",
              "description": "Filter Deal Stage by inactive status",
              "name": "inactive",
              "in": "query"
            },
            {
              "type": "boolean",
              "description": "State if pagination is required or not",
              "name": "pagination",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page number",
              "name": "page",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page limit",
              "name": "limit",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.DealStage"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a deal-stages with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "deal-stages"
          ],
          "summary": "Creates a deal-stages",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.DealStageView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.DealStage"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/deal-stages/alter-active": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "deletes  deal-stages",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "deal-stages"
          ],
          "summary": "Delete  deal-stages i.e. Toggle inactive",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AlterActiveView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/deal-stages/reorder": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Reorder deal stages",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "deal-stages"
          ],
          "summary": "Reorder deal stages",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.ReorderView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/deal-stages/{id}": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates deal-stages by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "deal-stages"
          ],
          "summary": "Update deal-stages by id",
          "parameters": [
            {
              "type": "string",
              "description": "DealStage ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.DealStageView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.DealStage"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/debit-notes": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all DebitNotes from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "DebitNote"
          ],
          "summary": "Get all DebitNotes",
          "parameters": [
            {
              "type": "boolean",
              "description": "State if pagination is required or not",
              "name": "pagination",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page number",
              "name": "page",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page limit",
              "name": "limit",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "allOf": [
                            {
                              "$ref": "#/definitions/domain.DebitNote"
                            },
                            {
                              "type": "object",
                              "properties": {
                                " custom_fields": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/view.IdValue"
                                  }
                                },
                                " reporting_tags": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/view.IdValue"
                                  }
                                },
                                "items": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.OperationItem"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a DebitNote with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "DebitNote"
          ],
          "summary": "Creates a DebitNote",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/view.DebitNoteView"
                  },
                  {
                    "type": "object",
                    "properties": {
                      " custom_fields": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/view.IdValue"
                        }
                      },
                      " reporting_tags": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/view.IdValue"
                        }
                      },
                      "items": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/view.OperationItemView"
                        }
                      }
                    }
                  }
                ]
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "allOf": [
                          {
                            "$ref": "#/definitions/domain.DebitNote"
                          },
                          {
                            "type": "object",
                            "properties": {
                              " custom_fields": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/view.IdValue"
                                }
                              },
                              " reporting_tags": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/view.IdValue"
                                }
                              },
                              "items": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/domain.OperationItem"
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/debit-notes/{id}": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches DebitNote against an id",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "DebitNote"
          ],
          "summary": "Get DebitNote by id",
          "parameters": [
            {
              "type": "string",
              "description": "Expense ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "allOf": [
                          {
                            "$ref": "#/definitions/domain.DebitNote"
                          },
                          {
                            "type": "object",
                            "properties": {
                              " custom_fields": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/view.IdValue"
                                }
                              },
                              " reporting_tags": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/view.IdValue"
                                }
                              },
                              "items": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/domain.OperationItem"
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates DebitNote by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "DebitNote"
          ],
          "summary": "Update DebitNote by id",
          "parameters": [
            {
              "type": "string",
              "description": "Expense ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/view.DebitNoteView"
                  },
                  {
                    "type": "object",
                    "properties": {
                      " custom_fields": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/view.IdValue"
                        }
                      },
                      " reporting_tags": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/view.IdValue"
                        }
                      },
                      "items": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/view.OperationItemView"
                        }
                      }
                    }
                  }
                ]
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "allOf": [
                          {
                            "$ref": "#/definitions/domain.DebitNote"
                          },
                          {
                            "type": "object",
                            "properties": {
                              " custom_fields": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/view.IdValue"
                                }
                              },
                              " reporting_tags": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/view.IdValue"
                                }
                              },
                              "items": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/domain.OperationItem"
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/default-customer": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Find Default Customer",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "contacts"
          ],
          "summary": "Default Customer",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/delivery-partners/{id}": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches delivery partner by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "delivery_partners"
          ],
          "summary": "Get delivery partner by id",
          "parameters": [
            {
              "type": "string",
              "description": "Delivery partner ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.DeliveryPartner"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/document-numberings": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all document-numbers available",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "document-numbering"
          ],
          "summary": "Get all document-numbers",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/view.CodeSetting"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/document-numberings/{id}": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates document-numbering by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "document-numbering"
          ],
          "summary": "Update document-numbering by id",
          "parameters": [
            {
              "type": "string",
              "description": "document-numbering ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.CodeSetting"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/view.CodeSetting"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/download-barcode-pdf": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "generates download url for printing barcodes",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "collection-report-print"
          ],
          "summary": "Download Barcode printing pdf",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/download-printing-template-pdf": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Download printing template pdf",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "collection-report-print"
          ],
          "summary": "Download printing template pdf",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/edit-user": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates user's information",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "users"
          ],
          "summary": "Update user's information",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.UserUpdateView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/expenses": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all Expenses from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "Expense"
          ],
          "summary": "Get all Expenses",
          "parameters": [
            {
              "type": "boolean",
              "description": "State if pagination is required or not",
              "name": "pagination",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page number",
              "name": "page",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page limit",
              "name": "limit",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "allOf": [
                            {
                              "$ref": "#/definitions/domain.PurchaseBill"
                            },
                            {
                              "type": "object",
                              "properties": {
                                " custom_fields": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.CustomField"
                                  }
                                },
                                " reporting_tags": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.ReportingTag"
                                  }
                                },
                                "items": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.OperationItem"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a Expense with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "Expense"
          ],
          "summary": "Creates a Expense",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/view.ExpensesView"
                  },
                  {
                    "type": "object",
                    "properties": {
                      " custom_fields": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/view.IdValue"
                        }
                      },
                      " reporting_tags": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/view.IdValue"
                        }
                      },
                      "items": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/view.ExpenseItemView"
                        }
                      }
                    }
                  }
                ]
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "allOf": [
                          {
                            "$ref": "#/definitions/domain.Expense"
                          },
                          {
                            "type": "object",
                            "properties": {
                              " custom_fields": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/domain.CustomField"
                                }
                              },
                              " reporting_tags": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/domain.ReportingTag"
                                }
                              },
                              "items": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/domain.ExpenseItem"
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/expenses/{id}": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches Expense against an id",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "Expense"
          ],
          "summary": "Get Expense by id",
          "parameters": [
            {
              "type": "string",
              "description": "Expense ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "allOf": [
                          {
                            "$ref": "#/definitions/domain.Expense"
                          },
                          {
                            "type": "object",
                            "properties": {
                              " custom_fields": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/domain.CustomField"
                                }
                              },
                              " reporting_tags": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/domain.ReportingTag"
                                }
                              },
                              "items": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/domain.ExpenseItem"
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates Expenses by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "Expense"
          ],
          "summary": "Update Expense by id",
          "parameters": [
            {
              "type": "string",
              "description": "Expense ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/view.ExpensesView"
                  },
                  {
                    "type": "object",
                    "properties": {
                      " custom_fields": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/view.IdValue"
                        }
                      },
                      " reporting_tags": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/view.IdValue"
                        }
                      },
                      "items": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/view.ExpenseItemView"
                        }
                      }
                    }
                  }
                ]
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "allOf": [
                          {
                            "$ref": "#/definitions/domain.Expense"
                          },
                          {
                            "type": "object",
                            "properties": {
                              " custom_fields": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/domain.CustomField"
                                }
                              },
                              " reporting_tags": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/domain.ReportingTag"
                                }
                              },
                              "items": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/domain.ExpenseItem"
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/export": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Export data available",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "export"
          ],
          "summary": "Export data",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.ExportModelView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/export-collection-generate-link": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Export data available",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "export"
          ],
          "summary": "Export data",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.ExportTypeView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/export/{collection}": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Export data available",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "export"
          ],
          "summary": "Export data",
          "parameters": [
            {
              "type": "string",
              "description": "collection",
              "name": "collection",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "name": "account_id",
              "in": "query"
            },
            {
              "type": "string",
              "name": "amount",
              "in": "query"
            },
            {
              "type": "string",
              "name": "amountFrom",
              "in": "query"
            },
            {
              "type": "string",
              "name": "amountTo",
              "in": "query"
            },
            {
              "type": "string",
              "name": "date_gte",
              "in": "query"
            },
            {
              "type": "string",
              "name": "date_lte",
              "in": "query"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "csv",
              "name": "ids",
              "in": "query"
            },
            {
              "type": "string",
              "name": "reconciled",
              "in": "query"
            },
            {
              "type": "string",
              "name": "type",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/four-part-summary": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Fetch four part summary of sales, purchase, payment and receipt",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "dashboard"
          ],
          "summary": "Fetch four part summary of sales, purchase, payment and receipt",
          "parameters": [
            {
              "type": "string",
              "description": "current_from_date format: dd-mm-yyyy",
              "name": "current_from_date",
              "in": "query",
              "required": true
            },
            {
              "type": "string",
              "description": "current_to_date format: dd-mm-yyyy",
              "name": "current_to_date",
              "in": "query",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/view.FourPartSummary"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/general-settings": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all general setting from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "general_settings"
          ],
          "summary": "Get all general setting",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "allOf": [
                            {
                              "$ref": "#/definitions/view.GeneralSettingsView"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "billing_location_enabled": {
                                  "$ref": "#/definitions/view.GeneralSettingDataView"
                                },
                                "crossed_credit_limit": {
                                  "$ref": "#/definitions/view.GeneralSettingDataView"
                                },
                                "default_currency": {
                                  "$ref": "#/definitions/view.GeneralSettingDataView"
                                },
                                "discount_method": {
                                  "$ref": "#/definitions/view.GeneralSettingDataView"
                                },
                                "multiple_currency_enabled": {
                                  "$ref": "#/definitions/view.GeneralSettingDataView"
                                },
                                "multiple_warehouse_enabled": {
                                  "$ref": "#/definitions/view.GeneralSettingDataView"
                                },
                                "negative_cash_balance": {
                                  "$ref": "#/definitions/view.GeneralSettingDataView"
                                },
                                "negative_stock_balance": {
                                  "$ref": "#/definitions/view.GeneralSettingDataView"
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates a general setting with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "general_settings"
          ],
          "summary": "Updates a general setting value",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.GeneralSettingReqView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/general-settings/locations/{location_id}/round-amount": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Set the round amount of a location",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "general_settings"
          ],
          "summary": "Set location round amount",
          "parameters": [
            {
              "type": "string",
              "description": "Location ID",
              "name": "location_id",
              "in": "path",
              "required": true
            },
            {
              "description": "round amount and account",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AmountRoundRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.AmountRoundSettingResponse"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/generate-download-url": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Download a attachment with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "attachments"
          ],
          "summary": "Download a attachment",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AttachmentDownload"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/generate-upload-url": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "upload a attachment with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "attachments"
          ],
          "summary": "upload a attachment",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/get-me": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches users permission",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "users"
          ],
          "summary": "Get User Permission",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.UserInfo"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/gl-transactions": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Consolidated view of activity across several domain",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "transaction"
          ],
          "summary": "List all Gl-Transactions",
          "parameters": [
            {
              "enum": [
                "Void",
                "Approved",
                "Draft"
              ],
              "type": "string",
              "description": "Filter transactions by status",
              "name": "status",
              "in": "query"
            },
            {
              "type": "boolean",
              "description": "State if pagination is required or not",
              "name": "pagination",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page number",
              "name": "page",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page limit",
              "name": "limit",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.Transaction"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/groups-accounts": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Fetches account groups and accounts",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "accounts"
          ],
          "summary": "Fetch account groups and accounts",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "additionalProperties": true
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/groups-contacts": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates contact gruop by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "contact_groups"
          ],
          "summary": "Get group with contacts",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "additionalProperties": true
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/import-bank-statement": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Import Bank Statement from file",
          "consumes": [
            "multipart/form-data"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "bank-statement"
          ],
          "summary": "Import Bank Statement",
          "parameters": [
            {
              "type": "string",
              "description": "account id",
              "name": "account_id",
              "in": "query",
              "required": true
            },
            {
              "type": "file",
              "description": "bankstatement",
              "name": "request",
              "in": "formData",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.BankStatement"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/import-dry-run/account": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Import data available",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "import"
          ],
          "summary": "Import data",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.ImportView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.ImportAccountResponse"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/import-dry-run/contact": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Import data available",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "import"
          ],
          "summary": "Import data",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.ImportContactView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.ImportResponse"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/import-dry-run/product": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Import data available",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "import"
          ],
          "summary": "Import data",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.ImportView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.ImportProductResponse"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/invitations": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all invitations available",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "invitations"
          ],
          "summary": "Get all invitations",
          "parameters": [
            {
              "enum": [
                "Pending",
                "Accepted",
                "Rejected"
              ],
              "type": "string",
              "description": "Filter invitations by status",
              "name": "type",
              "in": "query"
            },
            {
              "type": "boolean",
              "description": "State if pagination is required or not",
              "name": "pagination",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page number",
              "name": "page",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page limit",
              "name": "limit",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.UserInvitation"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates an invitation with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "invitations"
          ],
          "summary": "Creates an invitation",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.InvitationView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.UserInvitation"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/invitations/reject": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "responds an invitation with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "invitations"
          ],
          "summary": "Responds an invitation",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.RejectInvitationView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.UserInvitation"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/invitations/{id}": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "removes invitation against an id",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "invitations"
          ],
          "summary": "Remove invitation by id",
          "parameters": [
            {
              "type": "string",
              "description": "invitation ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/invoice-referrers": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all invoices available referrers",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "invoices"
          ],
          "summary": "Get all invoice referrers",
          "parameters": [
            {
              "type": "boolean",
              "description": "Filter invoice by inactive status",
              "name": "inactive",
              "in": "query"
            },
            {
              "enum": [
                "Void",
                "Approved",
                "Draft"
              ],
              "type": "string",
              "description": "Filter invoice by status",
              "name": "status",
              "in": "query"
            },
            {
              "type": "boolean",
              "description": "State if pagination is required or not",
              "name": "pagination",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page number",
              "name": "page",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page limit",
              "name": "limit",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "allOf": [
                            {
                              "$ref": "#/definitions/domain.Invoice"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "custom_fields": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.CustomFieldData"
                                  }
                                },
                                "items": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.OperationItem"
                                  }
                                },
                                "reporting_tags": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.ReportingTagData"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/invoices": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all invoices available",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "invoices"
          ],
          "summary": "Get all invoices",
          "parameters": [
            {
              "type": "boolean",
              "description": "Filter invoice by inactive status",
              "name": "inactive",
              "in": "query"
            },
            {
              "enum": [
                "Void",
                "Approved",
                "Draft"
              ],
              "type": "string",
              "description": "Filter invoice by status",
              "name": "status",
              "in": "query"
            },
            {
              "type": "boolean",
              "description": "State if pagination is required or not",
              "name": "pagination",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page number",
              "name": "page",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page limit",
              "name": "limit",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "allOf": [
                            {
                              "$ref": "#/definitions/domain.Invoice"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "custom_fields": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.CustomFieldData"
                                  }
                                },
                                "items": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.OperationItem"
                                  }
                                },
                                "reporting_tags": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.ReportingTagData"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a invoice with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "invoices"
          ],
          "summary": "Creates a invoice",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.InvoiceView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "allOf": [
                            {
                              "$ref": "#/definitions/domain.Invoice"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "custom_fields": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.CustomFieldData"
                                  }
                                },
                                "items": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.OperationItem"
                                  }
                                },
                                "reporting_tags": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.ReportingTagData"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/invoices/{id}": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches invoice by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "invoices"
          ],
          "summary": "Get invoice by id",
          "parameters": [
            {
              "type": "string",
              "description": "Invoice ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "allOf": [
                            {
                              "$ref": "#/definitions/domain.Invoice"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "custom_fields": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.CustomFieldData"
                                  }
                                },
                                "items": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.OperationItem"
                                  }
                                },
                                "reporting_tags": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.ReportingTagData"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates invoices by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "invoices"
          ],
          "summary": "Update invoices by id",
          "parameters": [
            {
              "type": "string",
              "description": "Invoice ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.InvoiceView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "allOf": [
                            {
                              "$ref": "#/definitions/domain.Invoice"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "custom_fields": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.CustomFieldData"
                                  }
                                },
                                "items": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.OperationItem"
                                  }
                                },
                                "reporting_tags": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.ReportingTagData"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/invoices/{id}/payments": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Get invoice payment",
          "produces": [
            "application/json"
          ],
          "tags": [
            "invoice"
          ],
          "summary": "Get Invoice Paymemt",
          "parameters": [
            {
              "type": "string",
              "description": "InvoiceID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.PaymentItem"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/invoices/{id}/split-bill": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Spilt Bill",
          "produces": [
            "application/json"
          ],
          "tags": [
            "invoice"
          ],
          "summary": "Spilt Bill",
          "parameters": [
            {
              "description": "spiltposinvoiceview",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.SplitPosInvoiceView"
              }
            },
            {
              "type": "string",
              "description": "orderid",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.SalesOrder"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/ird-bills": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "list ird bills based on filter parameters",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "ird billing"
          ],
          "summary": "list ird bills based on filter parameters",
          "parameters": [
            {
              "type": "string",
              "description": "Transaction source Invoice, Credit Note",
              "name": "source",
              "in": "query",
              "required": true
            },
            {
              "type": "boolean",
              "description": "If ird sync is real or not",
              "name": "is_realtime",
              "in": "query"
            },
            {
              "type": "boolean",
              "description": "If ird sync in test or not",
              "name": "is_test",
              "in": "query"
            },
            {
              "type": "boolean",
              "description": "If the bill sycned with ird",
              "name": "is_ird_sync",
              "in": "query"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "csv",
              "description": "sort parameters",
              "name": "sorts",
              "in": "query"
            },
            {
              "type": "boolean",
              "description": "do u want to paginate",
              "name": "pagination",
              "in": "query"
            },
            {
              "type": "string",
              "description": "set the page",
              "name": "page",
              "in": "query"
            },
            {
              "type": "string",
              "description": "set the page size",
              "name": "limit",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/ird-bills-re-sync": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Resync unsync ird bills",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "ird billing"
          ],
          "summary": "Resync unsync ird bills",
          "parameters": [
            {
              "description": "Ird resync",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/domain.IrdReSyncReq"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/ird-credentials/{id}": {
        "put": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Update ird credentials of organization",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "organization"
          ],
          "summary": "Update ird credentials of organization",
          "parameters": [
            {
              "type": "string",
              "description": "OrganizationID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/domain.IrdCredentials"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/ird-edit": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Edit whether ird is enabled or verified",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "organization"
          ],
          "summary": "edit ird",
          "parameters": [
            {
              "description": "ird edit view",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.IrdInfoEditView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/iso-currencies": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all currencies available",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "currencies"
          ],
          "summary": "Get all currencies",
          "parameters": [
            {
              "type": "boolean",
              "description": "Filter by inactive status",
              "name": "inactive",
              "in": "query"
            },
            {
              "type": "boolean",
              "description": "State if pagination is required or not",
              "name": "pagination",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page number",
              "name": "page",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page limit",
              "name": "limit",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.IsoCurrency"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/journal-vouchers": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all journal vouchers from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "journal-vouchers"
          ],
          "summary": "Get all journal vouchers",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.ResponseWithPagination"
                  },
                  {
                    "type": "object",
                    "properties": {
                      " meta_data": {
                        "$ref": "#/definitions/domain.Pagination"
                      },
                      "data": {
                        "type": "array",
                        "items": {
                          "allOf": [
                            {
                              "$ref": "#/definitions/domain.JournalVoucher"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "items": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.JournalVoucherItem"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a journal voucher with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "journal-vouchers"
          ],
          "summary": "Creates a journal voucher",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.JournalVoucherView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "allOf": [
                          {
                            "$ref": "#/definitions/domain.JournalVoucher"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "items": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/domain.JournalVoucherItem"
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/journal-vouchers/{id}": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches journal voucher by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "journal-vouchers"
          ],
          "summary": "Get journal voucher by id",
          "parameters": [
            {
              "type": "string",
              "description": "JournalVoucher ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "allOf": [
                          {
                            "$ref": "#/definitions/domain.JournalVoucher"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "items": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/domain.JournalVoucherItem"
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates journal voucher by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "journal-vouchers"
          ],
          "summary": "Update journal voucher by id",
          "parameters": [
            {
              "type": "string",
              "description": "JournalVoucher ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.JournalVoucherView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "allOf": [
                          {
                            "$ref": "#/definitions/domain.JournalVoucher"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "items": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/domain.JournalVoucherItem"
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/lead-sources": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all lead-sources available",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "lead-sources"
          ],
          "summary": "Get all lead-sources",
          "parameters": [
            {
              "type": "boolean",
              "description": "Filter Lead Source by inactive status",
              "name": "inactive",
              "in": "query"
            },
            {
              "type": "boolean",
              "description": "State if pagination is required or not",
              "name": "pagination",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page number",
              "name": "page",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page limit",
              "name": "limit",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.LeadSource"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a lead-sources type with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "lead-sources"
          ],
          "summary": "Creates a lead-sources type",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.LeadSourceView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.LeadSource"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/lead-sources/alter-active": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "deletes  lead-sources",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "lead-sources"
          ],
          "summary": "Delete  lead-sources i.e. Toggle inactive",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AlterActiveView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/lead-sources/reorder": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Reorder lead sources",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "lead-sources"
          ],
          "summary": "Reorder lead sources",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.ReorderView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/lead-sources/{id}": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates lead-sources by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "lead-sources"
          ],
          "summary": "Update lead-sources by id",
          "parameters": [
            {
              "type": "string",
              "description": "LeadSource ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.LeadSourceView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.LeadSource"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/leave-company": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Leave organization detail",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "organization"
          ],
          "summary": "Leave organization detail",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/location-edit": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "edit billiing location",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "organization"
          ],
          "summary": "edit billing location",
          "parameters": [
            {
              "description": "billing location",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.BillingLocationEditView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/locations": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all locations available",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "locations"
          ],
          "summary": "Get all locations",
          "parameters": [
            {
              "type": "boolean",
              "description": "Filter tags by inactive status",
              "name": "inactive",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/view.LocationView"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a location with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "locations"
          ],
          "summary": "Creates a location type",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.LocationView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/view.LocationView"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/locations/alter-active": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "alters location against an id",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "locations"
          ],
          "summary": "Alter location by id",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AlterActiveView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/locations/{id}": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches location against an id",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "locations"
          ],
          "summary": "Get location by id",
          "parameters": [
            {
              "type": "string",
              "description": "location ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/view.LocationView"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates location by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "locations"
          ],
          "summary": "Update location by id",
          "parameters": [
            {
              "type": "string",
              "description": "Location ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.LocationView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/view.LocationView"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/locations/{id}/update-default-tab": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates location default tab",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "locations"
          ],
          "summary": "Update location default tab",
          "parameters": [
            {
              "type": "string",
              "description": "Location ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.UpdateTabRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.Location"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/login": {
        "post": {
          "security": [
            {
              "namespace": []
            }
          ],
          "description": "User login with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "login"
          ],
          "summary": "User login",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.UserLoginView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.LoginResponse"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/measurement-units": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all measurement units from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "measurement-units"
          ],
          "summary": "Get all measurement units",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/view.MeasurementUnitView"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates a measurement unit with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "measurement-units"
          ],
          "summary": "Updates a measurement unit",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.MeasurementUnitView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/view.MeasurementUnitView"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/measurement-units/{id}": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches measurement unit by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "measurement-units"
          ],
          "summary": "Get measurement unit by id",
          "parameters": [
            {
              "type": "string",
              "description": "Measurement unit ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/view.MeasurementUnitView"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/mock-collection-report-html": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a mock html",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "collection-report-print"
          ],
          "summary": "Creates a mock html",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/mock-collection-report-link": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a mock link",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "collection-report-print"
          ],
          "summary": "Creates a mock link",
          "parameters": [
            {
              "type": "string",
              "description": "template id ",
              "name": "template_id",
              "in": "query",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/multiple-account-groups": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates multiple account group with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "account-groups"
          ],
          "summary": "Creates multiple account group",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AccountCreateView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.AccountGroup"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/namespace-credentials": {
        "post": {
          "security": [
            {
              "namespace": []
            }
          ],
          "description": "Namespace credential with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "login"
          ],
          "summary": "Namespace credential",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.NamespaceCredentialView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.Token"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/namespace-profile": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches organization detail",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "organization"
          ],
          "summary": "Get organization detail",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.Organization"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/nested-product-categories": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all product categories in a nested form from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "product-category"
          ],
          "summary": "Get all product categories in a nested form",
          "parameters": [
            {
              "type": "string",
              "description": "Filter product category by parent id",
              "name": "parent_id",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.ProductCategory"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/normal-accounts-multi-add": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "add account",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "accounts"
          ],
          "summary": "Add multi account",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.MultipleAccountView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/opening-balances/account": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all accounts from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "accounts"
          ],
          "summary": "Get all accounts",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.AccountBalanceResponse"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates an account with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "accounts"
          ],
          "summary": "Creates an account",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AccountOpeningBalanceRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.Account"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/opening-balances/customer": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all accounts from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "accounts"
          ],
          "summary": "Get all accounts",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.ContactBalanceResponse"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/opening-balances/product": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all accounts from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "accounts"
          ],
          "summary": "Get all accounts",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.ProductBalanceResponse"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates an account with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "accounts"
          ],
          "summary": "Creates an account",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.ProductOpeningBalanceRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.Account"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/opening-balances/supplier": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all accounts from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "accounts"
          ],
          "summary": "Get all accounts",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.ContactBalanceResponse"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/opportunities": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all opportunities available",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "opportunities"
          ],
          "summary": "Get all opportunities",
          "parameters": [
            {
              "type": "boolean",
              "description": "Filter opportunity by inactive status",
              "name": "inactive",
              "in": "query"
            },
            {
              "enum": [
                "Pending",
                "Won",
                "Lost"
              ],
              "type": "string",
              "description": "Filter opportunity by status",
              "name": "status",
              "in": "query"
            },
            {
              "type": "boolean",
              "description": "State if pagination is required or not",
              "name": "pagination",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page number",
              "name": "page",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page limit",
              "name": "limit",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.Opportunity"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a opportunity with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "opportunities"
          ],
          "summary": "Creates a opportunity type",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.OpportunityView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.Opportunity"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/opportunities-multi-edit": {
        "post": {
          "security": [
            {
              "Bearer": []
            },
            {
              "namespace": []
            }
          ],
          "description": "Update multiple opportunities with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "opportunities"
          ],
          "summary": "Update multiple opportunities type",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.MultiOpportunityView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/opportunities/alter-active": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "alter opportunity i.e. Toggle inactive",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "opportunities"
          ],
          "summary": "Alter opportunity by id",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AlterActiveView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/opportunities/{id}": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches opportunity against an id",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "opportunities"
          ],
          "summary": "Get opportunity by id",
          "parameters": [
            {
              "type": "string",
              "description": "Opportunity ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.Opportunity"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates opportunity by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "opportunities"
          ],
          "summary": "Update opportunity by id",
          "parameters": [
            {
              "type": "string",
              "description": "Opportunity ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.OpportunityView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.Opportunity"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/order-stats": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Get order stat of location between two dates",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "pos_dashboard"
          ],
          "summary": "Get the order stat",
          "parameters": [
            {
              "type": "string",
              "name": "dateGte",
              "in": "query"
            },
            {
              "type": "string",
              "name": "dateLte",
              "in": "query"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "csv",
              "name": "locations",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/service.OrderStatsResponse"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/orders/{orderId}/{itemId}/update-served": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates served with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "orders"
          ],
          "summary": "update served",
          "parameters": [
            {
              "type": "string",
              "description": "Order ID",
              "name": "orderId",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "description": "Item ID",
              "name": "itemId",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.QuantityRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.PosOrderItem"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/orders/{orderId}/{itemId}/update-takeaway": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates takeway",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "orders"
          ],
          "summary": "update takeaway",
          "parameters": [
            {
              "type": "string",
              "description": "Order ID",
              "name": "orderId",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "description": "Item ID",
              "name": "itemId",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.QuantityRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.PosOrderItem"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/organization": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches organization detail",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "organization"
          ],
          "summary": "Get organization detail",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.Organization"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Creates an organization",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "organization"
          ],
          "summary": "Creates an organization",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.OrganizationView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.Organization"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/organization-minimized": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Get minimized organization data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "organization"
          ],
          "summary": "Get minimized organization data",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.Organization"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/organization/{id}": {
        "put": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Updates organization detail",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "organization"
          ],
          "summary": "Update organization detail",
          "parameters": [
            {
              "type": "string",
              "description": "OrganizationID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.OrganizationUpdateView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.Organization"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/payment-modes": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all paymentMode from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "paymentMode"
          ],
          "summary": "Get all paymentMode",
          "parameters": [
            {
              "type": "boolean",
              "description": "Filter Payment Mode by inactive status",
              "name": "inactive",
              "in": "query"
            },
            {
              "type": "boolean",
              "description": "State if pagination is required or not",
              "name": "pagination",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page number",
              "name": "page",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page limit",
              "name": "limit",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.PaymentMode"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a paymentMode with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "paymentMode"
          ],
          "summary": "Creates a paymentMode",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.PaymentModeView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.PaymentMode"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/payment-modes/alter-active": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "deletes paymentMode",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "paymentMode"
          ],
          "summary": "Delete paymentMode i.e. Toggle inactive",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AlterActiveView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/payment-modes/{id}": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "get paymentMode against an id",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "paymentMode"
          ],
          "summary": "Get paymentMode by id",
          "parameters": [
            {
              "type": "string",
              "description": "PaymentMode ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.PaymentMode"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates paymentMode against an id",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "paymentMode"
          ],
          "summary": "Update paymentMode by id",
          "parameters": [
            {
              "type": "string",
              "description": "PaymentMode ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.PaymentModeView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.PaymentMode"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/payment-stats": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Get the payment status",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "pos_dashboard"
          ],
          "summary": "Payment status",
          "parameters": [
            {
              "type": "string",
              "name": "dateGte",
              "in": "query"
            },
            {
              "type": "string",
              "name": "dateLte",
              "in": "query"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "csv",
              "name": "locations",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/service.PaymentResponse"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/pos/credit-notes": {
        "post": {
          "description": "creates a order with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "orders"
          ],
          "summary": "Creates a order",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.PosOrderView"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/pos/delivery-partners": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all delivery partners available",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "delivery_partners"
          ],
          "summary": "Get all delivery partners",
          "parameters": [
            {
              "type": "boolean",
              "description": "Filter tags by inactive status",
              "name": "inactive",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.DeliveryPartner"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a delivery partner with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "delivery_partners"
          ],
          "summary": "Creates a delivery partner",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.DeliveryPartnerView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.DeliveryPartner"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/pos/delivery-partners/alter-active": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "alter delivery partner i.e. Toggle inactive",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "delivery_partners"
          ],
          "summary": "Alter active status",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AlterActiveView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/pos/delivery-partners/{id}": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates delivery partner by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "delivery_partners"
          ],
          "summary": "Update contact group by id",
          "parameters": [
            {
              "type": "string",
              "description": "Delivery Partner ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.DeliveryPartnerView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.DeliveryPartner"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/pos/floorplans": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all floorplans from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "floorplans"
          ],
          "summary": "Get all floorplans",
          "parameters": [
            {
              "type": "string",
              "name": "area_id",
              "in": "query"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "csv",
              "name": "ids",
              "in": "query"
            },
            {
              "type": "string",
              "name": "inactive",
              "in": "query"
            },
            {
              "type": "string",
              "name": "limit",
              "in": "query"
            },
            {
              "type": "string",
              "name": "location_id",
              "in": "query"
            },
            {
              "type": "boolean",
              "name": "no_pagination",
              "in": "query"
            },
            {
              "type": "string",
              "name": "page",
              "in": "query"
            },
            {
              "type": "string",
              "name": "paginate",
              "in": "query"
            },
            {
              "type": "string",
              "name": "search",
              "in": "query"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "csv",
              "name": "sorts",
              "in": "query"
            },
            {
              "type": "string",
              "name": "status",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.Table"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a floorplan with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "floorplans"
          ],
          "summary": "Creates a floorplan",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/view.FloorLayoutView"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "table": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/view.TableView"
                        }
                      }
                    }
                  }
                ]
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.Table"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/pos/general-settings/cbms": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all cbms info from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "general_settings"
          ],
          "summary": "Get all cbms info",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/view.CbmsConfigurationView"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "set a cbms config with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "general_settings"
          ],
          "summary": "Set a cbms config value",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.CbmsConfigReqView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/pos/general-settings/service/{location_id}": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all service general setting from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "general_settings"
          ],
          "summary": "Get all service general setting",
          "parameters": [
            {
              "type": "string",
              "description": "Location ID",
              "name": "location_id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.LocationServiceCharge"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates  service charge setting with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "general_settings"
          ],
          "summary": "Updates  service charge setting value",
          "parameters": [
            {
              "type": "string",
              "description": "Location ID",
              "name": "location_id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.ServiceChargeReqView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/pos/general-settings/subscription": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all subscription info from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "general_settings"
          ],
          "summary": "Get all subscription info",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.SubscriptionGeneralSetting"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "add a general setting subscription with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "general_settings"
          ],
          "summary": "Add a general setting subscription value",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.SubscriptionGeneralSettingsView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/pos/general-settings/{location_id}": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all general setting from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "general_settings"
          ],
          "summary": "Get all general setting",
          "parameters": [
            {
              "type": "string",
              "description": "Location ID",
              "name": "location_id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "allOf": [
                            {
                              "$ref": "#/definitions/view.LocationGeneralSettingsView"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "credit_note": {
                                  "$ref": "#/definitions/view.GeneralSettingDataView"
                                },
                                "default_tab": {
                                  "$ref": "#/definitions/view.GeneralSettingDataView"
                                },
                                "estimate_bill": {
                                  "$ref": "#/definitions/view.GeneralSettingDataView"
                                },
                                "invoice": {
                                  "$ref": "#/definitions/view.GeneralSettingDataView"
                                },
                                "kot_print": {
                                  "$ref": "#/definitions/view.GeneralSettingDataView"
                                },
                                "service_charge_applicable": {
                                  "$ref": "#/definitions/view.GeneralSettingDataView"
                                },
                                "service_charge_rate": {
                                  "$ref": "#/definitions/view.GeneralSettingDataView"
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates a general setting with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "general_settings"
          ],
          "summary": "Updates a general setting value",
          "parameters": [
            {
              "type": "string",
              "description": "Location ID",
              "name": "location_id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.LocationGeneralSettingReqView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/pos/kots": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all kot available",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "kots"
          ],
          "summary": "Get all kot",
          "parameters": [
            {
              "type": "boolean",
              "description": "State if pagination is required or not",
              "name": "pagination",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page number",
              "name": "page",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page limit",
              "name": "limit",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.OrderBatch"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/pos/kots/{id}": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches kot against an id",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "kots"
          ],
          "summary": "Get kot by id",
          "parameters": [
            {
              "type": "string",
              "description": "kot ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.OrderBatch"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/pos/linked-payment-modes/{location_id}": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all location specific payment modes available",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "payment_modes"
          ],
          "summary": "Get all location specific payment modes",
          "parameters": [
            {
              "type": "string",
              "description": "Location ID",
              "name": "location_id",
              "in": "path",
              "required": true
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "csv",
              "name": "ids",
              "in": "query"
            },
            {
              "type": "string",
              "name": "inactive",
              "in": "query"
            },
            {
              "type": "string",
              "name": "limit",
              "in": "query"
            },
            {
              "type": "boolean",
              "name": "no_pagination",
              "in": "query"
            },
            {
              "type": "string",
              "name": "page",
              "in": "query"
            },
            {
              "type": "string",
              "name": "paginate",
              "in": "query"
            },
            {
              "type": "string",
              "name": "search",
              "in": "query"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "csv",
              "name": "sorts",
              "in": "query"
            },
            {
              "type": "string",
              "name": "status",
              "in": "query"
            },
            {
              "type": "string",
              "name": "type",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.LocationPaymentMode"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/pos/location-payment-modes": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates location based payment modes with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "payment_modes"
          ],
          "summary": "Updates location based payment modes",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.LocationPaymentModeView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/pos/location-payment-modes/{location_id}": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all unlinked location specific payment modes available",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "payment_modes"
          ],
          "summary": "Get all unlinked location specific payment modes",
          "parameters": [
            {
              "type": "string",
              "description": "Location ID",
              "name": "location_id",
              "in": "path",
              "required": true
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "csv",
              "name": "ids",
              "in": "query"
            },
            {
              "type": "string",
              "name": "inactive",
              "in": "query"
            },
            {
              "type": "string",
              "name": "limit",
              "in": "query"
            },
            {
              "type": "boolean",
              "name": "no_pagination",
              "in": "query"
            },
            {
              "type": "string",
              "name": "page",
              "in": "query"
            },
            {
              "type": "string",
              "name": "paginate",
              "in": "query"
            },
            {
              "type": "string",
              "name": "search",
              "in": "query"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "csv",
              "name": "sorts",
              "in": "query"
            },
            {
              "type": "string",
              "name": "status",
              "in": "query"
            },
            {
              "type": "string",
              "name": "type",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.PaymentMode"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/pos/orders": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a order with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "orders"
          ],
          "summary": "Creates a order",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.PosOrderView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "allOf": [
                            {
                              "$ref": "#/definitions/domain.SalesOrder"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "products": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.Product"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/pos/orders/customers/{id}": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates a order customer with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "orders"
          ],
          "summary": "update a order customer",
          "parameters": [
            {
              "type": "string",
              "description": "Order ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.OrderCustomerView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.SalesOrder"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/pos/orders/items-transfer": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "transfer items against an id",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "orders"
          ],
          "summary": "Transfer item by id",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.OrderItemTransferView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/pos/orders/{id}": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches order against an id",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "orders"
          ],
          "summary": "Get order by id",
          "parameters": [
            {
              "type": "string",
              "description": "order ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.SalesOrder"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates a order with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "orders"
          ],
          "summary": "update a order",
          "parameters": [
            {
              "type": "string",
              "description": "Order ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.OrderUpdateView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.SalesOrder"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/pos/sessions": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all sessions available",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "sessions"
          ],
          "summary": "Get all sessions based on location id",
          "parameters": [
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "csv",
              "name": "ids",
              "in": "query"
            },
            {
              "type": "string",
              "name": "inactive",
              "in": "query"
            },
            {
              "type": "string",
              "name": "limit",
              "in": "query"
            },
            {
              "type": "string",
              "name": "location_id",
              "in": "query"
            },
            {
              "type": "boolean",
              "name": "no_pagination",
              "in": "query"
            },
            {
              "type": "string",
              "name": "page",
              "in": "query"
            },
            {
              "type": "string",
              "name": "paginate",
              "in": "query"
            },
            {
              "type": "string",
              "name": "search",
              "in": "query"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "csv",
              "name": "sorts",
              "in": "query"
            },
            {
              "type": "string",
              "name": "status",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.Session"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a session with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "sessions"
          ],
          "summary": "Creates a session",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.SessionView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.Session"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/pos/sessions/{id}": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches session against an id",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "sessions"
          ],
          "summary": "Get session by id",
          "parameters": [
            {
              "type": "string",
              "description": "session ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.Session"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "update a session with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "sessions"
          ],
          "summary": "Updates a session",
          "parameters": [
            {
              "type": "string",
              "description": "session ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.SessionStatus"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.Session"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/pos/unlink-payment-modes/{id}": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all unlinked location specific payment modes available",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "payment_modes"
          ],
          "summary": "Get all unlinked location specific payment modes",
          "parameters": [
            {
              "type": "string",
              "description": "Location ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/printing-template-pdf-link": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Generate a link to downnload pdf for printing-template",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "collection-report-print"
          ],
          "summary": "Generate a link to downnload pdf for printing-template",
          "parameters": [
            {
              "type": "string",
              "description": "source",
              "name": "source",
              "in": "query",
              "required": true
            },
            {
              "type": "string",
              "description": "id-uuid",
              "name": "id",
              "in": "query",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/printing-template-select": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "List selected printing-template",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "printing-templates"
          ],
          "summary": "List printing-template",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.PrintingTemplateSetting"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a printing-template with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "printing-templates"
          ],
          "summary": "Creates a printing-template",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.PrintingTemplateView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/printing-templates": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all printing-templates available",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "printing-templates"
          ],
          "summary": "Get all printing-templates",
          "parameters": [
            {
              "type": "boolean",
              "description": "Filter printing-templates by inactive status",
              "name": "inactive",
              "in": "query"
            },
            {
              "type": "boolean",
              "description": "State if pagination is required or not",
              "name": "pagination",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page number",
              "name": "page",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page limit",
              "name": "limit",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/view.PrintingTemplateView"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a printing-template with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "printing-templates"
          ],
          "summary": "Creates a printing-template",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.PrintingTemplateView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/printing-templates/{id}": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches printing-template against an id",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "printing-templates"
          ],
          "summary": "Get printing-template by id",
          "parameters": [
            {
              "type": "string",
              "description": "Printing-Template ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/view.PrintingTemplateView"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates printing-template by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "printing-templates"
          ],
          "summary": "Update printing-template by id",
          "parameters": [
            {
              "type": "string",
              "description": "Printing-Template ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.PrintingTemplateView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/view.PrintingTemplateView"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "delete": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "deletes printing-template against an id",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "printing-templates"
          ],
          "summary": "Delete printing-template by id",
          "parameters": [
            {
              "type": "string",
              "description": "Printing-Template ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/product-categories": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all product categories from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "product-category"
          ],
          "summary": "Get all product categories",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.ResponseWithPagination"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.ProductCategory"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a product category with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "product-category"
          ],
          "summary": "Creates a product category",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.ProductCategoryView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.ProductCategory"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/product-categories/{id}": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches product category by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "product-category"
          ],
          "summary": "Get product category by id",
          "parameters": [
            {
              "type": "string",
              "description": "Product category ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.ProductCategory"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates product category by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "product-category"
          ],
          "summary": "Update product category by id",
          "parameters": [
            {
              "type": "string",
              "description": "Product Category ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.ProductCategoryView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.ProductCategory"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/product-movements": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "List all movement",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "transaction"
          ],
          "summary": "List all movement",
          "parameters": [
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "csv",
              "name": "contactIds",
              "in": "query"
            },
            {
              "type": "string",
              "name": "limit",
              "in": "query"
            },
            {
              "type": "string",
              "name": "page",
              "in": "query"
            },
            {
              "type": "string",
              "name": "paginate",
              "in": "query"
            },
            {
              "type": "string",
              "name": "productId",
              "in": "query"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "csv",
              "name": "sorts",
              "in": "query"
            },
            {
              "type": "boolean",
              "name": "unit",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.ProductMovement"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/product-variants": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "product-variant parents",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "product-variant"
          ],
          "summary": "List product-variant parents",
          "parameters": [
            {
              "type": "boolean",
              "name": "available_for_sale",
              "in": "query"
            },
            {
              "maxLength": 100,
              "type": "string",
              "name": "code",
              "in": "query",
              "required": true
            },
            {
              "type": "string",
              "name": "description",
              "in": "query"
            },
            {
              "maxLength": 20,
              "type": "string",
              "name": "hs_code",
              "in": "query"
            },
            {
              "type": "string",
              "name": "image",
              "in": "query"
            },
            {
              "maxLength": 100,
              "type": "string",
              "name": "name",
              "in": "query",
              "required": true
            },
            {
              "type": "string",
              "name": "parent_id",
              "in": "query"
            },
            {
              "type": "string",
              "name": "primary_unit_id",
              "in": "query"
            },
            {
              "type": "string",
              "name": "print_profile_id",
              "in": "query"
            },
            {
              "type": "string",
              "name": "product_category_id",
              "in": "query"
            },
            {
              "type": "string",
              "name": "purchase_account_id",
              "in": "query"
            },
            {
              "type": "number",
              "name": "purchase_price",
              "in": "query"
            },
            {
              "type": "string",
              "name": "purchase_return_account_id",
              "in": "query"
            },
            {
              "type": "string",
              "name": "purchase_return_sub_account_id",
              "in": "query"
            },
            {
              "type": "string",
              "name": "purchase_sub_account_id",
              "in": "query"
            },
            {
              "type": "number",
              "name": "re_order_level",
              "in": "query"
            },
            {
              "type": "string",
              "name": "sales_account_id",
              "in": "query"
            },
            {
              "type": "string",
              "name": "sales_return_account_id",
              "in": "query"
            },
            {
              "type": "string",
              "name": "sales_return_sub_account_id",
              "in": "query"
            },
            {
              "type": "string",
              "name": "sales_sub_account_id",
              "in": "query"
            },
            {
              "type": "number",
              "name": "selling_price",
              "in": "query"
            },
            {
              "type": "boolean",
              "name": "service_charge_applicable",
              "in": "query"
            },
            {
              "enum": [
                "NO_VAT",
                "0 VAT",
                "13 VAT"
              ],
              "type": "string",
              "x-enum-varnames": [
                "NoTaxType",
                "ZeroTaxType",
                "ThirteenTaxType"
              ],
              "name": "tax",
              "in": "query",
              "required": true
            },
            {
              "type": "boolean",
              "name": "track_inventory",
              "in": "query"
            },
            {
              "type": "string",
              "name": "type",
              "in": "query"
            },
            {
              "type": "string",
              "name": "valuation_method",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a product with variants",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "product-variant"
          ],
          "summary": "Creates a product with variants",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/view.VariantProductView"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/product-variants-config": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all product variant with configs",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "product-variant-config"
          ],
          "summary": "Get all product variant with configs",
          "parameters": [
            {
              "type": "boolean",
              "description": "Filter variants by inactive status",
              "name": "inactive",
              "in": "query"
            },
            {
              "type": "boolean",
              "description": "State if pagination is required or not",
              "name": "pagination",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page number",
              "name": "page",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page limit",
              "name": "limit",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.ResponseWithPagination"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.ProductVariantAttribute"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a product variant with configs with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "product-variant-config"
          ],
          "summary": "Creates a product variant with configs",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.ProductVariantConfigView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.ProductVariantAttribute"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/product-variants-config/{id}": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches product variant config by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "product-variant-config"
          ],
          "summary": "Get product variant config by id",
          "parameters": [
            {
              "type": "string",
              "description": "Product variant ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.ProductVariantAttribute"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates product variant config by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "product-variant-config"
          ],
          "summary": "Update product variant config by id",
          "parameters": [
            {
              "type": "string",
              "description": "Product Variant Config ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.ProductVariantConfigView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.ProductVariantAttribute"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/product-variants-dummy": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "the data will be later posted by the client to actually generate variants",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "product-variant"
          ],
          "summary": "generates dummy variant parent and child with product and config data",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.DummyVariantView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/product-variants/{id}": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "gives the detail of a product-variant parent, its children and variants used",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "product-variant"
          ],
          "summary": "Detail of a product-variant parent",
          "parameters": [
            {
              "type": "string",
              "description": "productid",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/products": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all products from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "products"
          ],
          "summary": "Get all products",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/view.ProductView"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a product with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "products"
          ],
          "summary": "Creates a product",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.ProductView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/view.ProductView"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/products-multi-add": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "add product",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "products"
          ],
          "summary": "Add multi product",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.MultiProductView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/products-multi-edit": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "add product",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "products"
          ],
          "summary": "Add multi product",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.MultiProductView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/products/{id}": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches product by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "products"
          ],
          "summary": "Get product by id",
          "parameters": [
            {
              "type": "boolean",
              "description": "Secondary Unit Status",
              "name": "inactive",
              "in": "query"
            },
            {
              "type": "string",
              "description": "Product ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/view.ProductView"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "put": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates product by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "products"
          ],
          "summary": "Update product by id",
          "parameters": [
            {
              "type": "string",
              "description": "Product ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.ProductView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/view.ProductView"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/products/{id}/add-variant-attributes": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Add Variant Attribute",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "products"
          ],
          "summary": "Add Variant Attribute",
          "parameters": [
            {
              "type": "string",
              "description": "product id",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AddAttributeRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/products/{id}/add-variant-product": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Add Variant Product",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "products"
          ],
          "summary": "Add Variant Product",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AddVariantProductRequest"
              }
            },
            {
              "type": "string",
              "description": "productid",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/products/{id}/alter-active": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "alters product's secondary unit status by id of product and secondary unit",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "products"
          ],
          "summary": "AlterActiveSecondaryUnits by product id",
          "parameters": [
            {
              "type": "string",
              "description": "Product ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AlterActiveView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/products/{id}/barcodes": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Add product barcode",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "products"
          ],
          "summary": "Add product barcode",
          "parameters": [
            {
              "type": "string",
              "description": "product id",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AddBarcodeRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/products/{id}/secondary-units": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Get secondary unit of a product",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "products"
          ],
          "summary": "Get secondary unit of a product",
          "parameters": [
            {
              "type": "string",
              "description": "product id",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "csv",
              "name": "ids",
              "in": "query"
            },
            {
              "type": "string",
              "name": "inactive",
              "in": "query"
            },
            {
              "type": "string",
              "name": "limit",
              "in": "query"
            },
            {
              "type": "boolean",
              "name": "no_pagination",
              "in": "query"
            },
            {
              "type": "string",
              "name": "page",
              "in": "query"
            },
            {
              "type": "string",
              "name": "paginate",
              "in": "query"
            },
            {
              "type": "string",
              "name": "search",
              "in": "query"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "csv",
              "name": "sorts",
              "in": "query"
            },
            {
              "type": "string",
              "name": "status",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.SecondaryUnit"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/products/{id}/variant-attributes": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a product with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "products"
          ],
          "summary": "Creates a product",
          "parameters": [
            {
              "type": "string",
              "description": "productid",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/purchase-bills": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all purchase-bills from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "purchase-bill"
          ],
          "summary": "Get all purchase-bills",
          "parameters": [
            {
              "type": "boolean",
              "description": "State if pagination is required or not",
              "name": "pagination",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page number",
              "name": "page",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page limit",
              "name": "limit",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "allOf": [
                            {
                              "$ref": "#/definitions/domain.PurchaseBill"
                            },
                            {
                              "type": "object",
                              "properties": {
                                " custom_fields": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/view.IdValue"
                                  }
                                },
                                " reporting_tags": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/view.IdValue"
                                  }
                                },
                                "items": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.OperationItem"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a purchase-bill with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "purchase-bill"
          ],
          "summary": "Creates a purchase-bill",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/view.PurchaseBillView"
                  },
                  {
                    "type": "object",
                    "properties": {
                      " custom_fields": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/view.IdValue"
                        }
                      },
                      " reporting_tags": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/view.IdValue"
                        }
                      },
                      "items": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/view.OperationItemView"
                        }
                      }
                    }
                  }
                ]
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "allOf": [
                          {
                            "$ref": "#/definitions/domain.PurchaseBill"
                          },
                          {
                            "type": "object",
                            "properties": {
                              " custom_fields": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/view.IdValue"
                                }
                              },
                              " reporting_tags": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/view.IdValue"
                                }
                              },
                              "items": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/domain.OperationItem"
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/purchase-bills/{id}": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches purchase-bill against an id",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "purchase-bill"
          ],
          "summary": "Get purchase-bill by id",
          "parameters": [
            {
              "type": "string",
              "description": "Purchase-Bill ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "allOf": [
                          {
                            "$ref": "#/definitions/domain.PurchaseBill"
                          },
                          {
                            "type": "object",
                            "properties": {
                              " custom_fields": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/view.IdValue"
                                }
                              },
                              " reporting_tags": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/view.IdValue"
                                }
                              },
                              "items": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/domain.OperationItem"
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates purchase-bills by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "purchase-bill"
          ],
          "summary": "Update purchase-bill by id",
          "parameters": [
            {
              "type": "string",
              "description": "Purchase-Bill ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.PurchaseBillView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "allOf": [
                          {
                            "$ref": "#/definitions/domain.PurchaseBill"
                          },
                          {
                            "type": "object",
                            "properties": {
                              " custom_fields": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/view.IdValue"
                                }
                              },
                              " reporting_tags": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/view.IdValue"
                                }
                              },
                              "items": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/domain.OperationItem"
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/purchase-orders": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all purchase-orders from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "purchase-order"
          ],
          "summary": "Get all purchase-orders",
          "parameters": [
            {
              "type": "boolean",
              "description": "State if pagination is required or not",
              "name": "pagination",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page number",
              "name": "page",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page limit",
              "name": "limit",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "allOf": [
                            {
                              "$ref": "#/definitions/domain.PurchaseOrder"
                            },
                            {
                              "type": "object",
                              "properties": {
                                " custom_fields": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/view.IdValue"
                                  }
                                },
                                " reporting_tags": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/view.IdValue"
                                  }
                                },
                                "items": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.PurchaseOrderItem"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a purchase-order with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "purchase-order"
          ],
          "summary": "Creates a purchase-order",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.PurchaseOrderView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "allOf": [
                          {
                            "$ref": "#/definitions/domain.PurchaseOrder"
                          },
                          {
                            "type": "object",
                            "properties": {
                              " custom_fields": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/view.IdValue"
                                }
                              },
                              " reporting_tags": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/view.IdValue"
                                }
                              },
                              "items": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/domain.PurchaseOrderItem"
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/purchase-orders/{id}": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches purchase-order against an id",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "purchase-order"
          ],
          "summary": "Get purchase-order by id",
          "parameters": [
            {
              "type": "string",
              "description": "Purchase-Order ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "allOf": [
                          {
                            "$ref": "#/definitions/domain.PurchaseOrder"
                          },
                          {
                            "type": "object",
                            "properties": {
                              " custom_fields": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/view.IdValue"
                                }
                              },
                              " reporting_tags": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/view.IdValue"
                                }
                              },
                              "items": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/domain.PurchaseOrderItem"
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates purchase-orders by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "purchase-order"
          ],
          "summary": "Update purchase-order by id",
          "parameters": [
            {
              "type": "string",
              "description": "Purchase-Order ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.PurchaseOrderView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "allOf": [
                          {
                            "$ref": "#/definitions/domain.PurchaseOrder"
                          },
                          {
                            "type": "object",
                            "properties": {
                              " custom_fields": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/view.IdValue"
                                }
                              },
                              " reporting_tags": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/view.IdValue"
                                }
                              },
                              "items": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/domain.PurchaseOrderItem"
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/quick-links": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "List quicklinks",
          "produces": [
            "application/json"
          ],
          "tags": [
            "dashboard"
          ],
          "summary": "List QuickLinks",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.QuickLink"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Update quicklinks",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "dashboard"
          ],
          "summary": "Update QuickLinks",
          "parameters": [
            {
              "description": "Quicklinkupdateitems",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.QuickLinkUpdateRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/quick-payments": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all quick payments from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "quick-payments"
          ],
          "summary": "Get all quick payments",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "allOf": [
                            {
                              "$ref": "#/definitions/domain.QuickPayment"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "items": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.CashItem"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a quick payment with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "quick-payments"
          ],
          "summary": "Creates a quick payment",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AccountingView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "allOf": [
                          {
                            "$ref": "#/definitions/domain.QuickPayment"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "items": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/domain.CashItem"
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/quick-payments/{id}": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches quick payment by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "quick-payments"
          ],
          "summary": "Get quick payment by id",
          "parameters": [
            {
              "type": "string",
              "description": "Quick Payment ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "allOf": [
                          {
                            "$ref": "#/definitions/domain.QuickPayment"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "items": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/domain.CashItem"
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates quick payment by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "quick-payments"
          ],
          "summary": "Update quick payment by id",
          "parameters": [
            {
              "type": "string",
              "description": "QuickPayment ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AccountingView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "allOf": [
                          {
                            "$ref": "#/definitions/domain.QuickPayment"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "items": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/domain.CashItem"
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/quick-receipts": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all quick receipts from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "quick-receipts"
          ],
          "summary": "Get all quick receipts",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "allOf": [
                            {
                              "$ref": "#/definitions/domain.QuickReceipt"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "items": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.CashItem"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a quick receipt with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "quick-receipts"
          ],
          "summary": "Creates a quick receipt",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AccountingView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "allOf": [
                          {
                            "$ref": "#/definitions/domain.QuickReceipt"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "items": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/domain.CashItem"
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/quick-receipts/{id}": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches quick receipt by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "quick-receipts"
          ],
          "summary": "Get quick receipt by id",
          "parameters": [
            {
              "type": "string",
              "description": "Quick Receipt ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "allOf": [
                          {
                            "$ref": "#/definitions/domain.QuickReceipt"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "items": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/domain.CashItem"
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates quick receipt by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "quick-receipts"
          ],
          "summary": "Update quick receipt by id",
          "parameters": [
            {
              "type": "string",
              "description": "QuickReceipt ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AccountingView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "allOf": [
                          {
                            "$ref": "#/definitions/domain.QuickReceipt"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "items": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/domain.CashItem"
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/quotations": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all quotations available",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "quotations"
          ],
          "summary": "Get all quotations",
          "parameters": [
            {
              "type": "boolean",
              "description": "Filter quotation by inactive status",
              "name": "inactive",
              "in": "query"
            },
            {
              "enum": [
                "Void",
                "Approved",
                "Draft"
              ],
              "type": "string",
              "description": "Filter quotation by status",
              "name": "status",
              "in": "query"
            },
            {
              "type": "boolean",
              "description": "State if pagination is required or not",
              "name": "pagination",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page number",
              "name": "page",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page limit",
              "name": "limit",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "allOf": [
                            {
                              "$ref": "#/definitions/domain.Quotation"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "custom_fields": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.CustomFieldData"
                                  }
                                },
                                "items": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.OperationItem"
                                  }
                                },
                                "reporting_tags": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.ReportingTagData"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a quotation with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "quotations"
          ],
          "summary": "Creates a quotation",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.QuotationView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "allOf": [
                            {
                              "$ref": "#/definitions/domain.Quotation"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "custom_fields": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.CustomFieldData"
                                  }
                                },
                                "items": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.OperationItem"
                                  }
                                },
                                "reporting_tags": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.ReportingTagData"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/quotations/{id}": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches quotation by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "quotations"
          ],
          "summary": "Get quotation by id",
          "parameters": [
            {
              "type": "string",
              "description": "Quotation ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "allOf": [
                            {
                              "$ref": "#/definitions/domain.Quotation"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "custom_fields": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.CustomFieldData"
                                  }
                                },
                                "items": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.OperationItem"
                                  }
                                },
                                "reporting_tags": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.ReportingTagData"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates quotations by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "quotations"
          ],
          "summary": "Update quotations by id",
          "parameters": [
            {
              "type": "string",
              "description": "Quotation ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.QuotationView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "allOf": [
                            {
                              "$ref": "#/definitions/domain.Quotation"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "custom_fields": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.CustomFieldData"
                                  }
                                },
                                "items": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.OperationItem"
                                  }
                                },
                                "reporting_tags": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.ReportingTagData"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/reconciliation-report": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "ReconcilationReport",
          "produces": [
            "application/json"
          ],
          "tags": [
            "bank-statement"
          ],
          "summary": "ReconcilationReport",
          "parameters": [
            {
              "type": "string",
              "description": "account id",
              "name": "account_id",
              "in": "query",
              "required": true
            },
            {
              "type": "string",
              "description": "to date",
              "name": "date",
              "in": "query",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.BankReconciliationAmount"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/refresh-tokens": {
        "post": {
          "security": [
            {
              "namespace": []
            }
          ],
          "description": "Get invoices tokens with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "refresh-token"
          ],
          "summary": "Refresh token",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.RefreshTokenView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.Token"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/remove-user": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Remove user from organization detail",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "organization"
          ],
          "summary": "Remove user from organization detail",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.RemoveUserView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/report": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Generates reports based on report_id query params",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "reports"
          ],
          "summary": "Generates reports",
          "parameters": [
            {
              "type": "string",
              "description": "Filter report by report_id",
              "name": "report_id",
              "in": "query",
              "required": true
            },
            {
              "type": "boolean",
              "description": "State if pagination is required or not",
              "name": "pagination",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page number",
              "name": "page",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page limit",
              "name": "limit",
              "in": "query"
            },
            {
              "description": "request body payload",
              "name": "request",
              "in": "body",
              "schema": {
                "$ref": "#/definitions/view.ReportFilterParams"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.AllTransaction"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/reporting-tags": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all reporting tags from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "reporting_tags"
          ],
          "summary": "Get all reporting tags",
          "parameters": [
            {
              "type": "boolean",
              "description": "Filter tags by inactive status",
              "name": "inactive",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/view.ReportingTagsView"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a reporting tag with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "reporting_tags"
          ],
          "summary": "Creates a reporting tag",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.ReportingTagsView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/view.ReportingTagsView"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/reporting-tags/alter-active": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "alter repoting tags",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "reporting_tags"
          ],
          "summary": "Alter repoting tags i.e. Toggle inactive",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AlterActiveView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/reporting-tags/reorder": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "alter repoting tags",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "reporting_tags"
          ],
          "summary": "Alter repoting tags i.e. Toggle inactive",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.ReorderView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/reporting-tags/{id}": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates reporting tag by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "reporting_tags"
          ],
          "summary": "Update reporting tag by id",
          "parameters": [
            {
              "type": "string",
              "description": "Reporting Tag ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.ReportingTagsView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/view.ReportingTagsView"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/roles": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all role references from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "roles"
          ],
          "summary": "Get all role references",
          "parameters": [
            {
              "type": "boolean",
              "description": "Filter tags by inactive status",
              "name": "inactive",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "allOf": [
                            {
                              "$ref": "#/definitions/domain.RoleReference"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "location_permissions": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.LocationPermission"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a role reference with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "roles"
          ],
          "summary": "Creates a role reference",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.RoleView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "allOf": [
                          {
                            "$ref": "#/definitions/domain.RoleReference"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "location_permissions": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/domain.LocationPermission"
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/roles/{id}": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "get role reference by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "roles"
          ],
          "summary": "Get role reference by id",
          "parameters": [
            {
              "type": "string",
              "description": "Roles ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "allOf": [
                          {
                            "$ref": "#/definitions/domain.RoleReference"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "location_permissions": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/domain.LocationPermission"
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates role reference by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "roles"
          ],
          "summary": "Update role reference by id",
          "parameters": [
            {
              "type": "string",
              "description": "Roles ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.RoleView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "allOf": [
                          {
                            "$ref": "#/definitions/domain.RoleReference"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "location_permissions": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/domain.LocationPermission"
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/sales-figure": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Get the payment status",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "pos_dashboard"
          ],
          "summary": "SalesFigure",
          "parameters": [
            {
              "type": "string",
              "name": "dateGte",
              "in": "query"
            },
            {
              "type": "string",
              "name": "dateLte",
              "in": "query"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "csv",
              "name": "locations",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/service.SaleGraph"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/sales-orders": {
        "get": {
          "description": "fetches all sales-orders available",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "sales-orders"
          ],
          "summary": "Get all sales-orders",
          "parameters": [
            {
              "type": "boolean",
              "description": "Filter sales orders by inactive status",
              "name": "inactive",
              "in": "query"
            },
            {
              "enum": [
                "Void",
                "Approved",
                "Draft"
              ],
              "type": "string",
              "description": "Filter sales orders by status",
              "name": "status",
              "in": "query"
            },
            {
              "type": "boolean",
              "description": "State if pagination is required or not",
              "name": "pagination",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page number",
              "name": "page",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page limit",
              "name": "limit",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "allOf": [
                            {
                              "$ref": "#/definitions/domain.SalesOrder"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "items": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.OperationItem"
                                  }
                                },
                                "reporting_tags": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.ReportingTagData"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "description": "creates a sales-order with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "sales-orders"
          ],
          "summary": "Creates a sales-order",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.SalesOrderView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "allOf": [
                            {
                              "$ref": "#/definitions/domain.SalesOrder"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "items": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.OperationItem"
                                  }
                                },
                                "reporting_tags": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.ReportingTagData"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/sales-orders/{id}": {
        "get": {
          "description": "fetches sales-order by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "sales-orders"
          ],
          "summary": "Get sales-order by id",
          "parameters": [
            {
              "type": "string",
              "description": "SalesOrder ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "allOf": [
                            {
                              "$ref": "#/definitions/domain.SalesOrder"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "items": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.OperationItem"
                                  }
                                },
                                "reporting_tags": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.ReportingTagData"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "description": "updates sales-orders by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "sales-orders"
          ],
          "summary": "Update sales-orders by id",
          "parameters": [
            {
              "type": "string",
              "description": "SalesOrder ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.SalesOrderView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "allOf": [
                            {
                              "$ref": "#/definitions/domain.SalesOrder"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "items": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.OperationItem"
                                  }
                                },
                                "reporting_tags": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.ReportingTagData"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/sales-stats": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Get sales stat of location  between two dates",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "pos_dashboard"
          ],
          "summary": "Get the sales stat",
          "parameters": [
            {
              "type": "string",
              "name": "dateGte",
              "in": "query"
            },
            {
              "type": "string",
              "name": "dateLte",
              "in": "query"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "csv",
              "name": "locations",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/service.SaleDashboardResponse"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/search": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "searches all -- from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "global-search"
          ],
          "summary": "Search globally",
          "parameters": [
            {
              "type": "string",
              "description": "Search String",
              "name": "search_phrase",
              "in": "query",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.GlobalSearch"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/sessions/close": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Close Session by location",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "sessions"
          ],
          "summary": "Close Session by location",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.SessionView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.Session"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/sessions/{id}/orders": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Get the session invoice",
          "produces": [
            "application/json"
          ],
          "tags": [
            "pos_dashboard"
          ],
          "summary": "session invoice",
          "parameters": [
            {
              "type": "string",
              "description": "location_id",
              "name": "location_id",
              "in": "query"
            },
            {
              "type": "string",
              "description": "sessionId",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/service.SessionInvoiceResponse"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/sessions/{id}/payments": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Get the session payment status",
          "produces": [
            "application/json"
          ],
          "tags": [
            "pos_dashboard"
          ],
          "summary": "session payment",
          "parameters": [
            {
              "type": "string",
              "description": "sessionId",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "type": "string",
              "description": "LocationId",
              "name": "location_id",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/service.SessionPaymentResponse"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/sub-accounts": {
        "post": {
          "description": "creates an sub account with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "sub-account"
          ],
          "summary": "Creates an sub account",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.SubAccountView"
              }
            },
            {
              "type": "string",
              "description": "namespace",
              "name": "namespace",
              "in": "query",
              "required": true
            },
            {
              "type": "string",
              "default": "Bearer \u003CAdd access token here\u003E",
              "description": "Insert your access token",
              "name": "Authorization",
              "in": "header",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.SubAccount"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/sub-accounts-alter-active": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "alter active sub account",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "sub-account"
          ],
          "summary": "Alter sub account i.e. Toggle inactive",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AlterActiveView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/sub-accounts/{id}": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all sub account  from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "sub-account"
          ],
          "summary": "Get all sub account",
          "parameters": [
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "csv",
              "name": "ids",
              "in": "query"
            },
            {
              "type": "string",
              "name": "inactive",
              "in": "query"
            },
            {
              "type": "string",
              "name": "limit",
              "in": "query"
            },
            {
              "type": "boolean",
              "name": "no_pagination",
              "in": "query"
            },
            {
              "type": "string",
              "name": "page",
              "in": "query"
            },
            {
              "type": "string",
              "name": "paginate",
              "in": "query"
            },
            {
              "type": "string",
              "name": "search",
              "in": "query"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "csv",
              "name": "sorts",
              "in": "query"
            },
            {
              "type": "string",
              "name": "status",
              "in": "query"
            },
            {
              "type": "string",
              "description": "Parent Account ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.SubAccount"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates sub account by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "sub-account"
          ],
          "summary": "Update sub account by id",
          "parameters": [
            {
              "type": "string",
              "description": "SubAccount ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.UpdateSubAccountView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.SubAccount"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/subscription-detail": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "edit subscription detail",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "organization"
          ],
          "summary": "SubscriptionDetailedit",
          "parameters": [
            {
              "description": "view.SubscriptionDetailView",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.SubscriptionDetailView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/subscription-matrix": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "get subscription matrix",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "organization"
          ],
          "summary": "get subscription matrix",
          "parameters": [
            {
              "type": "string",
              "name": "fromDate",
              "in": "query"
            },
            {
              "type": "string",
              "name": "slug",
              "in": "query"
            },
            {
              "type": "string",
              "name": "toDate",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.SubscriptionMatrixResp"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/subscription-status": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "edit subscription status",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "organization"
          ],
          "summary": "SubscriptionStatusedit",
          "parameters": [
            {
              "description": "view.SubscriptionStatusView",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.SubscriptionStatusView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/supplier-payments": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all supplier-payments available",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "supplier-payment"
          ],
          "summary": "Get all supplier-payments",
          "parameters": [
            {
              "type": "boolean",
              "description": "Filter warehouses by inactive status",
              "name": "inactive",
              "in": "query"
            },
            {
              "type": "boolean",
              "description": "State if pagination is required or not",
              "name": "pagination",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page number",
              "name": "page",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page limit",
              "name": "limit",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.SupplierPayment"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a supplier-payment with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "supplier-payment"
          ],
          "summary": "Creates a supplier-payment",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.SupplierPayment"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.SupplierPayment"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/supplier-payments/{id}": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches supplier-payment against an id",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "supplier-payment"
          ],
          "summary": "Get supplier-payment by id",
          "parameters": [
            {
              "type": "string",
              "description": "Supplier-Payment ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.SupplierPayment"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates supplier-payment by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "supplier-payment"
          ],
          "summary": "Update supplier-payment by id",
          "parameters": [
            {
              "type": "string",
              "description": "Supplier-Payment ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.SupplierPayment"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.SupplierPayment"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/task-types-minimized": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all inactive false only tasktype available",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "tasktype"
          ],
          "summary": "Get all tasktype",
          "parameters": [
            {
              "type": "boolean",
              "description": "State if pagination is required or not",
              "name": "pagination",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page number",
              "name": "page",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page limit",
              "name": "limit",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.TaskType"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/tasks": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all tasks from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "tasks"
          ],
          "summary": "Get all tasks",
          "parameters": [
            {
              "type": "boolean",
              "description": "Filter Tasks by inactive status",
              "name": "inactive",
              "in": "query"
            },
            {
              "type": "boolean",
              "description": "State if pagination is required or not",
              "name": "pagination",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page number",
              "name": "page",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page limit",
              "name": "limit",
              "in": "query"
            },
            {
              "enum": [
                "Pending",
                "Started",
                "Done"
              ],
              "type": "string",
              "description": "Filter tasks by status",
              "name": "status",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.Task"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a tasks type with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "tasks"
          ],
          "summary": "Creates a tasks type",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.TaskCreateView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.Task"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/tasks-multi-edit": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "MultiEdit  tasks available",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "tasks"
          ],
          "summary": "MultiEdit tasks",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.TaskMultiEdit"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/tasks/alter-active": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Archived  tasks available",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "tasks"
          ],
          "summary": "Archived tasks",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AlterActiveView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/tasks/{id}": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches tasks against an id",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "tasks"
          ],
          "summary": "Get tasks by id",
          "parameters": [
            {
              "type": "string",
              "description": "Task ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.Task"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates tasks against an id",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "tasks"
          ],
          "summary": "Update tasks by id",
          "parameters": [
            {
              "type": "string",
              "description": "Task ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.TaskCreateView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/tasktypes": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all tasktype available",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "tasktype"
          ],
          "summary": "Get all tasktype",
          "parameters": [
            {
              "type": "boolean",
              "description": "Filter Tasks by inactive status",
              "name": "inactive",
              "in": "query"
            },
            {
              "type": "boolean",
              "description": "State if pagination is required or not",
              "name": "pagination",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page number",
              "name": "page",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page limit",
              "name": "limit",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.TaskType"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a tasktype with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "tasktype"
          ],
          "summary": "Creates a tasktype",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.TasktypeView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.TaskType"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/tasktypes/alter-active": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "deletes tasktype",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "tasktype"
          ],
          "summary": "Delete tasktype i.e. Toggle inactive",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AlterActiveView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/tasktypes/reorder": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "alter task types",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "tasktype"
          ],
          "summary": "Alter task types i.e. Toggle inactive",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.ReorderView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/tasktypes/{id}": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches tasktype against an id",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "tasktype"
          ],
          "summary": "Get tasktype by id",
          "parameters": [
            {
              "type": "string",
              "description": "Tasktype ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.TaskType"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates tasktype by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "tasktype"
          ],
          "summary": "Update tasktype by id",
          "parameters": [
            {
              "type": "string",
              "description": "Tasktype ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.TasktypeView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.TaskType"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/tds-types": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all tds types available",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "tds_types"
          ],
          "summary": "Get all tds types",
          "parameters": [
            {
              "type": "boolean",
              "description": "Filter tags by inactive status",
              "name": "inactive",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/view.TdsTypeView"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a tds type with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "tds_types"
          ],
          "summary": "Creates a tds type",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.TdsTypeView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/view.TdsTypeView"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/tds-types/alter-active": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "alter active tds type",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "tds_types"
          ],
          "summary": "Alter tds type i.e. Toggle inactive",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AlterActiveView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/tds-types/{id}": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates tds type by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "tds_types"
          ],
          "summary": "Update tds type by id",
          "parameters": [
            {
              "type": "string",
              "description": "Tds Type ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.TdsTypeView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/view.TdsTypeView"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/tigg-pos": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "tigg or pos enabled",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "organization"
          ],
          "summary": "Tigg pos edit",
          "parameters": [
            {
              "description": "tigg and pos status ",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.TiggAndPosView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/top-product-stats": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Get the  status of top product",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "pos_dashboard"
          ],
          "summary": "Top Product status",
          "parameters": [
            {
              "type": "string",
              "name": "dateGte",
              "in": "query"
            },
            {
              "type": "string",
              "name": "dateLte",
              "in": "query"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "csv",
              "name": "locations",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/service.TopProduct"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/transaction-allocations": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Get all transaction allocation by id",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "allocation"
          ],
          "summary": "Get all  transaction allocation",
          "parameters": [
            {
              "type": "string",
              "name": "allocated",
              "in": "query"
            },
            {
              "type": "string",
              "name": "amountEqualTo",
              "in": "query"
            },
            {
              "type": "string",
              "name": "amountGte",
              "in": "query"
            },
            {
              "type": "string",
              "name": "amountLte",
              "in": "query"
            },
            {
              "type": "string",
              "name": "contact",
              "in": "query"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "csv",
              "name": "contactId",
              "in": "query"
            },
            {
              "type": "string",
              "name": "contactType",
              "in": "query"
            },
            {
              "type": "string",
              "name": "dateGte",
              "in": "query"
            },
            {
              "type": "string",
              "name": "dateLte",
              "in": "query"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "csv",
              "name": "ids",
              "in": "query"
            },
            {
              "type": "string",
              "name": "inactive",
              "in": "query"
            },
            {
              "type": "string",
              "name": "isAllocator",
              "in": "query"
            },
            {
              "type": "string",
              "name": "limit",
              "in": "query"
            },
            {
              "type": "boolean",
              "name": "no_pagination",
              "in": "query"
            },
            {
              "type": "string",
              "name": "page",
              "in": "query"
            },
            {
              "type": "string",
              "name": "paginate",
              "in": "query"
            },
            {
              "type": "string",
              "name": "search",
              "in": "query"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "csv",
              "name": "sorts",
              "in": "query"
            },
            {
              "type": "string",
              "name": "sourceId",
              "in": "query"
            },
            {
              "type": "string",
              "name": "status",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.TransactionAllocation"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/transaction-allocations/{id}": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Get the transaction allocation by id",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "allocation"
          ],
          "summary": "Get the detail  transaction allocation",
          "parameters": [
            {
              "type": "string",
              "description": "transaction allocation id",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.TransactionAllocation"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "manually allocate the transaction",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "allocation"
          ],
          "summary": "Allocate the transaction",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.ManualAllocationView"
              }
            },
            {
              "type": "string",
              "description": "transactionallocationid",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/transactions": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Consolidated view of activity across several domain",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "transaction"
          ],
          "summary": "List all All-Transactions",
          "parameters": [
            {
              "type": "string",
              "name": "accountId",
              "in": "query"
            },
            {
              "type": "string",
              "name": "amountEqualTo",
              "in": "query"
            },
            {
              "type": "string",
              "name": "amountGte",
              "in": "query"
            },
            {
              "type": "string",
              "name": "amountLte",
              "in": "query"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "csv",
              "name": "createdBy",
              "in": "query"
            },
            {
              "type": "string",
              "name": "createdDateGte",
              "in": "query"
            },
            {
              "type": "string",
              "name": "createdDateLte",
              "in": "query"
            },
            {
              "type": "string",
              "name": "dateGte",
              "in": "query"
            },
            {
              "type": "string",
              "name": "dateLte",
              "in": "query"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "csv",
              "name": "ids",
              "in": "query"
            },
            {
              "type": "string",
              "name": "inactive",
              "in": "query"
            },
            {
              "type": "string",
              "name": "limit",
              "in": "query"
            },
            {
              "type": "boolean",
              "name": "no_pagination",
              "in": "query"
            },
            {
              "type": "string",
              "name": "page",
              "in": "query"
            },
            {
              "type": "string",
              "name": "paginate",
              "in": "query"
            },
            {
              "type": "string",
              "name": "search",
              "in": "query"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "csv",
              "name": "sorts",
              "in": "query"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "csv",
              "name": "sourceType",
              "in": "query"
            },
            {
              "type": "string",
              "name": "status",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.AllTransaction"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/transactions/approve": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Archived  tasks available",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "transaction"
          ],
          "summary": "Archived tasks",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.TransactionApprovalView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/transactions/{id}/update-status": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Update transaction status",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "transaction"
          ],
          "summary": "Update status",
          "parameters": [
            {
              "type": "string",
              "description": "transaction id",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "Custom status id",
              "name": "request",
              "in": "body",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.Transaction"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/txn-lock-date/{id}": {
        "put": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "Updates organization lock date",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "organization"
          ],
          "summary": "Update organization lock date",
          "parameters": [
            {
              "type": "string",
              "description": "OrganizationID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.OrganizationLockDate"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/upgrade-credentials": {
        "post": {
          "security": [
            {
              "namespace": []
            }
          ],
          "description": "Upgrade credential with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "login"
          ],
          "summary": "Upgrade credential",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.UpgradeCredentialView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.UpgradeCredential"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/users": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all users available",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "users"
          ],
          "summary": "Get all users",
          "parameters": [
            {
              "type": "boolean",
              "description": "Filter users by inactive status",
              "name": "inactive",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.User"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/users/{id}": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches user against an id",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "users"
          ],
          "summary": "Get user by id",
          "parameters": [
            {
              "type": "string",
              "description": "user ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.User"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates user's permissions",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "users"
          ],
          "summary": "Update user's permissions",
          "parameters": [
            {
              "type": "string",
              "description": "User ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.PermissionUpdateView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.User"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/vat-settings": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all general vat setting from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "general_vat_settings"
          ],
          "summary": "Get all general vat setting",
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/view.GeneralVatSettingsView"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates a general vat setting with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "general_vat_settings"
          ],
          "summary": "Updaets a general vat setting value",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.GeneralVatSettingsReqView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/view.GeneralVatSettingsView"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/warehouse-adjustments": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all inventory adjustments available",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "adjustments"
          ],
          "summary": "Get all inventory adjustments",
          "parameters": [
            {
              "type": "boolean",
              "description": "Filter invoice by inactive status",
              "name": "inactive",
              "in": "query"
            },
            {
              "enum": [
                "Void",
                "Approved",
                "Draft"
              ],
              "type": "string",
              "description": "Filter invoice by status",
              "name": "status",
              "in": "query"
            },
            {
              "type": "boolean",
              "description": "State if pagination is required or not",
              "name": "pagination",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page number",
              "name": "page",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page limit",
              "name": "limit",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "allOf": [
                            {
                              "$ref": "#/definitions/domain.Invoice"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "custom_fields": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.CustomFieldData"
                                  }
                                },
                                "items": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.OperationItem"
                                  }
                                },
                                "reporting_tags": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.ReportingTagData"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates an inventory adjustment with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "adjustments"
          ],
          "summary": "Creates an inventory adjustment",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.InventoryAdjustmentView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "allOf": [
                            {
                              "$ref": "#/definitions/domain.InventoryAdjustment"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "custom_fields": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.CustomFieldData"
                                  }
                                },
                                "items": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.InventoryAdjustmentItem"
                                  }
                                },
                                "reporting_tags": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.ReportingTagData"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/warehouse-adjustments/alter-active": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "alter invoice i.e. Toggle inactive",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "invoices"
          ],
          "summary": "Alter invoice by id",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AlterActiveView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/warehouse-adjustments/{id}": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches invoice by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "invoices"
          ],
          "summary": "Get invoice by id",
          "parameters": [
            {
              "type": "string",
              "description": "Invoice ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "allOf": [
                            {
                              "$ref": "#/definitions/domain.Invoice"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "custom_fields": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.CustomFieldData"
                                  }
                                },
                                "items": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.OperationItem"
                                  }
                                },
                                "reporting_tags": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.ReportingTagData"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates invoices by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "invoices"
          ],
          "summary": "Update invoices by id",
          "parameters": [
            {
              "type": "string",
              "description": "Invoice ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.InvoiceView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "allOf": [
                            {
                              "$ref": "#/definitions/domain.Invoice"
                            },
                            {
                              "type": "object",
                              "properties": {
                                "custom_fields": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.CustomFieldData"
                                  }
                                },
                                "items": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.OperationItem"
                                  }
                                },
                                "reporting_tags": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/domain.ReportingTagData"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/warehouse-edit": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "edit warehouse satus and count",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "organization"
          ],
          "summary": "edit warehouse satus and count",
          "parameters": [
            {
              "description": "warehousea edit view",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.WarehouseEditView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/warehouse-transfers": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all warehouse transfer available",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "warehouse-transfer"
          ],
          "summary": "Get all warehouse tranfer",
          "parameters": [
            {
              "type": "string",
              "name": "amountEqualTo",
              "in": "query"
            },
            {
              "type": "string",
              "name": "amountGte",
              "in": "query"
            },
            {
              "type": "string",
              "name": "amountLte",
              "in": "query"
            },
            {
              "type": "string",
              "name": "areaId",
              "in": "query"
            },
            {
              "type": "string",
              "name": "channel",
              "in": "query"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "csv",
              "name": "contacts",
              "in": "query"
            },
            {
              "type": "boolean",
              "name": "darazTxn",
              "in": "query"
            },
            {
              "type": "string",
              "name": "dateGte",
              "in": "query"
            },
            {
              "type": "string",
              "name": "dateLte",
              "in": "query"
            },
            {
              "type": "string",
              "name": "deliveryDateGte",
              "in": "query"
            },
            {
              "type": "string",
              "name": "deliveryDateLte",
              "in": "query"
            },
            {
              "type": "string",
              "name": "deliveryPartnerId",
              "in": "query"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "csv",
              "name": "ids",
              "in": "query"
            },
            {
              "type": "string",
              "name": "inactive",
              "in": "query"
            },
            {
              "type": "string",
              "name": "includeTable",
              "in": "query"
            },
            {
              "type": "string",
              "name": "includeUser",
              "in": "query"
            },
            {
              "type": "string",
              "name": "invoiceStatus",
              "in": "query"
            },
            {
              "type": "boolean",
              "name": "isIrdSync",
              "in": "query"
            },
            {
              "type": "string",
              "name": "items",
              "in": "query"
            },
            {
              "type": "string",
              "name": "limit",
              "in": "query"
            },
            {
              "type": "string",
              "name": "locationId",
              "in": "query"
            },
            {
              "type": "boolean",
              "name": "no_pagination",
              "in": "query"
            },
            {
              "type": "string",
              "name": "orderStatus",
              "in": "query"
            },
            {
              "type": "string",
              "name": "orderType",
              "in": "query"
            },
            {
              "type": "string",
              "name": "page",
              "in": "query"
            },
            {
              "type": "string",
              "name": "paginate",
              "in": "query"
            },
            {
              "type": "boolean",
              "name": "processed",
              "in": "query"
            },
            {
              "type": "string",
              "name": "referred",
              "in": "query"
            },
            {
              "type": "string",
              "name": "search",
              "in": "query"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "csv",
              "name": "sorts",
              "in": "query"
            },
            {
              "type": "string",
              "name": "status",
              "in": "query"
            },
            {
              "type": "string",
              "name": "storeId",
              "in": "query"
            },
            {
              "type": "string",
              "name": "table",
              "in": "query"
            },
            {
              "type": "string",
              "name": "user",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/domain.WarehouseTransfer"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a warehouse transfer with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "warehouse-transfer"
          ],
          "summary": "Creates a warehouse transfer",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.WareHouseTransferView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.WarehouseTransfer"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/warehouse-transfers/alter-active": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "alter warehouse transfer i.e. Toggle inactive",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "warehouse-transfer"
          ],
          "summary": "Alter warehouse transfer by id",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AlterActiveView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/warehouse-transfers/{id}": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches warehouse transfer by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "warehouse-transfer"
          ],
          "summary": "Get warehouse transfer by id",
          "parameters": [
            {
              "type": "string",
              "description": "warehouse tranfer ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.WarehouseTransfer"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates warehouse transfers by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "warehouse-transfer"
          ],
          "summary": "Update warehouse transfers by id",
          "parameters": [
            {
              "type": "string",
              "description": "warehouse transfer ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.WareHouseTransferView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/domain.WarehouseTransfer"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/warehouses": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches all warehouses available",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "warehouse"
          ],
          "summary": "Get all warehouse",
          "parameters": [
            {
              "type": "boolean",
              "description": "Filter warehouses by inactive status",
              "name": "inactive",
              "in": "query"
            },
            {
              "type": "boolean",
              "description": "State if pagination is required or not",
              "name": "pagination",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page number",
              "name": "page",
              "in": "query"
            },
            {
              "type": "integer",
              "description": "Enter Page limit",
              "name": "limit",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/view.WarehouseView"
                        }
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "creates a warehouse with given data",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "warehouse"
          ],
          "summary": "Creates a warehouse",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.WarehouseView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/view.WarehouseView"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/warehouses/alter-active": {
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "alters warehouse status by ids from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "warehouse"
          ],
          "summary": "Alters status of warehouses by list of ids",
          "parameters": [
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.AlterActiveView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      },
      "/warehouses/{id}": {
        "get": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "fetches warehouse against an id",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "warehouse"
          ],
          "summary": "Get warehouse by id",
          "parameters": [
            {
              "type": "string",
              "description": "Warehouse ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/view.WarehouseView"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "post": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "updates warehouse by id from the database",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "warehouse"
          ],
          "summary": "Update warehouse by id",
          "parameters": [
            {
              "type": "string",
              "description": "Warehouse ID",
              "name": "id",
              "in": "path",
              "required": true
            },
            {
              "description": "request body",
              "name": "request",
              "in": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/view.WarehouseView"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/api.Response"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "data": {
                        "$ref": "#/definitions/view.WarehouseView"
                      }
                    }
                  }
                ]
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        },
        "delete": {
          "security": [
            {
              "namespace": []
            },
            {
              "Bearer": []
            }
          ],
          "description": "deletes warehouse against an id",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "tags": [
            "warehouse"
          ],
          "summary": "Delete warehouse by id",
          "parameters": [
            {
              "type": "string",
              "description": "Warehouse ID",
              "name": "id",
              "in": "path",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "400": {
              "description": "Bad Request",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "404": {
              "description": "Not Found",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            },
            "500": {
              "description": "Internal Server Error",
              "schema": {
                "$ref": "#/definitions/api.Response"
              }
            }
          }
        }
      }
    },
    "definitions": {
      "api.Response": {
        "type": "object",
        "properties": {
          "data": {
  
          },
          "error": {
            "type": "boolean"
          },
          "info": {
            "$ref": "#/definitions/domain.Info"
          },
          "message": {
            "type": "string"
          },
          "validation_errors": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "api.ResponseWithPagination": {
        "type": "object",
        "properties": {
          "data": {
  
          },
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "meta_data": {
  
          },
          "validation_errors": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "domain.Account": {
        "type": "object",
        "properties": {
          "account_class": {
            "$ref": "#/definitions/domain.AccountClass"
          },
          "account_class_id": {
            "type": "string"
          },
          "account_group": {
            "$ref": "#/definitions/domain.AccountGroup"
          },
          "account_group_id": {
            "type": "string"
          },
          "account_name": {
            "type": "string"
          },
          "account_number": {
            "type": "string"
          },
          "account_type": {
            "$ref": "#/definitions/types.CashAndBankAccountType"
          },
          "bank": {
            "$ref": "#/definitions/domain.Bank"
          },
          "bank_connected": {
            "type": "string"
          },
          "bank_id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "creator": {
            "description": "TODO: make it created_by",
            "allOf": [
              {
                "$ref": "#/definitions/domain.User"
              }
            ]
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "inactive": {
            "type": "boolean"
          },
          "inactive_at": {
            "type": "string"
          },
          "inactive_by": {
            "$ref": "#/definitions/domain.User"
          },
          "inactive_by_id": {
            "type": "string"
          },
          "last_fetched_at": {
            "type": "integer"
          },
          "manual_blocked": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "name_lower": {
            "type": "string"
          },
          "primary_account_group": {
            "$ref": "#/definitions/domain.AccountGroup"
          },
          "primary_account_group_id": {
            "type": "string"
          },
          "split_job_status": {
            "type": "string"
          },
          "sub_accounts": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/domain.SubAccount"
            }
          },
          "suggested": {
            "type": "boolean"
          },
          "system_generated": {
            "type": "boolean"
          },
          "type": {
            "$ref": "#/definitions/types.AccountType"
          },
          "updated_by": {
            "$ref": "#/definitions/domain.User"
          },
          "updated_by_id": {
            "type": "string"
          }
        }
      },
      "domain.AccountBalanceResponse": {
        "type": "object",
        "properties": {
          "account_class": {
            "$ref": "#/definitions/domain.AccountClass"
          },
          "account_class_id": {
            "type": "string"
          },
          "account_group": {
            "$ref": "#/definitions/domain.AccountGroup"
          },
          "account_group_id": {
            "type": "string"
          },
          "account_name": {
            "type": "string"
          },
          "account_number": {
            "type": "string"
          },
          "account_type": {
            "$ref": "#/definitions/types.CashAndBankAccountType"
          },
          "bank": {
            "$ref": "#/definitions/domain.Bank"
          },
          "bank_connected": {
            "type": "string"
          },
          "bank_id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "creator": {
            "description": "TODO: make it created_by",
            "allOf": [
              {
                "$ref": "#/definitions/domain.User"
              }
            ]
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "inactive": {
            "type": "boolean"
          },
          "inactive_at": {
            "type": "string"
          },
          "inactive_by": {
            "$ref": "#/definitions/domain.User"
          },
          "inactive_by_id": {
            "type": "string"
          },
          "last_fetched_at": {
            "type": "integer"
          },
          "manual_blocked": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "name_lower": {
            "type": "string"
          },
          "opening_balance": {
            "type": "number"
          },
          "opening_balance_type": {
            "$ref": "#/definitions/types.TxnType"
          },
          "primary_account_group": {
            "$ref": "#/definitions/domain.AccountGroup"
          },
          "primary_account_group_id": {
            "type": "string"
          },
          "split_job_status": {
            "type": "string"
          },
          "sub_accounts": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/domain.SubAccount"
            }
          },
          "suggested": {
            "type": "boolean"
          },
          "system_generated": {
            "type": "boolean"
          },
          "type": {
            "$ref": "#/definitions/types.AccountType"
          },
          "updated_by": {
            "$ref": "#/definitions/domain.User"
          },
          "updated_by_id": {
            "type": "string"
          }
        }
      },
      "domain.AccountClass": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "$ref": "#/definitions/types.AccountClass"
          }
        }
      },
      "domain.AccountGroup": {
        "type": "object",
        "properties": {
          "account_class": {
            "$ref": "#/definitions/domain.AccountClass"
          },
          "account_class_id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "creator": {
            "description": "TODO: make it created_by",
            "allOf": [
              {
                "$ref": "#/definitions/domain.User"
              }
            ]
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "inactive": {
            "type": "boolean"
          },
          "inactive_at": {
            "type": "string"
          },
          "inactive_by": {
            "$ref": "#/definitions/domain.User"
          },
          "inactive_by_id": {
            "type": "string"
          },
          "level": {
            "type": "integer"
          },
          "manual_blocked": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "name_lower": {
            "type": "string"
          },
          "parent": {
            "$ref": "#/definitions/domain.AccountGroup"
          },
          "parent_id": {
            "type": "string"
          },
          "primary_group": {
            "$ref": "#/definitions/domain.AccountGroup"
          },
          "primary_group_id": {
            "type": "string"
          },
          "system_generated": {
            "type": "boolean"
          },
          "updated_by": {
            "$ref": "#/definitions/domain.User"
          },
          "updated_by_id": {
            "type": "string"
          }
        }
      },
      "domain.Activity": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "creator": {
            "description": "TODO: make it created_by",
            "allOf": [
              {
                "$ref": "#/definitions/domain.User"
              }
            ]
          },
          "log_message": {
            "type": "string"
          },
          "operation_type": {
            "$ref": "#/definitions/types.AuditActionType"
          },
          "source_content": {
  
          },
          "source_id": {
            "type": "string"
          },
          "source_type": {
            "$ref": "#/definitions/types.Source"
          }
        }
      },
      "domain.AdditionalCost": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number"
          },
          "cost_term": {
            "$ref": "#/definitions/domain.AdditionalCostTerm"
          },
          "cost_term_id": {
            "type": "string"
          },
          "cr_account_id": {
            "type": "string"
          },
          "cr_sub_account_id": {
            "type": "string"
          },
          "credit_account": {
            "$ref": "#/definitions/domain.Account"
          },
          "credit_sub_account": {
            "$ref": "#/definitions/domain.SubAccount"
          },
          "debit_account": {
            "$ref": "#/definitions/domain.Account"
          },
          "debit_sub_account": {
            "$ref": "#/definitions/domain.SubAccount"
          },
          "description": {
            "type": "string"
          },
          "dr_account_id": {
            "type": "string"
          },
          "dr_sub_account_id": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "product": {
            "$ref": "#/definitions/domain.Product"
          },
          "product_id": {
            "type": "string"
          },
          "purchase_bill": {
            "$ref": "#/definitions/domain.PurchaseBill"
          },
          "purchase_bill_id": {
            "type": "string"
          },
          "row_id": {
            "type": "string"
          }
        }
      },
      "domain.AdditionalCostTerm": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "creator": {
            "description": "TODO: make it created_by",
            "allOf": [
              {
                "$ref": "#/definitions/domain.User"
              }
            ]
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "inactive": {
            "type": "boolean"
          },
          "inactive_at": {
            "type": "string"
          },
          "inactive_by": {
            "$ref": "#/definitions/domain.User"
          },
          "inactive_by_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "updated_by": {
            "$ref": "#/definitions/domain.User"
          },
          "updated_by_id": {
            "type": "string"
          }
        }
      },
      "domain.AllTransaction": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/definitions/domain.Account"
          },
          "action_by": {
            "$ref": "#/definitions/domain.User"
          },
          "amount": {
            "type": "number"
          },
          "approved_at": {
            "type": "string"
          },
          "approved_by_id": {
            "type": "string"
          },
          "channel": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "conversion_rate": {
            "type": "number"
          },
          "created_at": {
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "creator": {
            "description": "TODO: make it created_by",
            "allOf": [
              {
                "$ref": "#/definitions/domain.User"
              }
            ]
          },
          "currency": {
            "$ref": "#/definitions/domain.CurrencyCode"
          },
          "currency_code": {
            "type": "string"
          },
          "date": {
            "type": "string"
          },
          "fiscal_year": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/domain.ProductItem"
            }
          },
          "location": {
            "$ref": "#/definitions/domain.Location"
          },
          "location_id": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "npr_amount": {
            "type": "number"
          },
          "reference_no": {
            "type": "string"
          },
          "source": {
            "$ref": "#/definitions/types.TxnSource"
          },
          "status": {
            "$ref": "#/definitions/types.Status"
          },
          "void_at": {
            "type": "string"
          },
          "void_by": {
            "$ref": "#/definitions/domain.User"
          },
          "void_by_id": {
            "type": "string"
          },
          "void_reason": {
            "type": "string"
          }
        }
      },
      "domain.AllocationRecord": {
        "type": "object",
        "properties": {
          "allocated": {
            "$ref": "#/definitions/domain.TransactionAllocation"
          },
          "allocated_id": {
            "type": "string"
          },
          "allocated_source": {
            "$ref": "#/definitions/types.TxnSource"
          },
          "allocated_source_id": {
            "type": "string"
          },
          "allocator": {
            "$ref": "#/definitions/domain.TransactionAllocation"
          },
          "allocator_id": {
            "type": "string"
          },
          "allocator_source": {
            "$ref": "#/definitions/types.TxnSource"
          },
          "allocator_source_id": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "id": {
            "type": "string"
          },
          "status": {
            "$ref": "#/definitions/types.Status"
          }
        }
      },
      "domain.AmountRoundSettingResponse": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/definitions/domain.Account"
          },
          "account_id": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "location": {
            "$ref": "#/definitions/domain.Location"
          },
          "location_id": {
            "type": "string"
          },
          "round_amount": {
            "type": "boolean"
          }
        }
      },
      "domain.Area": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer"
          },
          "created_at": {
            "type": "string"
          },
          "created_by": {
            "$ref": "#/definitions/domain.User"
          },
          "height": {
            "type": "number"
          },
          "id": {
            "type": "string"
          },
          "inactive": {
            "type": "boolean"
          },
          "inactive_at": {
            "type": "string"
          },
          "inactive_by": {
            "$ref": "#/definitions/domain.User"
          },
          "inactive_by_id": {
            "type": "string"
          },
          "modified_by": {
            "$ref": "#/definitions/domain.User"
          },
          "name": {
            "type": "string"
          },
          "width": {
            "type": "number"
          }
        }
      },
      "domain.Attachment": {
        "type": "object",
        "properties": {
          "attachment_group": {
            "$ref": "#/definitions/domain.AttachmentGroup"
          },
          "attachment_group_id": {
            "type": "string"
          },
          "file_size": {
            "type": "integer"
          },
          "file_type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "ocr_response": {
            "type": "object"
          },
          "preview_link": {
            "type": "string"
          },
          "scan_status": {
            "type": "string"
          },
          "thumbnail_link": {
            "type": "string"
          },
          "view_link": {
            "type": "string"
          }
        }
      },
      "domain.AttachmentGroup": {
        "type": "object",
        "properties": {
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/domain.Attachment"
            }
          },
          "created_at": {
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "creator": {
            "description": "TODO: make it created_by",
            "allOf": [
              {
                "$ref": "#/definitions/domain.User"
              }
            ]
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "inactive": {
            "type": "boolean"
          },
          "inactive_at": {
            "type": "string"
          },
          "inactive_by": {
            "$ref": "#/definitions/domain.User"
          },
          "inactive_by_id": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "sources": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/domain.AttachmentSource"
            }
          },
          "status": {
            "type": "string"
          }
        }
      },
      "domain.AttachmentSource": {
        "type": "object",
        "properties": {
          "source": {
  
          },
          "type": {
            "type": "string"
          }
        }
      },
      "domain.Bank": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "creator": {
            "description": "TODO: make it created_by",
            "allOf": [
              {
                "$ref": "#/definitions/domain.User"
              }
            ]
          },
          "id": {
            "type": "string"
          },
          "inactive": {
            "type": "boolean"
          },
          "inactive_at": {
            "type": "string"
          },
          "inactive_by": {
            "$ref": "#/definitions/domain.User"
          },
          "inactive_by_id": {
            "type": "string"
          },
          "logo": {
            "type": "string"
          },
          "logo_url": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "name_lower": {
            "type": "string"
          },
          "updated_by": {
            "$ref": "#/definitions/domain.User"
          },
          "updated_by_id": {
            "type": "string"
          }
        }
      },
      "domain.BankConnected": {
        "type": "string",
        "enum": [
          "connected",
          "not_connected",
          "pending"
        ],
        "x-enum-varnames": [
          "Connected",
          "NotConnected",
          "Pending"
        ]
      },
      "domain.BankReconciliationAmount": {
        "type": "object",
        "properties": {
          "bank_total": {
            "type": "number"
          },
          "bank_total_unreconciled": {
            "type": "number"
          },
          "book_total": {
            "type": "number"
          },
          "book_total_unreconciled": {
            "type": "number"
          },
          "count_bank_unreconciled": {
            "type": "number"
          },
          "count_book_unreconciled": {
            "type": "number"
          }
        }
      },
      "domain.BankStatement": {
        "type": "object",
        "properties": {
          "account_id": {
            "type": "string"
          },
          "batch_code": {
            "type": "string"
          },
          "cr_amount": {
            "type": "number"
          },
          "created_at": {
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "creator": {
            "description": "TODO: make it created_by",
            "allOf": [
              {
                "$ref": "#/definitions/domain.User"
              }
            ]
          },
          "date": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "description1": {
            "type": "string"
          },
          "description2": {
            "type": "string"
          },
          "description3": {
            "type": "string"
          },
          "dr_amount": {
            "type": "number"
          },
          "id": {
            "type": "string"
          },
          "inactive": {
            "type": "boolean"
          },
          "inactive_at": {
            "type": "string"
          },
          "inactive_by": {
            "$ref": "#/definitions/domain.User"
          },
          "inactive_by_id": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "reconciled_at": {
            "type": "integer"
          },
          "reconciliation_id": {
            "type": "string"
          },
          "transaction_id": {
            "type": "string"
          },
          "updated_by": {
            "$ref": "#/definitions/domain.User"
          },
          "updated_by_id": {
            "type": "string"
          }
        }
      },
      "domain.Barcode": {
        "type": "object",
        "properties": {
          "barcode": {
            "type": "string"
          },
          "conversion_rate": {
            "type": "number"
          },
          "id": {
            "type": "string"
          },
          "inactive": {
            "type": "boolean"
          },
          "inactive_at": {
            "type": "string"
          },
          "inactive_by": {
            "$ref": "#/definitions/domain.User"
          },
          "inactive_by_id": {
            "type": "string"
          },
          "measurement_unit": {
            "$ref": "#/definitions/domain.MeasurementUnit"
          },
          "measurement_unit_id": {
            "type": "string"
          },
          "product": {
            "$ref": "#/definitions/domain.Product"
          },
          "product_id": {
            "type": "string"
          },
          "purchase_price": {
            "type": "number"
          },
          "selling_price": {
            "type": "number"
          }
        }
      },
      "domain.BarcodeQty": {
        "type": "object",
        "properties": {
          "barcode_id": {
            "type": "string"
          },
          "quantity": {
            "type": "integer"
          }
        }
      },
      "domain.CashItem": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/definitions/domain.Account"
          },
          "account_id": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "description": {
            "type": "string"
          },
          "sub_account": {
            "$ref": "#/definitions/domain.SubAccount"
          },
          "sub_account_id": {
            "type": "string"
          }
        }
      },
      "domain.CashTransfer": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/definitions/domain.Account"
          },
          "account_id": {
            "type": "string"
          },
          "action_by": {
            "$ref": "#/definitions/domain.User"
          },
          "approved_at": {
            "type": "string"
          },
          "approved_by_id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "conversion_rate": {
            "type": "number"
          },
          "created_at": {
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "creator": {
            "description": "TODO: make it created_by",
            "allOf": [
              {
                "$ref": "#/definitions/domain.User"
              }
            ]
          },
          "currency": {
            "$ref": "#/definitions/domain.CurrencyCode"
          },
          "currency_code": {
            "type": "string"
          },
          "custom_fields": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/domain.TransactionCustomField"
            }
          },
          "date": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "items": {
            "type": "object"
          },
          "location": {
            "$ref": "#/definitions/domain.Location"
          },
          "location_id": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "reference_no": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/domain.TransactionReportingTag"
            }
          },
          "status": {
            "$ref": "#/definitions/types.Status"
          },
          "sub_account_id": {
            "type": "string"
          },
          "total_amount": {
            "type": "number"
          },
          "updated_by": {
            "$ref": "#/definitions/domain.User"
          },
          "updated_by_id": {
            "type": "string"
          },
          "void_at": {
            "type": "string"
          },
          "void_by": {
            "$ref": "#/definitions/domain.User"
          },
          "void_by_id": {
            "type": "string"
          },
          "void_reason": {
            "type": "string"
          }
        }
      },
      "domain.Cheque": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/definitions/domain.Account"
          },
          "account_id": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/domain.AttachmentGroup"
            }
          },
          "bank": {
            "$ref": "#/definitions/domain.Bank"
          },
          "bank_account": {
            "$ref": "#/definitions/domain.Account"
          },
          "bank_account_id": {
            "description": "for issued cheques only",
            "type": "string"
          },
          "bank_id": {
            "description": "for received cheques only",
            "type": "string"
          },
          "cheque_date": {
            "type": "string"
          },
          "cheque_number": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "creator": {
            "description": "TODO: make it created_by",
            "allOf": [
              {
                "$ref": "#/definitions/domain.User"
              }
            ]
          },
          "id": {
            "type": "string"
          },
          "inactive": {
            "type": "boolean"
          },
          "inactive_at": {
            "type": "string"
          },
          "inactive_by": {
            "$ref": "#/definitions/domain.User"
          },
          "inactive_by_id": {
            "type": "string"
          },
          "is_processed": {
            "type": "boolean"
          },
          "issued_date": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "payee_name": {
            "type": "string"
          },
          "referred": {
            "$ref": "#/definitions/domain.AllTransaction"
          },
          "referred_id": {
            "type": "string"
          },
          "referred_source": {
            "type": "string"
          },
          "status": {
            "$ref": "#/definitions/domain.CustomStatus"
          },
          "status_id": {
            "type": "string"
          },
          "txn_type": {
            "description": "Either cheque received or issued",
            "allOf": [
              {
                "$ref": "#/definitions/types.ChequeTransactionType"
              }
            ]
          },
          "updated_by": {
            "$ref": "#/definitions/domain.User"
          },
          "updated_by_id": {
            "type": "string"
          },
          "void_at": {
            "type": "string"
          },
          "void_by": {
            "$ref": "#/definitions/domain.User"
          },
          "void_by_id": {
            "type": "string"
          }
        }
      },
      "domain.Contact": {
        "type": "object",
        "properties": {
          "accept_buy_sell": {
            "type": "boolean"
          },
          "address": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "contact_group": {
            "$ref": "#/definitions/domain.ContactGroup"
          },
          "contact_group_id": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "created_by": {
            "$ref": "#/definitions/domain.User"
          },
          "credit_limit": {
            "type": "number"
          },
          "credit_term": {
            "$ref": "#/definitions/domain.CreditTerm"
          },
          "credit_term_id": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "inactive": {
            "type": "boolean"
          },
          "inactive_at": {
            "type": "string"
          },
          "inactive_by": {
            "$ref": "#/definitions/domain.User"
          },
          "inactive_by_id": {
            "type": "string"
          },
          "modified_by": {
            "$ref": "#/definitions/domain.User"
          },
          "name": {
            "type": "string"
          },
          "name_lower": {
            "type": "string"
          },
          "organization": {
            "$ref": "#/definitions/domain.Contact"
          },
          "organization_id": {
            "type": "string"
          },
          "organization_title": {
            "type": "string"
          },
          "pan_no": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          },
          "type": {
            "$ref": "#/definitions/types.ContactType"
          }
        }
      },
      "domain.ContactBalanceResponse": {
        "type": "object",
        "properties": {
          "accept_buy_sell": {
            "type": "boolean"
          },
          "address": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "contact_group": {
            "$ref": "#/definitions/domain.ContactGroup"
          },
          "contact_group_id": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "created_by": {
            "$ref": "#/definitions/domain.User"
          },
          "credit_limit": {
            "type": "number"
          },
          "credit_term": {
            "$ref": "#/definitions/domain.CreditTerm"
          },
          "credit_term_id": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "inactive": {
            "type": "boolean"
          },
          "inactive_at": {
            "type": "string"
          },
          "inactive_by": {
            "$ref": "#/definitions/domain.User"
          },
          "inactive_by_id": {
            "type": "string"
          },
          "modified_by": {
            "$ref": "#/definitions/domain.User"
          },
          "name": {
            "type": "string"
          },
          "name_lower": {
            "type": "string"
          },
          "opening_balance": {
            "type": "number"
          },
          "opening_balance_type": {
            "$ref": "#/definitions/types.TxnType"
          },
          "organization": {
            "$ref": "#/definitions/domain.Contact"
          },
          "organization_id": {
            "type": "string"
          },
          "organization_title": {
            "type": "string"
          },
          "pan_no": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          },
          "type": {
            "$ref": "#/definitions/types.ContactType"
          }
        }
      },
      "domain.ContactGroup": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string"
          },
          "created_by": {
            "$ref": "#/definitions/domain.User"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "inactive": {
            "type": "boolean"
          },
          "inactive_at": {
            "type": "string"
          },
          "inactive_by": {
            "$ref": "#/definitions/domain.User"
          },
          "inactive_by_id": {
            "type": "string"
          },
          "modified_by": {
            "$ref": "#/definitions/domain.User"
          },
          "name": {
            "type": "string"
          },
          "name_lower": {
            "type": "string"
          },
          "parent": {
            "$ref": "#/definitions/domain.ContactGroup"
          },
          "parent_id": {
            "type": "string"
          }
        }
      },
      "domain.CreditNote": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "action_by": {
            "$ref": "#/definitions/domain.User"
          },
          "additional_discount": {
            "type": "number"
          },
          "approved_at": {
            "type": "string"
          },
          "approved_by_id": {
            "type": "string"
          },
          "change_amount": {
            "type": "number"
          },
          "channel": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "contact": {
            "$ref": "#/definitions/domain.Contact"
          },
          "contact_id": {
            "type": "string"
          },
          "conversion_rate": {
            "type": "number"
          },
          "created_at": {
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "creator": {
            "description": "TODO: make it created_by",
            "allOf": [
              {
                "$ref": "#/definitions/domain.User"
              }
            ]
          },
          "currency": {
            "$ref": "#/definitions/domain.CurrencyCode"
          },
          "currency_code": {
            "type": "string"
          },
          "custom_fields": {
            "type": "object"
          },
          "date": {
            "type": "string"
          },
          "discount": {
            "type": "number"
          },
          "discount_amount": {
            "type": "number"
          },
          "discount_type": {
            "$ref": "#/definitions/types.DiscountType"
          },
          "first_print_time": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "items": {
            "type": "object"
          },
          "location": {
            "$ref": "#/definitions/domain.Location"
          },
          "location_id": {
            "type": "string"
          },
          "non_taxable_total": {
            "type": "number"
          },
          "note": {
            "type": "string"
          },
          "payments": {
            "type": "object"
          },
          "print_count": {
            "type": "integer"
          },
          "print_id": {
            "type": "string"
          },
          "printed_by": {
            "$ref": "#/definitions/domain.User"
          },
          "reference_no": {
            "type": "string"
          },
          "referrer": {
            "$ref": "#/definitions/domain.AllTransaction"
          },
          "referrer_id": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "object"
          },
          "rounded_amount": {
            "type": "number"
          },
          "sales_person": {
            "type": "string"
          },
          "service_charge_amount": {
            "type": "number"
          },
          "session": {
            "$ref": "#/definitions/domain.Session"
          },
          "session_id": {
            "type": "string"
          },
          "status": {
            "$ref": "#/definitions/types.Status"
          },
          "sub_total": {
            "type": "number"
          },
          "taxable_total": {
            "type": "number"
          },
          "terms_and_conditions": {
            "type": "string"
          },
          "total_amount": {
            "type": "number"
          },
          "updated_by": {
            "$ref": "#/definitions/domain.User"
          },
          "updated_by_id": {
            "type": "string"
          },
          "vat_amount": {
            "type": "number"
          },
          "void_at": {
            "type": "string"
          },
          "void_by": {
            "$ref": "#/definitions/domain.User"
          },
          "void_by_id": {
            "type": "string"
          },
          "void_reason": {
            "type": "string"
          }
        }
      },
      "domain.CreditTerm": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "creator": {
            "description": "TODO: make it created_by",
            "allOf": [
              {
                "$ref": "#/definitions/domain.User"
              }
            ]
          },
          "days": {
            "type": "integer"
          },
          "id": {
            "type": "string"
          },
          "inactive": {
            "type": "boolean"
          },
          "inactive_at": {
            "type": "string"
          },
          "inactive_by": {
            "$ref": "#/definitions/domain.User"
          },
          "inactive_by_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "updated_by": {
            "$ref": "#/definitions/domain.User"
          },
          "updated_by_id": {
            "type": "string"
          }
        }
      },
      "domain.CurrencyCode": {
        "type": "object",
        "properties": {
          "code_slug": {
            "type": "string"
          },
          "inactive": {
            "type": "boolean"
          },
          "inactive_at": {
            "type": "string"
          },
          "inactive_by": {
            "$ref": "#/definitions/domain.User"
          },
          "inactive_by_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "symbol": {
            "type": "string"
          }
        }
      },
      "domain.CustomField": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "creator": {
            "description": "TODO: make it created_by",
            "allOf": [
              {
                "$ref": "#/definitions/domain.User"
              }
            ]
          },
          "id": {
            "type": "string"
          },
          "inactive": {
            "type": "boolean"
          },
          "inactive_at": {
            "type": "string"
          },
          "inactive_by": {
            "$ref": "#/definitions/domain.User"
          },
          "inactive_by_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "options": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "order": {
            "type": "integer"
          },
          "source": {
            "type": "string"
          },
          "type": {
            "$ref": "#/definitions/types.FieldType"
          },
          "updated_by": {
            "$ref": "#/definitions/domain.User"
          },
          "updated_by_id": {
            "type": "string"
          }
        }
      },
      "domain.CustomFieldData": {
        "type": "object",
        "properties": {
          "custom_field": {
            "$ref": "#/definitions/domain.CustomField"
          },
          "custom_field_id": {
            "type": "string"
          },
          "value": {
  
          }
        }
      },
      "domain.CustomStatus": {
        "type": "object",
        "properties": {
          "color_code": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "creator": {
            "description": "TODO: make it created_by",
            "allOf": [
              {
                "$ref": "#/definitions/domain.User"
              }
            ]
          },
          "id": {
            "type": "string"
          },
          "inactive": {
            "type": "boolean"
          },
          "inactive_at": {
            "type": "string"
          },
          "inactive_by": {
            "$ref": "#/definitions/domain.User"
          },
          "inactive_by_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "name_lower": {
            "type": "string"
          },
          "order_number": {
            "type": "integer"
          },
          "status_for": {
            "$ref": "#/definitions/types.Source"
          },
          "updated_by": {
            "$ref": "#/definitions/domain.User"
          },
          "updated_by_id": {
            "type": "string"
          }
        }
      },
      "domain.DealCampaign": {
        "type": "object",
        "properties": {
          "color_code": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "creator": {
            "description": "TODO: make it created_by",
            "allOf": [
              {
                "$ref": "#/definitions/domain.User"
              }
            ]
          },
          "id": {
            "type": "string"
          },
          "inactive": {
            "type": "boolean"
          },
          "inactive_at": {
            "type": "string"
          },
          "inactive_by": {
            "$ref": "#/definitions/domain.User"
          },
          "inactive_by_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "name_lower": {
            "type": "string"
          },
          "order_number": {
            "type": "integer"
          },
          "updated_by": {
            "$ref": "#/definitions/domain.User"
          },
          "updated_by_id": {
            "type": "string"
          }
        }
      },
      "domain.DealStage": {
        "type": "object",
        "properties": {
          "color_code": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "creator": {
            "description": "TODO: make it created_by",
            "allOf": [
              {
                "$ref": "#/definitions/domain.User"
              }
            ]
          },
          "id": {
            "type": "string"
          },
          "inactive": {
            "type": "boolean"
          },
          "inactive_at": {
            "type": "string"
          },
          "inactive_by": {
            "$ref": "#/definitions/domain.User"
          },
          "inactive_by_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "name_lower": {
            "type": "string"
          },
          "order_number": {
            "type": "integer"
          },
          "updated_by": {
            "$ref": "#/definitions/domain.User"
          },
          "updated_by_id": {
            "type": "string"
          }
        }
      },
      "domain.DebitNote": {
        "type": "object",
        "properties": {
          "action_by": {
            "$ref": "#/definitions/domain.User"
          },
          "approved_at": {
            "type": "string"
          },
          "approved_by_id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "contact": {
            "$ref": "#/definitions/domain.Contact"
          },
          "contact_id": {
            "description": "TODO: make it supplier_id",
            "type": "string"
          },
          "conversion_rate": {
            "type": "number"
          },
          "created_at": {
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "creator": {
            "description": "TODO: make it created_by",
            "allOf": [
              {
                "$ref": "#/definitions/domain.User"
              }
            ]
          },
          "currency": {
            "$ref": "#/definitions/domain.CurrencyCode"
          },
          "currency_code": {
            "type": "string"
          },
          "custom_fields": {
            "type": "object"
          },
          "date": {
            "type": "string"
          },
          "discount": {
            "type": "number"
          },
          "discount_amount": {
            "type": "number"
          },
          "discount_type": {
            "$ref": "#/definitions/types.DiscountType"
          },
          "id": {
            "type": "string"
          },
          "items": {
            "type": "object"
          },
          "location": {
            "$ref": "#/definitions/domain.Location"
          },
          "location_id": {
            "type": "string"
          },
          "non_taxable_total": {
            "type": "number"
          },
          "note": {
            "type": "string"
          },
          "reference_no": {
            "type": "string"
          },
          "referrer": {
            "$ref": "#/definitions/domain.AllTransaction"
          },
          "referrer_id": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "object"
          },
          "service_charge_amount": {
            "type": "number"
          },
          "status": {
            "$ref": "#/definitions/types.Status"
          },
          "sub_total": {
            "type": "number"
          },
          "taxable_total": {
            "type": "number"
          },
          "total_amount": {
            "type": "number"
          },
          "updated_by": {
            "$ref": "#/definitions/domain.User"
          },
          "updated_by_id": {
            "type": "string"
          },
          "vat_amount": {
            "type": "number"
          },
          "void_at": {
            "type": "string"
          },
          "void_by": {
            "$ref": "#/definitions/domain.User"
          },
          "void_by_id": {
            "type": "string"
          },
          "void_reason": {
            "type": "string"
          }
        }
      },
      "domain.DeliveryPartner": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/definitions/domain.Account"
          },
          "account_id": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "created_by": {
            "$ref": "#/definitions/domain.User"
          },
          "id": {
            "type": "string"
          },
          "inactive": {
            "type": "boolean"
          },
          "inactive_at": {
            "type": "string"
          },
          "inactive_by": {
            "$ref": "#/definitions/domain.User"
          },
          "inactive_by_id": {
            "type": "string"
          },
          "logo": {
            "type": "string"
          },
          "modified_by": {
            "$ref": "#/definitions/domain.User"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "domain.Expense": {
        "type": "object",
        "properties": {
          "action_by": {
            "$ref": "#/definitions/domain.User"
          },
          "approved_at": {
            "type": "string"
          },
          "approved_by_id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "contact": {
            "$ref": "#/definitions/domain.Contact"
          },
          "contact_id": {
            "type": "string"
          },
          "conversion_rate": {
            "type": "number"
          },
          "created_at": {
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "creator": {
            "description": "TODO: make it created_by",
            "allOf": [
              {
                "$ref": "#/definitions/domain.User"
              }
            ]
          },
          "currency": {
            "$ref": "#/definitions/domain.CurrencyCode"
          },
          "currency_code": {
            "type": "string"
          },
          "custom_fields": {
            "type": "object"
          },
          "date": {
            "type": "string"
          },
          "discount_amount": {
            "type": "number"
          },
          "due_date": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/domain.ExpenseItem"
            }
          },
          "location_id": {
            "type": "string"
          },
          "non_taxable_total": {
            "type": "number"
          },
          "note": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "object"
          },
          "service_charge_amount": {
            "type": "number"
          },
          "status": {
            "$ref": "#/definitions/types.Status"
          },
          "sub_total": {
            "type": "number"
          },
          "supplier_invoice_reference_no": {
            "type": "string"
          },
          "taxable_total": {
            "type": "number"
          },
          "tds_account": {
            "$ref": "#/definitions/domain.Account"
          },
          "tds_account_id": {
            "type": "string"
          },
          "tds_amount": {
            "type": "number"
          },
          "tds_sub_account": {
            "$ref": "#/definitions/domain.SubAccount"
          },
          "tds_sub_account_id": {
            "type": "string"
          },
          "tds_type": {
            "$ref": "#/definitions/domain.TdsType"
          },
          "tds_type_id": {
            "type": "string"
          },
          "terms_and_conditions": {
            "type": "string"
          },
          "total_amount": {
            "type": "number"
          },
          "updated_by": {
            "$ref": "#/definitions/domain.User"
          },
          "updated_by_id": {
            "type": "string"
          },
          "vat_amount": {
            "type": "number"
          },
          "void_at": {
            "type": "string"
          },
          "void_by": {
            "$ref": "#/definitions/domain.User"
          },
          "void_by_id": {
            "type": "string"
          },
          "void_reason": {
            "type": "string"
          }
        }
      },
      "domain.ExpenseItem": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/definitions/domain.Account"
          },
          "account_id": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "description": {
            "type": "string"
          },
          "expense": {
            "$ref": "#/definitions/domain.Expense"
          },
          "id": {
            "type": "string"
          },
          "sub_account": {
            "$ref": "#/definitions/domain.SubAccount"
          },
          "sub_account_id": {
            "type": "string"
          },
          "vat_type": {
            "$ref": "#/definitions/types.TaxType"
          }
        }
      },
      "domain.ExtraInfo": {
        "type": "object",
        "properties": {
          "line_no": {
            "type": "string"
          }
        }
      },
      "domain.GlobalSearch": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object"
          },
          "entity": {
            "$ref": "#/definitions/types.SearchEntity"
          },
          "source_id": {
            "type": "string"
          }
        }
      },
      "domain.ImportAccountObject": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/definitions/domain.Account"
          },
          "extra": {
            "$ref": "#/definitions/domain.ExtraInfo"
          },
          "opening_balance": {
            "type": "number"
          },
          "opening_balance_type": {
            "$ref": "#/definitions/types.TxnType"
          }
        }
      },
      "domain.ImportAccountResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/domain.ImportError"
            }
          },
          "statements": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/domain.ImportAccountObject"
            }
          }
        }
      },
      "domain.ImportContactObject": {
        "type": "object",
        "properties": {
          "contact": {
            "$ref": "#/definitions/domain.Contact"
          },
          "extra": {
            "$ref": "#/definitions/domain.ExtraInfo"
          },
          "opening_balance": {
            "type": "number"
          },
          "opening_balance_type": {
            "type": "string"
          }
        }
      },
      "domain.ImportError": {
        "type": "object",
        "properties": {
          "Field": {
            "type": "string"
          },
          "Header": {
            "type": "string"
          },
          "LineNo": {
            "type": "string"
          },
          "Message": {
            "type": "string"
          }
        }
      },
      "domain.ImportProductObject": {
        "type": "object",
        "properties": {
          "extra": {
            "$ref": "#/definitions/domain.ExtraInfo"
          },
          "opening_quantity": {
            "type": "number"
          },
          "opening_rate": {
            "type": "number"
          },
          "product": {
            "$ref": "#/definitions/domain.Product"
          },
          "tax_applicable": {
            "type": "string"
          }
        }
      },
      "domain.ImportProductResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/domain.ImportError"
            }
          },
          "statements": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/domain.ImportProductObject"
            }
          }
        }
      },
      "domain.ImportResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/domain.ImportError"
            }
          },
          "statements": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/domain.ImportContactObject"
            }
          }
        }
      },
      "domain.Info": {
        "type": "object",
        "properties": {
          "object": {
            "type": "object",
            "additionalProperties": true
          },
          "overrides": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "type": {
            "type": "string"
          },
          "value": {
            "type": "number"
          },
          "warn_only": {
            "type": "boolean"
          }
        }
      },
      "domain.InventoryAdjustment": {
        "type": "object",
        "properties": {
          "action_by": {
            "$ref": "#/definitions/domain.User"
          },
          "approved_at": {
            "type": "string"
          },
          "approved_by_id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "conversion_rate": {
            "type": "number"
          },
          "created_at": {
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "creator": {
            "description": "TODO: make it created_by",
            "allOf": [
              {
                "$ref": "#/definitions/domain.User"
              }
            ]
          },
          "currency": {
            "$ref": "#/definitions/domain.CurrencyCode"
          },
          "currency_code": {
            "type": "string"
          },
          "custom_fields": {
            "type": "object"
          },
          "date": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "items": {
            "type": "object"
          },
          "location": {
            "$ref": "#/definitions/domain.Location"
          },
          "location_id": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "reference_no": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "object"
          },
          "status": {
            "$ref": "#/definitions/types.Status"
          },
          "total_amount": {
            "type": "number"
          },
          "updated_by": {
            "$ref": "#/definitions/domain.User"
          },
          "updated_by_id": {
            "type": "string"
          },
          "void_at": {
            "type": "string"
          },
          "void_by": {
            "$ref": "#/definitions/domain.User"
          },
          "void_by_id": {
            "type": "string"
          },
          "void_reason": {
            "type": "string"
          }
        }
      },
      "domain.InventoryAdjustmentItem": {
        "type": "object",
        "required": [
          "product_id"
        ],
        "properties": {
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "inventory_adjustment": {
            "$ref": "#/definitions/domain.InventoryAdjustment"
          },
          "measurement_unit": {
            "$ref": "#/definitions/domain.MeasurementUnit"
          },
          "measurement_unit_id": {
            "type": "string"
          },
          "operation": {
            "type": "string"
          },
          "product": {
            "$ref": "#/definitions/domain.Product"
          },
          "product_id": {
            "type": "string"
          },
          "quantity": {
            "type": "number"
          },
          "rate": {
            "type": "number"
          },
          "warehouse": {
            "$ref": "#/definitions/domain.Warehouse"
          },
          "warehouse_id": {
            "type": "string"
          }
        }
      },
      "domain.Invoice": {
        "type": "object",
        "properties": {
          "abbreviatedBill": {
            "type": "boolean"
          },
          "action_by": {
            "$ref": "#/definitions/domain.User"
          },
          "amount_in_words": {
            "type": "string"
          },
          "approved_at": {
            "type": "string"
          },
          "approved_by_id": {
            "type": "string"
          },
          "area": {
            "$ref": "#/definitions/domain.Area"
          },
          "area_id": {
            "type": "string"
          },
          "change_amount": {
            "type": "number"
          },
          "channel": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "contact": {
            "$ref": "#/definitions/domain.Contact"
          },
          "contact_id": {
            "type": "string"
          },
          "conversion_rate": {
            "type": "number"
          },
          "created_at": {
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "creator": {
            "description": "TODO: make it created_by",
            "allOf": [
              {
                "$ref": "#/definitions/domain.User"
              }
            ]
          },
          "currency": {
            "$ref": "#/definitions/domain.CurrencyCode"
          },
          "currency_code": {
            "type": "string"
          },
          "custom_fields": {
            "type": "object"
          },
          "date": {
            "type": "string"
          },
          "delivery_partner": {
            "$ref": "#/definitions/domain.DeliveryPartner"
          },
          "delivery_partner_id": {
            "type": "string"
          },
          "discount": {
            "type": "number"
          },
          "discount_amount": {
            "type": "number"
          },
          "discount_type": {
            "$ref": "#/definitions/types.DiscountType"
          },
          "due_date": {
            "type": "string"
          },
          "first_print_time": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "is_import_export": {
            "type": "boolean"
          },
          "items": {
            "type": "object"
          },
          "location": {
            "$ref": "#/definitions/domain.Location"
          },
          "location_id": {
            "type": "string"
          },
          "non_taxable_total": {
            "type": "number"
          },
          "note": {
            "type": "string"
          },
          "order_type": {
            "$ref": "#/definitions/types.OrderType"
          },
          "payment_account": {
            "$ref": "#/definitions/domain.Account"
          },
          "payment_account_id": {
            "type": "string"
          },
          "payment_amount": {
            "type": "number"
          },
          "payment_mode": {
            "$ref": "#/definitions/domain.PaymentMode"
          },
          "payment_mode_id": {
            "type": "string"
          },
          "payment_modes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "payment_reference_no": {
            "type": "string"
          },
          "payments": {
            "type": "object"
          },
          "print_count": {
            "type": "integer"
          },
          "print_id": {
            "type": "string"
          },
          "printed_by": {
            "$ref": "#/definitions/domain.User"
          },
          "reference_no": {
            "type": "string"
          },
          "referred": {
            "$ref": "#/definitions/domain.AllTransaction"
          },
          "referred_id": {
            "type": "string"
          },
          "referrer": {
            "$ref": "#/definitions/domain.AllTransaction"
          },
          "referrer_id": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "object"
          },
          "rounded_amount": {
            "type": "number"
          },
          "service_charge": {
            "type": "number"
          },
          "service_charge_amount": {
            "type": "number"
          },
          "session": {
            "$ref": "#/definitions/domain.Session"
          },
          "session_id": {
            "type": "string"
          },
          "status": {
            "$ref": "#/definitions/types.Status"
          },
          "sub_total": {
            "type": "number"
          },
          "table": {
            "$ref": "#/definitions/domain.Table"
          },
          "table_id": {
            "type": "string"
          },
          "taxable_total": {
            "type": "number"
          },
          "tds_account": {
            "$ref": "#/definitions/domain.Account"
          },
          "tds_account_id": {
            "type": "string"
          },
          "tds_amount": {
            "type": "number"
          },
          "tds_sub_account": {
            "$ref": "#/definitions/domain.SubAccount"
          },
          "tds_sub_account_id": {
            "type": "string"
          },
          "tds_type": {
            "$ref": "#/definitions/domain.TdsType"
          },
          "tds_type_id": {
            "type": "string"
          },
          "terms_and_conditions": {
            "type": "string"
          },
          "total_amount": {
            "type": "number"
          },
          "trade_country": {
            "type": "string"
          },
          "trade_date": {
            "type": "string"
          },
          "trade_doc_no": {
            "type": "string"
          },
          "updated_by": {
            "$ref": "#/definitions/domain.User"
          },
          "updated_by_id": {
            "type": "string"
          },
          "vat_amount": {
            "type": "number"
          },
          "void_at": {
            "type": "string"
          },
          "void_by": {
            "$ref": "#/definitions/domain.User"
          },
          "void_by_id": {
            "type": "string"
          },
          "void_reason": {
            "type": "string"
          }
        }
      },
      "domain.IrdCredentials": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "domain.IrdReSyncReq": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "source": {
            "type": "string"
          }
        }
      },
      "domain.IsoCurrency": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "default": {
            "type": "boolean"
          },
          "inactive": {
            "type": "boolean"
          },
          "inactive_at": {
            "type": "string"
          },
          "inactive_by": {
            "$ref": "#/definitions/domain.User"
          },
          "inactive_by_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "symbol": {
            "type": "string"
          }
        }
      },
      "domain.JournalVoucher": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/definitions/domain.Account"
          },
          "action_by": {
            "$ref": "#/definitions/domain.User"
          },
          "approved_at": {
            "type": "string"
          },
          "approved_by_id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "conversion_rate": {
            "type": "number"
          },
          "created_at": {
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "creator": {
            "description": "TODO: make it created_by",
            "allOf": [
              {
                "$ref": "#/definitions/domain.User"
              }
            ]
          },
          "currency": {
            "$ref": "#/definitions/domain.CurrencyCode"
          },
          "currency_code": {
            "type": "string"
          },
          "custom_fields": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/domain.TransactionCustomField"
            }
          },
          "date": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "items": {
            "type": "object"
          },
          "location": {
            "$ref": "#/definitions/domain.Location"
          },
          "location_id": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "reference_no": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/domain.TransactionReportingTag"
            }
          },
          "status": {
            "$ref": "#/definitions/types.Status"
          },
          "total_amount": {
            "type": "number"
          },
          "updated_by": {
            "$ref": "#/definitions/domain.User"
          },
          "updated_by_id": {
            "type": "string"
          },
          "void_at": {
            "type": "string"
          },
          "void_by": {
            "$ref": "#/definitions/domain.User"
          },
          "void_by_id": {
            "type": "string"
          },
          "void_reason": {
            "type": "string"
          }
        }
      },
      "domain.JournalVoucherItem": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/definitions/domain.Account"
          },
          "account_id": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "journal_voucher": {
            "$ref": "#/definitions/domain.JournalVoucher"
          },
          "sub_account": {
            "$ref": "#/definitions/domain.SubAccount"
          },
          "sub_account_id": {
            "type": "string"
          },
          "txn_type": {
            "$ref": "#/definitions/types.TxnType"
          }
        }
      },
      "domain.LeadSource": {
        "type": "object",
        "properties": {
          "color_code": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "creator": {
            "description": "TODO: make it created_by",
            "allOf": [
              {
                "$ref": "#/definitions/domain.User"
              }
            ]
          },
          "id": {
            "type": "string"
          },
          "inactive": {
            "type": "boolean"
          },
          "inactive_at": {
            "type": "string"
          },
          "inactive_by": {
            "$ref": "#/definitions/domain.User"
          },
          "inactive_by_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "name_lower": {
            "type": "string"
          },
          "order_number": {
            "type": "integer"
          },
          "updated_by": {
            "$ref": "#/definitions/domain.User"
          },
          "updated_by_id": {
            "type": "string"
          }
        }
      },
      "domain.Location": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "creator": {
            "description": "TODO: make it created_by",
            "allOf": [
              {
                "$ref": "#/definitions/domain.User"
              }
            ]
          },
          "default_tab": {
            "$ref": "#/definitions/types.OrderType"
          },
          "id": {
            "type": "string"
          },
          "inactive": {
            "type": "boolean"
          },
          "inactive_at": {
            "type": "string"
          },
          "inactive_by": {
            "$ref": "#/definitions/domain.User"
          },
          "inactive_by_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "sessions": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/domain.Session"
            }
          },
          "type": {
            "$ref": "#/definitions/types.LocationType"
          },
          "updated_by": {
            "$ref": "#/definitions/domain.User"
          },
          "updated_by_id": {
            "type": "string"
          },
          "warehouse": {
            "$ref": "#/definitions/domain.Warehouse"
          },
          "warehouse_id": {
            "type": "string"
          }
        }
      },
      "domain.LocationPaymentMode": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "payment_mode": {
            "$ref": "#/definitions/domain.PaymentMode"
          },
          "payment_mode_id": {
            "type": "string"
          }
        }
      },
      "domain.LocationPermission": {
        "type": "object",
        "properties": {
          "change_rate": {
            "type": "boolean"
          },
          "discount_limit": {
            "type": "boolean"
          },
          "location": {
            "$ref": "#/definitions/domain.Location"
          },
          "location_id": {
            "type": "string"
          },
          "permissions": {
            "type": "object"
          },
          "remove_service_charge": {
            "type": "boolean"
          }
        }
      },
      "domain.LocationServiceCharge": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/definitions/domain.Account"
          },
          "account_id": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "is_service_charge_applicable": {
            "type": "boolean"
          },
          "service_charge_rate": {
            "type": "number"
          },
          "sub_account": {
            "$ref": "#/definitions/domain.Account"
          },
          "sub_account_id": {
            "type": "string"
          }
        }
      },
      "domain.LoginResponse": {
        "type": "object",
        "properties": {
          "token": {
            "$ref": "#/definitions/domain.Token"
          },
          "user": {
            "$ref": "#/definitions/domain.UserInfo"
          }
        }
      },
      "domain.MeasurementUnit": {
        "type": "object",
        "properties": {
          "accepts_fraction": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "creator": {
            "description": "TODO: make it created_by",
            "allOf": [
              {
                "$ref": "#/definitions/domain.User"
              }
            ]
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "inactive": {
            "type": "boolean"
          },
          "inactive_at": {
            "type": "string"
          },
          "inactive_by": {
            "$ref": "#/definitions/domain.User"
          },
          "inactive_by_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "short_name": {
            "type": "string"
          },
          "updated_by": {
            "$ref": "#/definitions/domain.User"
          },
          "updated_by_id": {
            "type": "string"
          }
        }
      },
      "domain.Node": {
        "type": "object",
        "properties": {
          "account_group_id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "depth": {
            "type": "integer"
          },
          "id": {
            "type": "string"
          },
          "locked": {
            "type": "boolean"
          },
          "manual_blocked": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "nest": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/domain.Node"
            }
          },
          "node_type": {
            "$ref": "#/definitions/types.TreeDataType"
          },
          "parent_id": {
            "type": "string"
          },
          "system_generated": {
            "type": "boolean"
          }
        }
      },
      "domain.OperationItem": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/definitions/domain.Account"
          },
          "account_id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "discount": {
            "type": "number"
          },
          "discount_amount": {
            "type": "number"
          },
          "discount_type": {
            "$ref": "#/definitions/types.DiscountType"
          },
          "grand_total_amount": {
            "type": "number"
          },
          "measurement_unit": {
            "$ref": "#/definitions/domain.MeasurementUnit"
          },
          "measurement_unit_id": {
            "type": "string"
          },
          "non_taxable_amount": {
            "type": "number"
          },
          "product": {
            "$ref": "#/definitions/domain.Product"
          },
          "product_id": {
            "type": "string"
          },
          "quantity": {
            "type": "number"
          },
          "rate": {
            "type": "number"
          },
          "service_charge": {
            "type": "number"
          },
          "service_charge_amount": {
            "type": "number"
          },
          "service_charge_applicable": {
            "type": "boolean"
          },
          "sub_account": {
            "$ref": "#/definitions/domain.SubAccount"
          },
          "sub_account_id": {
            "type": "string"
          },
          "sub_total": {
            "type": "number"
          },
          "taxable_amount": {
            "type": "number"
          },
          "vat_amount": {
            "type": "number"
          },
          "vat_type": {
            "$ref": "#/definitions/types.TaxType"
          },
          "warehouse": {
            "$ref": "#/definitions/domain.Warehouse"
          },
          "warehouse_id": {
            "type": "string"
          }
        }
      },
      "domain.Opportunity": {
        "type": "object",
        "properties": {
          "assign_to": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/domain.OpportunityUser"
            }
          },
          "created_at": {
            "type": "string"
          },
          "created_by": {
            "$ref": "#/definitions/domain.User"
          },
          "deal_stage": {
            "$ref": "#/definitions/domain.DealStage"
          },
          "deal_stage_id": {
            "type": "string"
          },
          "expected_closing_date": {
            "type": "string"
          },
          "expected_revenue": {
            "type": "number"
          },
          "id": {
            "type": "string"
          },
          "inactive": {
            "type": "boolean"
          },
          "inactive_at": {
            "type": "string"
          },
          "inactive_by": {
            "$ref": "#/definitions/domain.User"
          },
          "inactive_by_id": {
            "type": "string"
          },
          "last_lost_at": {
            "type": "string"
          },
          "last_won_at": {
            "type": "string"
          },
          "lead_source": {
            "$ref": "#/definitions/domain.LeadSource"
          },
          "lead_source_id": {
            "type": "string"
          },
          "modified_by": {
            "$ref": "#/definitions/domain.User"
          },
          "opportunity_description": {
            "type": "string"
          },
          "opportunity_title": {
            "type": "string"
          },
          "privacy": {
            "$ref": "#/definitions/types.PrivacyType"
          },
          "source": {
            "$ref": "#/definitions/domain.Contact"
          },
          "source_id": {
            "type": "string"
          },
          "source_type": {
            "type": "string"
          },
          "status": {
            "$ref": "#/definitions/types.DealStatusType"
          }
        }
      },
      "domain.OpportunityUser": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "creator": {
            "description": "TODO: make it created_by",
            "allOf": [
              {
                "$ref": "#/definitions/domain.User"
              }
            ]
          },
          "id": {
            "type": "string"
          },
          "inactive": {
            "type": "boolean"
          },
          "inactive_at": {
            "type": "string"
          },
          "inactive_by": {
            "$ref": "#/definitions/domain.User"
          },
          "inactive_by_id": {
            "type": "string"
          },
          "opportunity": {
            "$ref": "#/definitions/domain.Opportunity"
          },
          "opportunity_id": {
            "type": "string"
          },
          "updated_by": {
            "$ref": "#/definitions/domain.User"
          },
          "updated_by_id": {
            "type": "string"
          },
          "user": {
            "$ref": "#/definitions/domain.User"
          },
          "user_id": {
            "type": "string"
          }
        }
      },
      "domain.OrderBatch": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "creator": {
            "description": "TODO: make it created_by",
            "allOf": [
              {
                "$ref": "#/definitions/domain.User"
              }
            ]
          },
          "id": {
            "type": "string"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/domain.PosOrderItem"
            }
          },
          "location": {
            "$ref": "#/definitions/domain.Location"
          },
          "location_id": {
            "type": "string"
          },
          "order_type": {
            "$ref": "#/definitions/types.OrderType"
          },
          "print_items": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/domain.PrintItem"
            }
          },
          "sales_order_id": {
            "type": "string"
          },
          "served": {
            "type": "boolean"
          },
          "table": {
            "$ref": "#/definitions/domain.Table"
          },
          "table_id": {
            "type": "string"
          }
        }
      },
      "domain.Organization": {
        "type": "object",
        "required": [
          "accounting_start_date",
          "display_name",
          "name"
        ],
        "properties": {
          "accounting_start_date": {
            "type": "string"
          },
          "bank_connection": {
            "type": "boolean"
          },
          "bill_to": {
            "type": "string"
          },
          "billing_location_count": {
            "type": "integer"
          },
          "created_at": {
            "type": "string"
          },
          "created_by": {
            "$ref": "#/definitions/domain.User"
          },
          "credit_available": {
            "type": "integer"
          },
          "daraz_connected": {
            "type": "boolean"
          },
          "display_name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "end_date": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "inactive": {
            "type": "boolean"
          },
          "inactive_at": {
            "type": "string"
          },
          "inactive_by": {
            "$ref": "#/definitions/domain.User"
          },
          "inactive_by_id": {
            "type": "string"
          },
          "is_abbreviated_tax_enabled": {
            "type": "boolean"
          },
          "is_ai_enabled": {
            "type": "boolean"
          },
          "is_billing_location_enabled": {
            "type": "boolean"
          },
          "is_ird_enabled": {
            "type": "boolean"
          },
          "is_ird_user": {
            "type": "boolean"
          },
          "is_ird_verified": {
            "type": "boolean"
          },
          "is_manufacturing_enabled": {
            "type": "boolean"
          },
          "is_pos_enabled": {
            "type": "boolean"
          },
          "is_tigg_enabled": {
            "type": "boolean"
          },
          "is_warehouse_enabled": {
            "type": "boolean"
          },
          "logo": {
            "type": "string"
          },
          "managed_by": {
            "type": "string"
          },
          "modified_by": {
            "$ref": "#/definitions/domain.User"
          },
          "name": {
            "type": "string"
          },
          "no_of_products": {
            "type": "integer"
          },
          "pan_no": {
            "type": "string"
          },
          "partner_name": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          },
          "pos_txn": {
            "type": "integer"
          },
          "preview_link": {
            "type": "string"
          },
          "registered_address": {
            "type": "string"
          },
          "renewed_date": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "start_date": {
            "type": "string"
          },
          "state": {
            "$ref": "#/definitions/types.OrgSyncState"
          },
          "subscription_active_status": {
            "type": "string"
          },
          "subscription_amount": {
            "type": "number"
          },
          "subscription_type": {
            "type": "string"
          },
          "thumbnail_link": {
            "type": "string"
          },
          "tigg_txn": {
            "type": "integer"
          },
          "track_inventory": {
            "type": "boolean"
          },
          "transaction_lock_date": {
            "type": "string"
          },
          "transaction_lock_enabled": {
            "type": "boolean"
          },
          "vat_registered": {
            "type": "boolean"
          },
          "view_link": {
            "type": "string"
          },
          "warehouse_count": {
            "type": "integer"
          },
          "website": {
            "type": "string"
          }
        }
      },
      "domain.Pagination": {
        "type": "object",
        "properties": {
          "current_page_total": {
            "type": "integer"
          },
          "limit": {
            "type": "integer"
          },
          "page_number": {
            "type": "integer"
          },
          "total": {
            "type": "integer"
          },
          "total_pages": {
            "type": "integer"
          }
        }
      },
      "domain.PaymentItem": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/definitions/domain.Account"
          },
          "account_id": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "created_at": {
            "type": "string"
          },
          "customer": {
            "$ref": "#/definitions/domain.Contact"
          },
          "delivery_partner": {
            "$ref": "#/definitions/domain.DeliveryPartner"
          },
          "delivery_partner_id": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "location": {
            "$ref": "#/definitions/domain.Location"
          },
          "payment_method": {
            "$ref": "#/definitions/domain.PaymentMode"
          },
          "payment_mode_id": {
            "type": "string"
          },
          "session": {
            "$ref": "#/definitions/domain.Session"
          },
          "session_id": {
            "type": "string"
          },
          "source": {
            "$ref": "#/definitions/types.TxnSource"
          },
          "source_id": {
            "type": "string"
          },
          "type": {
            "$ref": "#/definitions/types.PaymentModeType"
          }
        }
      },
      "domain.PaymentMode": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/definitions/domain.Account"
          },
          "created_at": {
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "creator": {
            "description": "TODO: make it created_by",
            "allOf": [
              {
                "$ref": "#/definitions/domain.User"
              }
            ]
          },
          "id": {
            "type": "string"
          },
          "inactive": {
            "type": "boolean"
          },
          "inactive_at": {
            "type": "string"
          },
          "inactive_by": {
            "$ref": "#/definitions/domain.User"
          },
          "inactive_by_id": {
            "type": "string"
          },
          "is_pos": {
            "type": "boolean"
          },
          "is_qr_integrated": {
            "type": "boolean"
          },
          "logo": {
            "type": "string"
          },
          "merchant_id": {
            "type": "string"
          },
          "modified_by": {
            "$ref": "#/definitions/domain.User"
          },
          "name": {
            "type": "string"
          },
          "payment_account": {
            "type": "string"
          },
          "type": {
            "$ref": "#/definitions/types.PaymentModeType"
          },
          "updated_by": {
            "$ref": "#/definitions/domain.User"
          },
          "updated_by_id": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "domain.PosOrderItem": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "discard_reason": {
            "type": "string"
          },
          "discarded_quantity": {
            "type": "number"
          },
          "discount": {
            "type": "number"
          },
          "discount_amount": {
            "type": "number"
          },
          "discount_type": {
            "$ref": "#/definitions/types.DiscountType"
          },
          "grand_total_amount": {
            "type": "number"
          },
          "id": {
            "type": "string"
          },
          "measurement_unit": {
            "$ref": "#/definitions/domain.MeasurementUnit"
          },
          "measurement_unit_id": {
            "type": "string"
          },
          "non_taxable_amount": {
            "type": "number"
          },
          "note": {
            "type": "string"
          },
          "order_batch": {
            "$ref": "#/definitions/domain.OrderBatch"
          },
          "order_batch_id": {
            "type": "string"
          },
          "print_profile": {
            "$ref": "#/definitions/domain.PrintProfile"
          },
          "print_profile_id": {
            "type": "string"
          },
          "product": {
            "$ref": "#/definitions/domain.Product"
          },
          "product_id": {
            "type": "string"
          },
          "quantity": {
            "type": "number"
          },
          "rate": {
            "type": "number"
          },
          "sales_order": {
            "$ref": "#/definitions/domain.SalesOrder"
          },
          "served_quantity": {
            "type": "number"
          },
          "service_charge": {
            "type": "number"
          },
          "service_charge_amount": {
            "type": "number"
          },
          "service_charge_applicable": {
            "type": "boolean"
          },
          "sub_total": {
            "type": "number"
          },
          "takeaway_quantity": {
            "type": "number"
          },
          "taxable_amount": {
            "type": "number"
          },
          "transferred_quantity": {
            "type": "number"
          },
          "vat": {
            "$ref": "#/definitions/types.Vat"
          },
          "vat_amount": {
            "type": "number"
          },
          "vat_type": {
            "$ref": "#/definitions/types.TaxType"
          }
        }
      },
      "domain.PrintItem": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/domain.PosOrderItem"
            }
          },
          "print_profile": {
            "$ref": "#/definitions/domain.PrintProfile"
          },
          "served": {
            "type": "boolean"
          }
        }
      },
      "domain.PrintProfile": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "creator": {
            "description": "TODO: make it created_by",
            "allOf": [
              {
                "$ref": "#/definitions/domain.User"
              }
            ]
          },
          "id": {
            "type": "string"
          },
          "inactive": {
            "type": "boolean"
          },
          "inactive_at": {
            "type": "string"
          },
          "inactive_by": {
            "$ref": "#/definitions/domain.User"
          },
          "inactive_by_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "updated_by": {
            "$ref": "#/definitions/domain.User"
          },
          "updated_by_id": {
            "type": "string"
          }
        }
      },
      "domain.PrintingTemplate": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "creator": {
            "description": "TODO: make it created_by",
            "allOf": [
              {
                "$ref": "#/definitions/domain.User"
              }
            ]
          },
          "current_configuration": {
            "type": "object"
          },
          "default_configuration": {
            "type": "object"
          },
          "default_template": {
            "type": "boolean"
          },
          "fields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          },
          "inactive": {
            "type": "boolean"
          },
          "inactive_at": {
            "type": "string"
          },
          "inactive_by": {
            "$ref": "#/definitions/domain.User"
          },
          "inactive_by_id": {
            "type": "string"
          },
          "new_template": {
            "type": "boolean"
          },
          "sourceTemplate": {
            "$ref": "#/definitions/domain.PrintingTemplate"
          },
          "source_collection": {
            "type": "string"
          },
          "source_template_id": {
            "type": "string"
          },
          "template_fixed_name": {
            "type": "string"
          },
          "template_name": {
            "type": "string"
          },
          "thumbnail_name": {
            "$ref": "#/definitions/types.ThumbnailName"
          },
          "updated_by": {
            "$ref": "#/definitions/domain.User"
          },
          "updated_by_id": {
            "type": "string"
          }
        }
      },
      "domain.PrintingTemplateSetting": {
        "type": "object",
        "properties": {
          "channel": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "printing_template": {
            "$ref": "#/definitions/domain.PrintingTemplate"
          },
          "printing_template_id": {
            "type": "string"
          },
          "source": {
            "type": "string"
          }
        }
      },
      "domain.Product": {
        "type": "object",
        "properties": {
          "available_for_sale": {
            "type": "boolean"
          },
          "barcodes": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/domain.Barcode"
            }
          },
          "code": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "creator": {
            "description": "TODO: make it created_by",
            "allOf": [
              {
                "$ref": "#/definitions/domain.User"
              }
            ]
          },
          "description": {
            "type": "string"
          },
          "hs_code": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "image": {
            "type": "string"
          },
          "inactive": {
            "type": "boolean"
          },
          "inactive_at": {
            "type": "string"
          },
          "inactive_by": {
            "$ref": "#/definitions/domain.User"
          },
          "inactive_by_id": {
            "type": "string"
          },
          "is_variant": {
            "type": "boolean"
          },
          "marketplace_skus": {
            "type": "object"
          },
          "name": {
            "type": "string"
          },
          "name_lower": {
            "type": "string"
          },
          "parent": {
            "$ref": "#/definitions/domain.Product"
          },
          "parent_id": {
            "type": "string"
          },
          "preview_link": {
            "type": "string"
          },
          "primary_unit": {
            "$ref": "#/definitions/domain.MeasurementUnit"
          },
          "primary_unit_id": {
            "type": "string"
          },
          "print_profile": {
            "$ref": "#/definitions/domain.PrintProfile"
          },
          "print_profile_id": {
            "type": "string"
          },
          "product_category": {
            "$ref": "#/definitions/domain.ProductCategory"
          },
          "product_category_id": {
            "type": "string"
          },
          "purchase_account": {
            "$ref": "#/definitions/domain.Account"
          },
          "purchase_account_id": {
            "type": "string"
          },
          "purchase_price": {
            "type": "number"
          },
          "purchase_return_account": {
            "$ref": "#/definitions/domain.Account"
          },
          "purchase_return_account_id": {
            "type": "string"
          },
          "purchase_return_sub_account": {
            "$ref": "#/definitions/domain.SubAccount"
          },
          "purchase_return_sub_account_id": {
            "type": "string"
          },
          "purchase_sub_account": {
            "$ref": "#/definitions/domain.SubAccount"
          },
          "purchase_sub_account_id": {
            "type": "string"
          },
          "re_order_level": {
            "type": "number"
          },
          "sales_account": {
            "$ref": "#/definitions/domain.Account"
          },
          "sales_account_id": {
            "type": "string"
          },
          "sales_return_account": {
            "$ref": "#/definitions/domain.Account"
          },
          "sales_return_account_id": {
            "type": "string"
          },
          "sales_return_sub_account": {
            "$ref": "#/definitions/domain.SubAccount"
          },
          "sales_return_sub_account_id": {
            "type": "string"
          },
          "sales_sub_account": {
            "$ref": "#/definitions/domain.SubAccount"
          },
          "sales_sub_account_id": {
            "type": "string"
          },
          "secondary_units": {
            "type": "object"
          },
          "selling_price": {
            "type": "number"
          },
          "service_charge_applicable": {
            "type": "boolean"
          },
          "tax": {
            "$ref": "#/definitions/types.TaxType"
          },
          "thumbnail_link": {
            "type": "string"
          },
          "track_inventory": {
            "type": "boolean"
          },
          "type": {
            "type": "string"
          },
          "updated_by": {
            "$ref": "#/definitions/domain.User"
          },
          "updated_by_id": {
            "type": "string"
          },
          "valuation_method": {
            "type": "string"
          },
          "variant_attributes": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/domain.ProductVariantAttribute"
            }
          },
          "variant_count": {
            "type": "integer"
          },
          "variants": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/domain.ProductVariant"
            }
          },
          "view_link": {
            "type": "string"
          }
        }
      },
      "domain.ProductBalanceResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number"
          },
          "available_for_sale": {
            "type": "boolean"
          },
          "barcodes": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/domain.Barcode"
            }
          },
          "code": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "creator": {
            "description": "TODO: make it created_by",
            "allOf": [
              {
                "$ref": "#/definitions/domain.User"
              }
            ]
          },
          "description": {
            "type": "string"
          },
          "hs_code": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "image": {
            "type": "string"
          },
          "in": {
            "type": "boolean"
          },
          "inactive": {
            "type": "boolean"
          },
          "inactive_at": {
            "type": "string"
          },
          "inactive_by": {
            "$ref": "#/definitions/domain.User"
          },
          "inactive_by_id": {
            "type": "string"
          },
          "is_variant": {
            "type": "boolean"
          },
          "marketplace_skus": {
            "type": "object"
          },
          "name": {
            "type": "string"
          },
          "name_lower": {
            "type": "string"
          },
          "opening_quantity": {
            "type": "number"
          },
          "opening_rate": {
            "type": "number"
          },
          "parent": {
            "$ref": "#/definitions/domain.Product"
          },
          "parent_id": {
            "type": "string"
          },
          "preview_link": {
            "type": "string"
          },
          "primary_unit": {
            "$ref": "#/definitions/domain.MeasurementUnit"
          },
          "primary_unit_id": {
            "type": "string"
          },
          "print_profile": {
            "$ref": "#/definitions/domain.PrintProfile"
          },
          "print_profile_id": {
            "type": "string"
          },
          "product_category": {
            "$ref": "#/definitions/domain.ProductCategory"
          },
          "product_category_id": {
            "type": "string"
          },
          "purchase_account": {
            "$ref": "#/definitions/domain.Account"
          },
          "purchase_account_id": {
            "type": "string"
          },
          "purchase_price": {
            "type": "number"
          },
          "purchase_return_account": {
            "$ref": "#/definitions/domain.Account"
          },
          "purchase_return_account_id": {
            "type": "string"
          },
          "purchase_return_sub_account": {
            "$ref": "#/definitions/domain.SubAccount"
          },
          "purchase_return_sub_account_id": {
            "type": "string"
          },
          "purchase_sub_account": {
            "$ref": "#/definitions/domain.SubAccount"
          },
          "purchase_sub_account_id": {
            "type": "string"
          },
          "re_order_level": {
            "type": "number"
          },
          "sales_account": {
            "$ref": "#/definitions/domain.Account"
          },
          "sales_account_id": {
            "type": "string"
          },
          "sales_return_account": {
            "$ref": "#/definitions/domain.Account"
          },
          "sales_return_account_id": {
            "type": "string"
          },
          "sales_return_sub_account": {
            "$ref": "#/definitions/domain.SubAccount"
          },
          "sales_return_sub_account_id": {
            "type": "string"
          },
          "sales_sub_account": {
            "$ref": "#/definitions/domain.SubAccount"
          },
          "sales_sub_account_id": {
            "type": "string"
          },
          "secondary_units": {
            "type": "object"
          },
          "selling_price": {
            "type": "number"
          },
          "service_charge_applicable": {
            "type": "boolean"
          },
          "tax": {
            "$ref": "#/definitions/types.TaxType"
          },
          "thumbnail_link": {
            "type": "string"
          },
          "track_inventory": {
            "type": "boolean"
          },
          "type": {
            "type": "string"
          },
          "updated_by": {
            "$ref": "#/definitions/domain.User"
          },
          "updated_by_id": {
            "type": "string"
          },
          "valuation_method": {
            "type": "string"
          },
          "variant_attributes": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/domain.ProductVariantAttribute"
            }
          },
          "variant_count": {
            "type": "integer"
          },
          "variants": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/domain.ProductVariant"
            }
          },
          "view_link": {
            "type": "string"
          }
        }
      },
      "domain.ProductCategory": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer"
          },
          "created_at": {
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "creator": {
            "description": "TODO: make it created_by",
            "allOf": [
              {
                "$ref": "#/definitions/domain.User"
              }
            ]
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "inactive": {
            "type": "boolean"
          },
          "inactive_at": {
            "type": "string"
          },
          "inactive_by": {
            "$ref": "#/definitions/domain.User"
          },
          "inactive_by_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "parent": {
            "$ref": "#/definitions/domain.ProductCategory"
          },
          "parent_id": {
            "type": "string"
          },
          "updated_by": {
            "$ref": "#/definitions/domain.User"
          },
          "updated_by_id": {
            "type": "string"
          }
        }
      },
      "domain.ProductItem": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "discount": {
            "type": "number"
          },
          "discount_amount": {
            "type": "number"
          },
          "discount_type": {
            "$ref": "#/definitions/types.DiscountType"
          },
          "grand_total_amount": {
            "type": "number"
          },
          "measurement_unit": {
            "$ref": "#/definitions/domain.MeasurementUnit"
          },
          "measurement_unit_id": {
            "type": "string"
          },
          "non_taxable_amount": {
            "type": "number"
          },
          "product": {
            "$ref": "#/definitions/domain.Product"
          },
          "product_id": {
            "type": "string"
          },
          "quantity": {
            "type": "number"
          },
          "rate": {
            "type": "number"
          },
          "service_charge": {
            "type": "number"
          },
          "service_charge_amount": {
            "type": "number"
          },
          "service_charge_applicable": {
            "type": "boolean"
          },
          "sub_total": {
            "type": "number"
          },
          "taxable_amount": {
            "type": "number"
          },
          "vat_amount": {
            "type": "number"
          },
          "vat_type": {
            "$ref": "#/definitions/types.TaxType"
          }
        }
      },
      "domain.ProductMovement": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/definitions/domain.Account"
          },
          "account_id": {
            "type": "string"
          },
          "additional_cost_amount": {
            "type": "integer"
          },
          "additional_cost_total_float": {
            "type": "number"
          },
          "approved_at": {
            "type": "string"
          },
          "channel": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "contact": {
            "$ref": "#/definitions/domain.Contact"
          },
          "date": {
            "type": "string"
          },
          "delivery_partner": {
            "$ref": "#/definitions/domain.DeliveryPartner"
          },
          "delivery_partner_id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "in": {
            "type": "boolean"
          },
          "is_export": {
            "type": "boolean"
          },
          "is_import": {
            "type": "boolean"
          },
          "is_sales": {
            "type": "boolean"
          },
          "item_discount_amount": {
            "type": "number"
          },
          "location": {
            "$ref": "#/definitions/domain.Location"
          },
          "location_id": {
            "type": "string"
          },
          "measurement_unit": {
            "$ref": "#/definitions/domain.MeasurementUnit"
          },
          "measurement_unit_id": {
            "type": "string"
          },
          "month_ad": {
            "type": "integer"
          },
          "month_bs": {
            "type": "integer"
          },
          "non_taxable_amount": {
            "type": "number"
          },
          "notes": {
            "type": "string"
          },
          "order_type": {
            "$ref": "#/definitions/types.OrderType"
          },
          "primary_in_quantity": {
            "type": "number"
          },
          "primary_out_quantity": {
            "type": "number"
          },
          "primary_quantity": {
            "type": "number"
          },
          "product": {
            "$ref": "#/definitions/domain.Product"
          },
          "product_id": {
            "type": "string"
          },
          "quantity": {
            "type": "number"
          },
          "rate": {
            "type": "number"
          },
          "reference_no": {
            "type": "string"
          },
          "service_charge": {
            "type": "number"
          },
          "session": {
            "$ref": "#/definitions/domain.Session"
          },
          "session_id": {
            "type": "string"
          },
          "source": {
            "$ref": "#/definitions/types.TxnSource"
          },
          "source_id": {
            "type": "string"
          },
          "status": {
            "$ref": "#/definitions/types.Status"
          },
          "sub_account": {
            "$ref": "#/definitions/domain.SubAccount"
          },
          "sub_account_id": {
            "type": "string"
          },
          "sub_total": {
            "description": "TODO: Make it sub_total_amount",
            "type": "number"
          },
          "taxBaseAmount": {
            "type": "integer"
          },
          "taxBaseTax": {
            "$ref": "#/definitions/types.TaxType"
          },
          "taxBaseTaxAmount": {
            "type": "integer"
          },
          "taxable_total": {
            "description": "TODO: Make it taxable_amount",
            "type": "number"
          },
          "total_amount": {
            "description": "TODO: Make it grand_total_amount",
            "type": "number"
          },
          "total_discount_amount": {
            "type": "number"
          },
          "transaction_discount_amount": {
            "type": "number"
          },
          "valuationRate": {
            "type": "number"
          },
          "vat_amount": {
            "type": "number"
          },
          "vat_type": {
            "$ref": "#/definitions/types.TaxType"
          },
          "warehouse": {
            "$ref": "#/definitions/domain.Warehouse"
          },
          "warehouse_id": {
            "type": "string"
          },
          "year_ad": {
            "type": "integer"
          },
          "year_bs": {
            "type": "integer"
          }
        }
      },
      "domain.ProductVariant": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "product": {
            "$ref": "#/definitions/domain.Product"
          },
          "product_id": {
            "type": "string"
          },
          "varaint_id": {
            "type": "string"
          },
          "variant": {
            "$ref": "#/definitions/domain.VariantAttribute"
          }
        }
      },
      "domain.ProductVariantAttribute": {
        "type": "object",
        "properties": {
          "attribute": {
            "$ref": "#/definitions/domain.VariantOption"
          },
          "attribute_id": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "product": {
            "$ref": "#/definitions/domain.Product"
          },
          "product_id": {
            "type": "string"
          },
          "varaint_id": {
            "type": "string"
          },
          "variant": {
            "$ref": "#/definitions/domain.VariantAttribute"
          }
        }
      },
      "domain.PurchaseBill": {
        "type": "object",
        "properties": {
          "action_by": {
            "$ref": "#/definitions/domain.User"
          },
          "additionalDiscount": {
            "type": "number"
          },
          "additional_costs": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/domain.AdditionalCost"
            }
          },
          "approved_at": {
            "type": "string"
          },
          "approved_by_id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "contact": {
            "$ref": "#/definitions/domain.Contact"
          },
          "contact_id": {
            "description": "TODO: Make it supplier_id",
            "type": "string"
          },
          "conversion_rate": {
            "type": "number"
          },
          "created_at": {
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "creator": {
            "description": "TODO: make it created_by",
            "allOf": [
              {
                "$ref": "#/definitions/domain.User"
              }
            ]
          },
          "currency": {
            "$ref": "#/definitions/domain.CurrencyCode"
          },
          "currency_code": {
            "type": "string"
          },
          "custom_fields": {
            "type": "object"
          },
          "discount": {
            "type": "number"
          },
          "discount_amount": {
            "type": "number"
          },
          "discount_type": {
            "$ref": "#/definitions/types.DiscountType"
          },
          "due_date": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "invoice_date": {
            "type": "string"
          },
          "is_import_export": {
            "type": "boolean"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/domain.PurchaseBillItem"
            }
          },
          "location": {
            "$ref": "#/definitions/domain.Location"
          },
          "location_id": {
            "type": "string"
          },
          "non_taxable_total": {
            "type": "number"
          },
          "note": {
            "type": "string"
          },
          "product_wise": {
            "type": "boolean"
          },
          "reference_no": {
            "type": "string"
          },
          "referred": {
            "$ref": "#/definitions/domain.AllTransaction"
          },
          "referred_id": {
            "type": "string"
          },
          "referrer": {
            "$ref": "#/definitions/domain.AllTransaction"
          },
          "referrer_id": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "object"
          },
          "service_charge_amount": {
            "type": "number"
          },
          "status": {
            "$ref": "#/definitions/types.Status"
          },
          "sub_total": {
            "type": "number"
          },
          "supplier_invoice_reference_no": {
            "type": "string"
          },
          "taxable_total": {
            "type": "number"
          },
          "tds_account": {
            "$ref": "#/definitions/domain.Account"
          },
          "tds_account_id": {
            "type": "string"
          },
          "tds_amount": {
            "type": "number"
          },
          "tds_sub_account": {
            "$ref": "#/definitions/domain.SubAccount"
          },
          "tds_sub_account_id": {
            "type": "string"
          },
          "tds_type": {
            "$ref": "#/definitions/domain.TdsType"
          },
          "tds_type_id": {
            "type": "string"
          },
          "terms_and_conditions": {
            "type": "string"
          },
          "total_amount": {
            "type": "number"
          },
          "trade_country": {
            "type": "string"
          },
          "trade_date": {
            "type": "string"
          },
          "trade_doc_no": {
            "type": "string"
          },
          "updated_by": {
            "$ref": "#/definitions/domain.User"
          },
          "updated_by_id": {
            "type": "string"
          },
          "vat_amount": {
            "type": "number"
          },
          "void_at": {
            "type": "string"
          },
          "void_by": {
            "$ref": "#/definitions/domain.User"
          },
          "void_by_id": {
            "type": "string"
          },
          "void_reason": {
            "type": "string"
          }
        }
      },
      "domain.PurchaseBillItem": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/definitions/domain.Account"
          },
          "account_id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "discount": {
            "type": "number"
          },
          "discount_amount": {
            "type": "number"
          },
          "discount_type": {
            "$ref": "#/definitions/types.DiscountType"
          },
          "grand_total_amount": {
            "type": "number"
          },
          "id": {
            "type": "string"
          },
          "measurement_unit": {
            "$ref": "#/definitions/domain.MeasurementUnit"
          },
          "measurement_unit_id": {
            "type": "string"
          },
          "non_taxable_amount": {
            "type": "number"
          },
          "product": {
            "$ref": "#/definitions/domain.Product"
          },
          "product_id": {
            "type": "string"
          },
          "purchase_bill": {
            "$ref": "#/definitions/domain.PurchaseBill"
          },
          "quantity": {
            "type": "number"
          },
          "rate": {
            "type": "number"
          },
          "service_charge": {
            "type": "number"
          },
          "service_charge_amount": {
            "type": "number"
          },
          "service_charge_applicable": {
            "type": "boolean"
          },
          "sub_account": {
            "$ref": "#/definitions/domain.SubAccount"
          },
          "sub_account_id": {
            "type": "string"
          },
          "sub_total": {
            "type": "number"
          },
          "tax_base_amount": {
            "type": "number"
          },
          "tax_base_vat_type": {
            "$ref": "#/definitions/types.TaxType"
          },
          "taxable_amount": {
            "type": "number"
          },
          "vat_amount": {
            "type": "number"
          },
          "vat_type": {
            "$ref": "#/definitions/types.TaxType"
          },
          "warehouse": {
            "$ref": "#/definitions/domain.Warehouse"
          },
          "warehouse_id": {
            "type": "string"
          }
        }
      },
      "domain.PurchaseOrder": {
        "type": "object",
        "properties": {
          "action_by": {
            "$ref": "#/definitions/domain.User"
          },
          "approved_at": {
            "type": "string"
          },
          "approved_by_id": {
            "type": "string"
          },
          "area_id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "contact": {
            "description": "TODO: Make it supplier in json",
            "allOf": [
              {
                "$ref": "#/definitions/domain.Contact"
              }
            ]
          },
          "contact_id": {
            "description": "TODO: Make it supplier id in json, gorm",
            "type": "string"
          },
          "conversion_rate": {
            "type": "number"
          },
          "created_at": {
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "creator": {
            "description": "TODO: make it created_by",
            "allOf": [
              {
                "$ref": "#/definitions/domain.User"
              }
            ]
          },
          "credit_term": {
            "$ref": "#/definitions/domain.CreditTerm"
          },
          "credit_term_id": {
            "type": "string"
          },
          "currency": {
            "$ref": "#/definitions/domain.CurrencyCode"
          },
          "currency_code": {
            "type": "string"
          },
          "custom_fields": {
            "type": "object"
          },
          "custom_status": {
            "$ref": "#/definitions/domain.CustomStatus"
          },
          "custom_status_id": {
            "type": "string"
          },
          "date": {
            "type": "string"
          },
          "delivery_partner": {
            "$ref": "#/definitions/domain.DeliveryPartner"
          },
          "delivery_partner_id": {
            "type": "string"
          },
          "discount": {
            "type": "number"
          },
          "discount_amount": {
            "type": "number"
          },
          "discount_type": {
            "$ref": "#/definitions/types.DiscountType"
          },
          "id": {
            "type": "string"
          },
          "is_processed": {
            "type": "boolean"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/domain.PurchaseOrderItem"
            }
          },
          "location": {
            "$ref": "#/definitions/domain.Location"
          },
          "location_id": {
            "type": "string"
          },
          "non_taxable_total": {
            "type": "number"
          },
          "note": {
            "type": "string"
          },
          "order_type": {
            "type": "string"
          },
          "reference_no": {
            "description": "TODO: Make it reference in json",
            "type": "string"
          },
          "referred": {
            "$ref": "#/definitions/domain.AllTransaction"
          },
          "reporting_tags": {
            "type": "object"
          },
          "service_charge_amount": {
            "type": "number"
          },
          "status": {
            "$ref": "#/definitions/types.Status"
          },
          "sub_total": {
            "type": "number"
          },
          "table_id": {
            "description": "POS Fields",
            "type": "string"
          },
          "taxable_total": {
            "type": "number"
          },
          "terms_and_conditions": {
            "type": "string"
          },
          "total_amount": {
            "type": "number"
          },
          "updated_by": {
            "$ref": "#/definitions/domain.User"
          },
          "updated_by_id": {
            "type": "string"
          },
          "vat_amount": {
            "type": "number"
          },
          "void_at": {
            "type": "string"
          },
          "void_by": {
            "$ref": "#/definitions/domain.User"
          },
          "void_by_id": {
            "type": "string"
          },
          "void_reason": {
            "type": "string"
          }
        }
      },
      "domain.PurchaseOrderItem": {
        "type": "object",
        "properties": {
          "cancel_reason": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "din_in_type": {
            "type": "string"
          },
          "discount": {
            "type": "number"
          },
          "discount_amount": {
            "type": "number"
          },
          "discount_type": {
            "$ref": "#/definitions/types.DiscountType"
          },
          "grand_total_amount": {
            "type": "number"
          },
          "id": {
            "type": "string"
          },
          "measurement_unit": {
            "$ref": "#/definitions/domain.MeasurementUnit"
          },
          "measurement_unit_id": {
            "type": "string"
          },
          "non_taxable_amount": {
            "type": "number"
          },
          "print_count": {
            "type": "integer"
          },
          "product": {
            "$ref": "#/definitions/domain.Product"
          },
          "product_id": {
            "type": "string"
          },
          "purchase_order": {
            "description": "End of POS Columns",
            "allOf": [
              {
                "$ref": "#/definitions/domain.PurchaseOrder"
              }
            ]
          },
          "quantity": {
            "type": "number"
          },
          "rate": {
            "type": "number"
          },
          "service_charge": {
            "type": "number"
          },
          "service_charge_amount": {
            "type": "number"
          },
          "service_charge_applicable": {
            "type": "boolean"
          },
          "status": {
            "description": "POS Columns",
            "type": "string"
          },
          "sub_total": {
            "type": "number"
          },
          "taxable_amount": {
            "type": "number"
          },
          "vat_amount": {
            "type": "number"
          },
          "vat_type": {
            "$ref": "#/definitions/types.TaxType"
          }
        }
      },
      "domain.QuickLink": {
        "type": "object",
        "properties": {
          "app_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "domain.QuickPayment": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/definitions/domain.Account"
          },
          "account_id": {
            "type": "string"
          },
          "action_by": {
            "$ref": "#/definitions/domain.User"
          },
          "approved_at": {
            "type": "string"
          },
          "approved_by_id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "conversion_rate": {
            "type": "number"
          },
          "created_at": {
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "creator": {
            "description": "TODO: make it created_by",
            "allOf": [
              {
                "$ref": "#/definitions/domain.User"
              }
            ]
          },
          "currency": {
            "$ref": "#/definitions/domain.CurrencyCode"
          },
          "currency_code": {
            "type": "string"
          },
          "custom_fields": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/domain.TransactionCustomField"
            }
          },
          "date": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "items": {
            "type": "object"
          },
          "location": {
            "$ref": "#/definitions/domain.Location"
          },
          "location_id": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "paid_account": {
            "$ref": "#/definitions/domain.Account"
          },
          "reference_no": {
            "type": "string"
          },
          "referrer": {
            "$ref": "#/definitions/domain.Cheque"
          },
          "referrer_id": {
            "type": "string"
          },
          "referrer_source": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/domain.TransactionReportingTag"
            }
          },
          "status": {
            "$ref": "#/definitions/types.Status"
          },
          "sub_account_id": {
            "type": "string"
          },
          "total_amount": {
            "type": "number"
          },
          "updated_by": {
            "$ref": "#/definitions/domain.User"
          },
          "updated_by_id": {
            "type": "string"
          },
          "void_at": {
            "type": "string"
          },
          "void_by": {
            "$ref": "#/definitions/domain.User"
          },
          "void_by_id": {
            "type": "string"
          },
          "void_reason": {
            "type": "string"
          }
        }
      },
      "domain.QuickReceipt": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/definitions/domain.Account"
          },
          "account_id": {
            "type": "string"
          },
          "action_by": {
            "$ref": "#/definitions/domain.User"
          },
          "approved_at": {
            "type": "string"
          },
          "approved_by_id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "conversion_rate": {
            "type": "number"
          },
          "created_at": {
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "creator": {
            "description": "TODO: make it created_by",
            "allOf": [
              {
                "$ref": "#/definitions/domain.User"
              }
            ]
          },
          "currency": {
            "$ref": "#/definitions/domain.CurrencyCode"
          },
          "currency_code": {
            "type": "string"
          },
          "custom_fields": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/domain.TransactionCustomField"
            }
          },
          "date": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "items": {
            "type": "object"
          },
          "location": {
            "$ref": "#/definitions/domain.Location"
          },
          "location_id": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "receipt_account": {
            "$ref": "#/definitions/domain.Account"
          },
          "reference_no": {
            "type": "string"
          },
          "referrer": {
            "$ref": "#/definitions/domain.Cheque"
          },
          "referrer_id": {
            "type": "string"
          },
          "referrer_source": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/domain.TransactionReportingTag"
            }
          },
          "status": {
            "$ref": "#/definitions/types.Status"
          },
          "sub_account_id": {
            "type": "string"
          },
          "total_amount": {
            "type": "number"
          },
          "updated_by": {
            "$ref": "#/definitions/domain.User"
          },
          "updated_by_id": {
            "type": "string"
          },
          "void_at": {
            "type": "string"
          },
          "void_by": {
            "$ref": "#/definitions/domain.User"
          },
          "void_by_id": {
            "type": "string"
          },
          "void_reason": {
            "type": "string"
          }
        }
      },
      "domain.Quotation": {
        "type": "object",
        "properties": {
          "action_by": {
            "$ref": "#/definitions/domain.User"
          },
          "approved_at": {
            "type": "string"
          },
          "approved_by_id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "contact": {
            "description": "TODO: Make it customer json",
            "allOf": [
              {
                "$ref": "#/definitions/domain.Contact"
              }
            ]
          },
          "contact_id": {
            "description": "TODO: Make it customer_id",
            "type": "string"
          },
          "conversion_rate": {
            "type": "number"
          },
          "created_at": {
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "creator": {
            "description": "TODO: make it created_by",
            "allOf": [
              {
                "$ref": "#/definitions/domain.User"
              }
            ]
          },
          "credit_term": {
            "$ref": "#/definitions/domain.CreditTerm"
          },
          "credit_term_id": {
            "type": "string"
          },
          "currency": {
            "$ref": "#/definitions/domain.CurrencyCode"
          },
          "currency_code": {
            "type": "string"
          },
          "custom_fields": {
            "type": "object"
          },
          "custom_status": {
            "$ref": "#/definitions/domain.CustomStatus"
          },
          "custom_status_id": {
            "type": "string"
          },
          "date": {
            "type": "string"
          },
          "discount": {
            "type": "number"
          },
          "discount_amount": {
            "type": "number"
          },
          "discount_type": {
            "$ref": "#/definitions/types.DiscountType"
          },
          "expiry_date": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "is_processed": {
            "type": "boolean"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/domain.QuotationItem"
            }
          },
          "location": {
            "$ref": "#/definitions/domain.Location"
          },
          "location_id": {
            "type": "string"
          },
          "non_taxable_total": {
            "type": "number"
          },
          "note": {
            "type": "string"
          },
          "referred": {
            "$ref": "#/definitions/domain.AllTransaction"
          },
          "referred_id": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "object"
          },
          "service_charge_amount": {
            "type": "number"
          },
          "status": {
            "$ref": "#/definitions/types.Status"
          },
          "sub_total": {
            "type": "number"
          },
          "taxable_total": {
            "type": "number"
          },
          "terms_and_conditions": {
            "type": "string"
          },
          "total_amount": {
            "type": "number"
          },
          "updated_by": {
            "$ref": "#/definitions/domain.User"
          },
          "updated_by_id": {
            "type": "string"
          },
          "vat_amount": {
            "type": "number"
          },
          "void_at": {
            "type": "string"
          },
          "void_by": {
            "$ref": "#/definitions/domain.User"
          },
          "void_by_id": {
            "type": "string"
          },
          "void_reason": {
            "type": "string"
          }
        }
      },
      "domain.QuotationItem": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "discount": {
            "type": "number"
          },
          "discount_amount": {
            "type": "number"
          },
          "discount_type": {
            "$ref": "#/definitions/types.DiscountType"
          },
          "grand_total_amount": {
            "type": "number"
          },
          "id": {
            "type": "string"
          },
          "measurement_unit": {
            "$ref": "#/definitions/domain.MeasurementUnit"
          },
          "measurement_unit_id": {
            "type": "string"
          },
          "non_taxable_amount": {
            "type": "number"
          },
          "product": {
            "$ref": "#/definitions/domain.Product"
          },
          "product_id": {
            "type": "string"
          },
          "quantity": {
            "type": "number"
          },
          "quotation": {
            "$ref": "#/definitions/domain.Quotation"
          },
          "rate": {
            "type": "number"
          },
          "service_charge": {
            "type": "number"
          },
          "service_charge_amount": {
            "type": "number"
          },
          "service_charge_applicable": {
            "type": "boolean"
          },
          "sub_total": {
            "type": "number"
          },
          "taxable_amount": {
            "type": "number"
          },
          "vat_amount": {
            "type": "number"
          },
          "vat_type": {
            "$ref": "#/definitions/types.TaxType"
          }
        }
      },
      "domain.ReportingTag": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "creator": {
            "description": "TODO: make it created_by",
            "allOf": [
              {
                "$ref": "#/definitions/domain.User"
              }
            ]
          },
          "id": {
            "type": "string"
          },
          "inactive": {
            "type": "boolean"
          },
          "inactive_at": {
            "type": "string"
          },
          "inactive_by": {
            "$ref": "#/definitions/domain.User"
          },
          "inactive_by_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "name_lower": {
            "type": "string"
          },
          "options": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "order_number": {
            "type": "integer"
          },
          "updated_by": {
            "$ref": "#/definitions/domain.User"
          },
          "updated_by_id": {
            "type": "string"
          }
        }
      },
      "domain.ReportingTagData": {
        "type": "object",
        "properties": {
          "reporting_tags": {
            "$ref": "#/definitions/domain.ReportingTag"
          },
          "reporting_tags_id": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "domain.RoleReference": {
        "type": "object",
        "properties": {
          "channel": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "created_by": {
            "$ref": "#/definitions/domain.User"
          },
          "id": {
            "type": "string"
          },
          "inactive": {
            "type": "boolean"
          },
          "inactive_at": {
            "type": "string"
          },
          "inactive_by": {
            "$ref": "#/definitions/domain.User"
          },
          "inactive_by_id": {
            "type": "string"
          },
          "location_permissions": {
            "type": "object"
          },
          "modified_by": {
            "$ref": "#/definitions/domain.User"
          },
          "name": {
            "type": "string"
          },
          "name_lower": {
            "type": "string"
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "domain.SalesOrder": {
        "type": "object",
        "properties": {
          "action_by": {
            "$ref": "#/definitions/domain.User"
          },
          "approved_at": {
            "type": "string"
          },
          "approved_by_id": {
            "type": "string"
          },
          "area": {
            "$ref": "#/definitions/domain.Area"
          },
          "area_id": {
            "type": "string"
          },
          "channel": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "contact": {
            "$ref": "#/definitions/domain.Contact"
          },
          "contact_id": {
            "type": "string"
          },
          "conversion_rate": {
            "type": "number"
          },
          "created_at": {
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "creator": {
            "description": "TODO: make it created_by",
            "allOf": [
              {
                "$ref": "#/definitions/domain.User"
              }
            ]
          },
          "currency": {
            "$ref": "#/definitions/domain.CurrencyCode"
          },
          "currency_code": {
            "type": "string"
          },
          "custom_fields": {
            "type": "object"
          },
          "custom_status": {
            "$ref": "#/definitions/domain.CustomStatus"
          },
          "custom_status_id": {
            "type": "string"
          },
          "customer_count": {
            "type": "integer"
          },
          "daraz_order_id": {
            "type": "string"
          },
          "date": {
            "type": "string"
          },
          "delivery_date": {
            "type": "string"
          },
          "delivery_partner": {
            "$ref": "#/definitions/domain.DeliveryPartner"
          },
          "delivery_partner_id": {
            "type": "string"
          },
          "discount": {
            "type": "number"
          },
          "discount_amount": {
            "type": "number"
          },
          "discount_type": {
            "$ref": "#/definitions/types.DiscountType"
          },
          "id": {
            "type": "string"
          },
          "is_processed": {
            "type": "boolean"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/domain.SalesOrderItem"
            }
          },
          "last_order_batch_id": {
            "type": "string"
          },
          "location": {
            "$ref": "#/definitions/domain.Location"
          },
          "location_id": {
            "type": "string"
          },
          "market_place_account_id": {
            "type": "string"
          },
          "non_taxable_total": {
            "type": "number"
          },
          "note": {
            "type": "string"
          },
          "order_items": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/domain.PosOrderItem"
            }
          },
          "order_type": {
            "$ref": "#/definitions/types.OrderType"
          },
          "package_id": {
            "type": "string"
          },
          "reference_no": {
            "type": "string"
          },
          "referred": {
            "$ref": "#/definitions/domain.AllTransaction"
          },
          "referred_id": {
            "type": "string"
          },
          "referrer": {
            "$ref": "#/definitions/domain.AllTransaction"
          },
          "referrer_id": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "object"
          },
          "service_charge": {
            "type": "number"
          },
          "service_charge_amount": {
            "type": "number"
          },
          "split_invoice_id": {
            "type": "string"
          },
          "status": {
            "$ref": "#/definitions/types.Status"
          },
          "sub_total": {
            "type": "number"
          },
          "table": {
            "$ref": "#/definitions/domain.Table"
          },
          "table_id": {
            "type": "string"
          },
          "taxable_total": {
            "type": "number"
          },
          "terms_and_conditions": {
            "type": "string"
          },
          "total_amount": {
            "type": "number"
          },
          "updated_by": {
            "$ref": "#/definitions/domain.User"
          },
          "updated_by_id": {
            "type": "string"
          },
          "vat_amount": {
            "type": "number"
          },
          "void_at": {
            "type": "string"
          },
          "void_by": {
            "$ref": "#/definitions/domain.User"
          },
          "void_by_id": {
            "type": "string"
          },
          "void_reason": {
            "type": "string"
          }
        }
      },
      "domain.SalesOrderItem": {
        "type": "object",
        "properties": {
          "daraz_order_item_id": {
            "type": "integer"
          },
          "description": {
            "type": "string"
          },
          "discount": {
            "type": "number"
          },
          "discount_amount": {
            "type": "number"
          },
          "discount_type": {
            "$ref": "#/definitions/types.DiscountType"
          },
          "grand_total_amount": {
            "type": "number"
          },
          "id": {
            "type": "string"
          },
          "is_take_away": {
            "type": "boolean"
          },
          "market_place_item_image": {
            "type": "string"
          },
          "measurement_unit": {
            "$ref": "#/definitions/domain.MeasurementUnit"
          },
          "measurement_unit_id": {
            "type": "string"
          },
          "non_taxable_amount": {
            "type": "number"
          },
          "note": {
            "type": "string"
          },
          "product": {
            "$ref": "#/definitions/domain.Product"
          },
          "product_id": {
            "type": "string"
          },
          "quantity": {
            "type": "number"
          },
          "rate": {
            "type": "number"
          },
          "sales_order": {
            "$ref": "#/definitions/domain.SalesOrder"
          },
          "service_charge": {
            "type": "number"
          },
          "service_charge_amount": {
            "type": "number"
          },
          "service_charge_applicable": {
            "type": "boolean"
          },
          "sub_total": {
            "type": "number"
          },
          "taxable_amount": {
            "type": "number"
          },
          "vat": {
            "$ref": "#/definitions/types.Vat"
          },
          "vat_amount": {
            "type": "number"
          },
          "vat_type": {
            "$ref": "#/definitions/types.TaxType"
          }
        }
      },
      "domain.SecondaryUnit": {
        "type": "object",
        "properties": {
          "conversion_rate": {
            "type": "number"
          },
          "id": {
            "type": "string"
          },
          "inactive": {
            "type": "boolean"
          },
          "inactive_at": {
            "type": "string"
          },
          "inactive_by": {
            "$ref": "#/definitions/domain.User"
          },
          "inactive_by_id": {
            "type": "string"
          },
          "is_primary": {
            "type": "boolean"
          },
          "measurement_unit": {
            "$ref": "#/definitions/domain.MeasurementUnit"
          },
          "measurement_unit_id": {
            "type": "string"
          },
          "product": {
            "$ref": "#/definitions/domain.Product"
          },
          "product_id": {
            "type": "string"
          },
          "purchase_price": {
            "type": "number"
          },
          "selling_price": {
            "type": "number"
          }
        }
      },
      "domain.Session": {
        "type": "object",
        "properties": {
          "closed_at": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "inactive": {
            "type": "boolean"
          },
          "inactive_at": {
            "type": "string"
          },
          "inactive_by": {
            "$ref": "#/definitions/domain.User"
          },
          "inactive_by_id": {
            "type": "string"
          },
          "location": {
            "$ref": "#/definitions/domain.Location"
          },
          "location_id": {
            "type": "string"
          },
          "no_of_txn": {
            "type": "integer"
          },
          "opened_at": {
            "type": "string"
          },
          "status": {
            "$ref": "#/definitions/types.SessionStatus"
          },
          "user": {
            "$ref": "#/definitions/domain.User"
          },
          "user_id": {
            "type": "string"
          }
        }
      },
      "domain.SubAccount": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/definitions/domain.Account"
          },
          "account_id": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "creator": {
            "description": "TODO: make it created_by",
            "allOf": [
              {
                "$ref": "#/definitions/domain.User"
              }
            ]
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "inactive": {
            "type": "boolean"
          },
          "inactive_at": {
            "type": "string"
          },
          "inactive_by": {
            "$ref": "#/definitions/domain.User"
          },
          "inactive_by_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "name_lower": {
            "type": "string"
          },
          "updated_by": {
            "$ref": "#/definitions/domain.User"
          },
          "updated_by_id": {
            "type": "string"
          }
        }
      },
      "domain.SubscriptionGeneralSetting": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "expiry_date": {
            "type": "string"
          },
          "location": {
            "$ref": "#/definitions/domain.Location"
          },
          "location_id": {
            "type": "string"
          },
          "subscription_amount": {
            "type": "number"
          },
          "subscription_plan": {
            "type": "string"
          }
        }
      },
      "domain.SubscriptionMatrixResp": {
        "type": "object",
        "properties": {
          "from_date": {
            "type": "string"
          },
          "no_of_products": {
            "type": "integer"
          },
          "pos_txn": {
            "type": "integer"
          },
          "tigg_txn": {
            "type": "integer"
          },
          "to_date": {
            "type": "string"
          }
        }
      },
      "domain.SupplierPayment": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/definitions/domain.Account"
          },
          "action_by": {
            "$ref": "#/definitions/domain.User"
          },
          "amount": {
            "type": "number"
          },
          "approved_at": {
            "type": "string"
          },
          "approved_by_id": {
            "type": "string"
          },
          "bank_account_id": {
            "type": "string"
          },
          "bank_charge_account": {
            "$ref": "#/definitions/domain.Account"
          },
          "bank_charge_account_id": {
            "type": "string"
          },
          "bank_charge_amount": {
            "type": "number"
          },
          "bank_charge_sub_account": {
            "$ref": "#/definitions/domain.SubAccount"
          },
          "bank_charge_sub_account_id": {
            "type": "string"
          },
          "bank_sub_account_id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "contact": {
            "$ref": "#/definitions/domain.Contact"
          },
          "contact_id": {
            "type": "string"
          },
          "conversion_rate": {
            "type": "number"
          },
          "created_at": {
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "creator": {
            "description": "TODO: make it created_by",
            "allOf": [
              {
                "$ref": "#/definitions/domain.User"
              }
            ]
          },
          "currency": {
            "$ref": "#/definitions/domain.CurrencyCode"
          },
          "currency_code": {
            "type": "string"
          },
          "custom_fields": {
            "type": "object"
          },
          "date": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "location": {
            "$ref": "#/definitions/domain.Location"
          },
          "location_id": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "payment_mode": {
            "$ref": "#/definitions/domain.PaymentMode"
          },
          "payment_mode_id": {
            "type": "string"
          },
          "reference_no": {
            "type": "string"
          },
          "referrer": {
            "$ref": "#/definitions/domain.Cheque"
          },
          "referrer_id": {
            "type": "string"
          },
          "referrer_source": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "object"
          },
          "status": {
            "$ref": "#/definitions/types.Status"
          },
          "tds_account": {
            "$ref": "#/definitions/domain.Account"
          },
          "tds_account_id": {
            "type": "string"
          },
          "tds_amount": {
            "type": "number"
          },
          "tds_sub_account": {
            "$ref": "#/definitions/domain.SubAccount"
          },
          "tds_sub_account_id": {
            "type": "string"
          },
          "tds_type": {
            "$ref": "#/definitions/domain.TdsType"
          },
          "tds_type_id": {
            "type": "string"
          },
          "updated_by": {
            "$ref": "#/definitions/domain.User"
          },
          "updated_by_id": {
            "type": "string"
          },
          "void_at": {
            "type": "string"
          },
          "void_by": {
            "$ref": "#/definitions/domain.User"
          },
          "void_by_id": {
            "type": "string"
          },
          "void_reason": {
            "type": "string"
          }
        }
      },
      "domain.Table": {
        "type": "object",
        "properties": {
          "area": {
            "$ref": "#/definitions/domain.Area"
          },
          "capacity": {
            "type": "integer"
          },
          "created_at": {
            "type": "string"
          },
          "created_by": {
            "$ref": "#/definitions/domain.User"
          },
          "fill": {
            "type": "string"
          },
          "height": {
            "type": "number"
          },
          "id": {
            "type": "string"
          },
          "inactive": {
            "type": "boolean"
          },
          "inactive_at": {
            "type": "string"
          },
          "inactive_by": {
            "$ref": "#/definitions/domain.User"
          },
          "inactive_by_id": {
            "type": "string"
          },
          "modified_by": {
            "$ref": "#/definitions/domain.User"
          },
          "name": {
            "type": "string"
          },
          "order": {
            "$ref": "#/definitions/domain.SalesOrder"
          },
          "order_id": {
            "type": "string"
          },
          "shape": {
            "$ref": "#/definitions/types.TableShape"
          },
          "width": {
            "type": "number"
          },
          "x": {
            "type": "number"
          },
          "y": {
            "type": "number"
          }
        }
      },
      "domain.Task": {
        "type": "object",
        "properties": {
          "assign_to": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/domain.TaskUser"
            }
          },
          "created_at": {
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "creator": {
            "description": "TODO: make it created_by",
            "allOf": [
              {
                "$ref": "#/definitions/domain.User"
              }
            ]
          },
          "description": {
            "type": "string"
          },
          "due_date": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "inactive": {
            "type": "boolean"
          },
          "inactive_at": {
            "type": "string"
          },
          "inactive_by": {
            "$ref": "#/definitions/domain.User"
          },
          "inactive_by_id": {
            "type": "string"
          },
          "last_done_at": {
            "type": "string"
          },
          "priority": {
            "$ref": "#/definitions/types.TaskPriority"
          },
          "privacy": {
            "description": "private public",
            "allOf": [
              {
                "$ref": "#/definitions/types.TaskPrivacy"
              }
            ]
          },
          "source": {
  
          },
          "source_id": {
            "type": "string"
          },
          "source_type": {
            "$ref": "#/definitions/types.Source"
          },
          "status": {
            "$ref": "#/definitions/types.TaskStatus"
          },
          "task_type": {
            "$ref": "#/definitions/domain.TaskType"
          },
          "task_type_id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "updated_by": {
            "$ref": "#/definitions/domain.User"
          },
          "updated_by_id": {
            "type": "string"
          }
        }
      },
      "domain.TaskType": {
        "type": "object",
        "properties": {
          "color_code": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "creator": {
            "description": "TODO: make it created_by",
            "allOf": [
              {
                "$ref": "#/definitions/domain.User"
              }
            ]
          },
          "id": {
            "type": "string"
          },
          "inactive": {
            "type": "boolean"
          },
          "inactive_at": {
            "type": "string"
          },
          "inactive_by": {
            "$ref": "#/definitions/domain.User"
          },
          "inactive_by_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "name_lower": {
            "type": "string"
          },
          "order_number": {
            "type": "integer"
          },
          "updated_by": {
            "$ref": "#/definitions/domain.User"
          },
          "updated_by_id": {
            "type": "string"
          }
        }
      },
      "domain.TaskUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "task": {
            "$ref": "#/definitions/domain.Task"
          },
          "task_id": {
            "type": "string"
          },
          "user": {
            "$ref": "#/definitions/domain.User"
          },
          "user_id": {
            "type": "string"
          }
        }
      },
      "domain.TdsType": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "creator": {
            "description": "TODO: make it created_by",
            "allOf": [
              {
                "$ref": "#/definitions/domain.User"
              }
            ]
          },
          "id": {
            "type": "string"
          },
          "inactive": {
            "type": "boolean"
          },
          "inactive_at": {
            "type": "string"
          },
          "inactive_by": {
            "$ref": "#/definitions/domain.User"
          },
          "inactive_by_id": {
            "type": "string"
          },
          "modified_by": {
            "$ref": "#/definitions/domain.User"
          },
          "name": {
            "type": "string"
          },
          "name_lower": {
            "type": "string"
          },
          "updated_by": {
            "$ref": "#/definitions/domain.User"
          },
          "updated_by_id": {
            "type": "string"
          }
        }
      },
      "domain.Token": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string"
          },
          "refresh_token": {
            "type": "string"
          }
        }
      },
      "domain.Transaction": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/definitions/domain.Account"
          },
          "account_id": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "amount_type": {
            "$ref": "#/definitions/types.TxnType"
          },
          "approved_at": {
            "type": "string"
          },
          "channel": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "conversion_rate": {
            "type": "number"
          },
          "corresponding_account": {
            "$ref": "#/definitions/domain.Account"
          },
          "cr_amount": {
            "type": "number"
          },
          "cr_npr_amount": {
            "type": "number"
          },
          "currency": {
            "$ref": "#/definitions/domain.CurrencyCode"
          },
          "currency_code": {
            "type": "string"
          },
          "date": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "dr_amount": {
            "type": "number"
          },
          "dr_npr_amount": {
            "type": "number"
          },
          "due_date": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "location": {
            "$ref": "#/definitions/domain.Location"
          },
          "location_id": {
            "type": "string"
          },
          "month_ad": {
            "type": "integer"
          },
          "month_bs": {
            "type": "integer"
          },
          "note": {
            "type": "string"
          },
          "npr_amount": {
            "type": "number"
          },
          "reconciliation_id": {
            "type": "string"
          },
          "reference_no": {
            "type": "string"
          },
          "source_id": {
            "type": "string"
          },
          "source_type": {
            "$ref": "#/definitions/types.TxnSource"
          },
          "status": {
            "$ref": "#/definitions/types.Status"
          },
          "sub_account": {
            "$ref": "#/definitions/domain.SubAccount"
          },
          "sub_account_id": {
            "type": "string"
          },
          "year_ad": {
            "type": "integer"
          },
          "year_bs": {
            "type": "integer"
          }
        }
      },
      "domain.TransactionAllocation": {
        "type": "object",
        "properties": {
          "allocated_total": {
            "type": "number"
          },
          "code": {
            "type": "string"
          },
          "contact": {
            "$ref": "#/definitions/domain.Contact"
          },
          "contact_id": {
            "type": "string"
          },
          "contact_type": {
            "$ref": "#/definitions/types.ContactType"
          },
          "date": {
            "type": "string"
          },
          "due_date": {
            "type": "string"
          },
          "gl_transaction_id": {
            "type": "string"
          },
          "gltransaction": {
            "$ref": "#/definitions/domain.Transaction"
          },
          "id": {
            "type": "string"
          },
          "is_allocator": {
            "type": "boolean"
          },
          "remaining_amount": {
            "type": "number"
          },
          "source_id": {
            "type": "string"
          },
          "source_total": {
            "type": "number"
          },
          "source_type": {
            "$ref": "#/definitions/types.TxnSource"
          },
          "status": {
            "$ref": "#/definitions/types.Status"
          }
        }
      },
      "domain.TransactionCustomField": {
        "type": "object",
        "properties": {
          "custom_field": {
            "$ref": "#/definitions/domain.CustomField"
          },
          "id": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "domain.TransactionReportingTag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "domain.UpgradeCredential": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "expiry_timestamp": {
            "type": "integer"
          },
          "hash": {
            "type": "string"
          },
          "identity": {
            "type": "string"
          }
        }
      },
      "domain.User": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "date_of_birth": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "image": {
            "type": "string"
          },
          "inactive": {
            "type": "boolean"
          },
          "inactive_at": {
            "type": "string"
          },
          "inactive_by": {
            "$ref": "#/definitions/domain.User"
          },
          "inactive_by_id": {
            "type": "string"
          },
          "is_admin": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          },
          "preview_link": {
            "type": "string"
          },
          "state": {
            "$ref": "#/definitions/types.UserSyncState"
          },
          "thumbnail_link": {
            "type": "string"
          },
          "view_link": {
            "type": "string"
          }
        }
      },
      "domain.UserInfo": {
        "type": "object",
        "properties": {
          "location_permissions": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/domain.LocationPermission"
            }
          },
          "permissions": {
            "type": "object"
          },
          "user": {
  
          }
        }
      },
      "domain.UserInvitation": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string"
          },
          "created_by": {
            "$ref": "#/definitions/domain.User"
          },
          "id": {
            "type": "string"
          },
          "inactive": {
            "type": "boolean"
          },
          "inactive_at": {
            "type": "string"
          },
          "inactive_by": {
            "$ref": "#/definitions/domain.User"
          },
          "inactive_by_id": {
            "type": "string"
          },
          "location_permissions": {
            "type": "object"
          },
          "namespace_slug": {
            "type": "string"
          },
          "permissions": {
            "type": "object"
          },
          "responded_at": {
            "type": "string"
          },
          "state": {
            "$ref": "#/definitions/types.InvitationSyncState"
          },
          "status": {
            "$ref": "#/definitions/types.InvitationStatusType"
          },
          "user_email": {
            "type": "string"
          }
        }
      },
      "domain.VariantAttribute": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "creator": {
            "description": "TODO: make it created_by",
            "allOf": [
              {
                "$ref": "#/definitions/domain.User"
              }
            ]
          },
          "id": {
            "type": "string"
          },
          "inactive": {
            "type": "boolean"
          },
          "inactive_at": {
            "type": "string"
          },
          "inactive_by": {
            "$ref": "#/definitions/domain.User"
          },
          "inactive_by_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/domain.VariantOption"
            }
          },
          "updated_by": {
            "$ref": "#/definitions/domain.User"
          },
          "updated_by_id": {
            "type": "string"
          }
        }
      },
      "domain.VariantOption": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "inactive": {
            "type": "boolean"
          },
          "inactive_at": {
            "type": "string"
          },
          "inactive_by": {
            "$ref": "#/definitions/domain.User"
          },
          "inactive_by_id": {
            "type": "string"
          },
          "option": {
            "type": "string"
          }
        }
      },
      "domain.Warehouse": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "creator": {
            "description": "TODO: make it created_by",
            "allOf": [
              {
                "$ref": "#/definitions/domain.User"
              }
            ]
          },
          "id": {
            "type": "string"
          },
          "inactive": {
            "type": "boolean"
          },
          "inactive_at": {
            "type": "string"
          },
          "inactive_by": {
            "$ref": "#/definitions/domain.User"
          },
          "inactive_by_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "updated_by": {
            "$ref": "#/definitions/domain.User"
          },
          "updated_by_id": {
            "type": "string"
          }
        }
      },
      "domain.WarehouseTransfer": {
        "type": "object",
        "properties": {
          "action_by": {
            "$ref": "#/definitions/domain.User"
          },
          "approved_at": {
            "type": "string"
          },
          "approved_by_id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "creator": {
            "description": "TODO: make it created_by",
            "allOf": [
              {
                "$ref": "#/definitions/domain.User"
              }
            ]
          },
          "custom_fields": {
            "type": "object"
          },
          "date": {
            "type": "string"
          },
          "destination_warehouse": {
            "$ref": "#/definitions/domain.Warehouse"
          },
          "destination_warehouse_id": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "items": {
            "type": "object"
          },
          "location_id": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "reference_no": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "object"
          },
          "source_warehouse": {
            "$ref": "#/definitions/domain.Warehouse"
          },
          "source_warehouse_id": {
            "type": "string"
          },
          "status": {
            "$ref": "#/definitions/types.Status"
          },
          "updated_by": {
            "$ref": "#/definitions/domain.User"
          },
          "updated_by_id": {
            "type": "string"
          },
          "void_at": {
            "type": "string"
          },
          "void_by": {
            "$ref": "#/definitions/domain.User"
          },
          "void_by_id": {
            "type": "string"
          },
          "void_reason": {
            "type": "string"
          }
        }
      },
      "handler.DeleteReqDataType": {
        "type": "object",
        "properties": {
          "account_id": {
            "type": "string"
          },
          "statements": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "handler.bankReconciliationData": {
        "type": "object",
        "required": [
          "account_id"
        ],
        "properties": {
          "account_id": {
            "type": "string"
          },
          "all": {
            "type": "boolean"
          },
          "bs_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tx_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "service.OrderStatsResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number"
          },
          "count": {
            "type": "string"
          }
        }
      },
      "service.Payment": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "$ref": "#/definitions/types.PaymentModeType"
          }
        }
      },
      "service.PaymentGroup": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number"
          },
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/service.Payment"
            }
          },
          "type": {
            "$ref": "#/definitions/types.PaymentModeType"
          }
        }
      },
      "service.PaymentResponse": {
        "type": "object",
        "properties": {
          "card": {
            "type": "number"
          },
          "cash": {
            "type": "number"
          },
          "credit": {
            "type": "number"
          },
          "delivery": {
            "type": "number"
          },
          "e_payment": {
            "type": "number"
          },
          "other": {
            "type": "number"
          }
        }
      },
      "service.SaleDashboardResponse": {
        "type": "object",
        "properties": {
          "total_amount": {
            "type": "number"
          },
          "total_cash_amount": {
            "type": "number"
          },
          "total_credit_amount": {
            "type": "number"
          }
        }
      },
      "service.SaleGraph": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number"
          },
          "cumulative_amount": {
            "type": "number"
          },
          "label": {
            "type": "string"
          }
        }
      },
      "service.SessionInvoiceResponse": {
        "type": "object",
        "properties": {
          "discount_amount": {
            "type": "number"
          },
          "grand_total_amount": {
            "type": "number"
          },
          "non_taxable_amount": {
            "type": "number"
          },
          "refund_grand_total_amount": {
            "type": "number"
          },
          "service_charge": {
            "type": "number"
          },
          "taxable_amount": {
            "type": "number"
          },
          "total_amount": {
            "type": "number"
          },
          "vat_amount": {
            "type": "number"
          }
        }
      },
      "service.SessionPaymentResponse": {
        "type": "object",
        "properties": {
          "card": {
            "$ref": "#/definitions/service.PaymentGroup"
          },
          "cash": {
            "$ref": "#/definitions/service.PaymentGroup"
          },
          "credit": {
            "$ref": "#/definitions/service.PaymentGroup"
          },
          "delivery": {
            "$ref": "#/definitions/service.PaymentGroup"
          },
          "e_payment": {
            "$ref": "#/definitions/service.PaymentGroup"
          },
          "other": {
            "$ref": "#/definitions/service.PaymentGroup"
          }
        }
      },
      "service.TopProduct": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "types.AccountClass": {
        "type": "string",
        "enum": [
          "Assets",
          "Liability",
          "Equity",
          "Income",
          "Expenses"
        ],
        "x-enum-varnames": [
          "AssetsAccountClass",
          "LiabilityAccountClass",
          "EquityAccountClass",
          "IncomeAccountClass",
          "ExpensesAccountClass"
        ]
      },
      "types.AccountType": {
        "type": "string",
        "enum": [
          "Bank",
          "Cash",
          "Customer",
          "Supplier",
          "Normal"
        ],
        "x-enum-varnames": [
          "BankAccountType",
          "CashAccountType",
          "CustomerAccountType",
          "SupplierAccountType",
          "NormalAccountType"
        ]
      },
      "types.AuditActionType": {
        "type": "string",
        "enum": [
          "CREATE",
          "UPDATE",
          "DELETE",
          "APPROVE",
          "VOID",
          "INACTIVE",
          "ACTIVE",
          "COMMENT"
        ],
        "x-enum-varnames": [
          "AUDIT_ACTION_TYPE_CREATE",
          "AUDIT_ACTION_TYPE_UPDATE",
          "AUDIT_ACTION_TYPE_DELETE",
          "AUDIT_ACTION_TYPE_APPROVE",
          "AUDIT_ACTION_TYPE_VOID",
          "AUDIT_ACTION_TYPE_INACTIVE",
          "AUDIT_ACTION_TYPE_ACTIVE",
          "AUDIT_ACTION_TYPE_COMMENT"
        ]
      },
      "types.CashAndBankAccountType": {
        "type": "string",
        "enum": [
          "SAVING",
          "CURRENT"
        ],
        "x-enum-varnames": [
          "SavingAccountType",
          "CurrentAccountType"
        ]
      },
      "types.ChequeTransactionType": {
        "type": "string",
        "enum": [
          "Received",
          "Issued"
        ],
        "x-enum-varnames": [
          "ChequeReceived",
          "ChequeIssued"
        ]
      },
      "types.ContactType": {
        "type": "string",
        "enum": [
          "Customer",
          "Supplier",
          "Lead",
          "Contact"
        ],
        "x-enum-varnames": [
          "CustomerContactType",
          "SupplierContactType",
          "LeadContactType",
          "ContactContactType"
        ]
      },
      "types.DealStatusType": {
        "type": "string",
        "enum": [
          "Pending",
          "Won",
          "Lost"
        ],
        "x-enum-varnames": [
          "PendingDealStatusType",
          "WonDealStatusType",
          "LostDealStatusType"
        ]
      },
      "types.DiscountType": {
        "type": "string",
        "enum": [
          "Amount",
          "Percent"
        ],
        "x-enum-varnames": [
          "AmountDiscountType",
          "PercentDiscountType"
        ]
      },
      "types.ExportCollectionType": {
        "type": "string",
        "enum": [
          "Customer",
          "Supplier",
          "Contact",
          "Product",
          "Account",
          "Opening Balance"
        ],
        "x-enum-varnames": [
          "CustomerExportCollectionType",
          "SupplierExportCollectionType",
          "ContactExportCollectionType",
          "ProductExportCollectionType",
          "AccountExportCollectionType",
          "OpeningBalanceExportCollectionType"
        ]
      },
      "types.FieldType": {
        "type": "string",
        "enum": [
          "text",
          "number",
          "description",
          "choice",
          "lookup"
        ],
        "x-enum-varnames": [
          "TextFieldType",
          "NumberFieldType",
          "DescriptionFieldType",
          "ChoicesFieldType",
          "LookupFieldType"
        ]
      },
      "types.ForCashAndBankAccount": {
        "type": "string",
        "enum": [
          "Cash",
          "Bank"
        ],
        "x-enum-varnames": [
          "CashOfCashAndBankAccount",
          "BankOfCashAndBankAccount"
        ]
      },
      "types.GeneralSettingType": {
        "type": "string",
        "enum": [
          "location_enabled",
          "crossed_credit_limit",
          "discount_method",
          "multiple_warehouse_enabled",
          "multiple_currency_enabled",
          "default_currency",
          "negative_cash_balance",
          "negative_stock_balance",
          "service_charge_applicable",
          "is_service_charge_applicable",
          "service_charge_rate",
          "default_tab",
          "estimate_bill",
          "invoice",
          "credit_note",
          "kot_print",
          "subscription",
          "cbms",
          "suggest_selling_price"
        ],
        "x-enum-comments": {
          "MultipleCurrencyEnabledGeneralSettingType": "TODO: Remove this",
          "MultipleWarehouseEnabledGeneralSettingType": "TODO: Remove this"
        },
        "x-enum-varnames": [
          "LocationEnabledGeneralSettingType",
          "CrossedCreditLimitGeneralSettingType",
          "DiscountMethodGeneralSettingType",
          "MultipleWarehouseEnabledGeneralSettingType",
          "MultipleCurrencyEnabledGeneralSettingType",
          "DefaultCurrencyGeneralSettingType",
          "NegativeCashBalanceGeneralSettingType",
          "NegativeStockBalanceGeneralSettingType",
          "ServiceChargeApplicableGeneralSettingType",
          "IsServiceChargeApplicableGeneralSettingType",
          "ServiceChargeRateGeneralSettingType",
          "DefaultTabGeneralSettingType",
          "EstimateBillGeneralSettingType",
          "AbbreviatedTaxInvoiceGeneralSettingType",
          "TokenPrintGeneralSettingType",
          "KOTPrintGeneralSettingType",
          "SubscriptionGeneralSettingType",
          "CbmsGeneralSettingType",
          "SuggestSellingPriceSettingType"
        ]
      },
      "types.InactiveSourceType": {
        "type": "string",
        "enum": [
          "Contact",
          "ContactGroup",
          "Opportunity",
          "AdditionalCostTerm",
          "Attachment",
          "Bank",
          "Location",
          "CreditTerm",
          "Currency",
          "CustomField",
          "CustomOrder",
          "DealCampaign",
          "DealStage",
          "DeliveryPartner",
          "LeadSource",
          "PaymentMode",
          "ProductService",
          "ProductCategory",
          "ReportingTags",
          "Task",
          "TaskType",
          "TdsType",
          "Warehouse",
          "Account",
          "BankAccount",
          "AccountGroup",
          "Barcode",
          "VariantAttribute",
          "VariantOption",
          "MeasurementUnit",
          "SecondaryUnit",
          "Area",
          "Table",
          "Cheque",
          "ProductionExpenseTerm",
          "PrintProfile",
          "AlertScheduler"
        ],
        "x-enum-varnames": [
          "ContactInactiveSourceType",
          "ContactGroupInactiveSourceType",
          "OpportunityInactiveSourceType",
          "AdditionalCostTermInactiveSourceType",
          "AttachmentInactiveSourceType",
          "BankInactiveSourceType",
          "LocationInactiveSourceType",
          "CreditTermInactiveSourceType",
          "CurrencyInactiveSourceType",
          "CustomFieldInactiveSourceType",
          "CustomOrderInactiveSourceType",
          "DealCampaignInactiveSourceType",
          "DealStageInactiveSourceType",
          "DeliveryPartnerInactiveSourceType",
          "LeadSourceInactiveSourceType",
          "PaymentModeInactiveSourceType",
          "ProductInactiveSourceType",
          "ProductCategoryInactiveSourceType",
          "ReportingTagsInactiveSourceType",
          "TaskInactiveSourceType",
          "TaskTypeInactiveSourceType",
          "TdsTypeInactiveSourceType",
          "WarehouseInactiveSourceType",
          "AccountInactiveSourceType",
          "BankAccountInactiveSourceType",
          "AccountGroupInactiveSourceType",
          "BarcodeInactiveSourceType",
          "VariantAttributeInactiveSourceType",
          "VariantOptionInactiveSourceType",
          "MeasurementUnitInactiveSourceType",
          "SecondarUnitInactiveSourceType",
          "AreaInactiveSourceType",
          "TableInactiveSourceType",
          "ChequeInactiveSourceType",
          "ProductionExpenseTermInactiveSourceType",
          "PrintProfileInactiveSourceType",
          "AlertSchedulerInactiveSourceType"
        ]
      },
      "types.InvitationStatusType": {
        "type": "string",
        "enum": [
          "Accepted",
          "Pending",
          "Rejected"
        ],
        "x-enum-varnames": [
          "AcceptedInvitationStatusType",
          "PendingInvitationStatusType",
          "RejectedInvitationStatusType"
        ]
      },
      "types.InvitationSyncState": {
        "type": "string",
        "enum": [
          "InvitationCreated",
          "InvitationRemoved"
        ],
        "x-enum-varnames": [
          "InvitationCreated",
          "InvitationRemoved"
        ]
      },
      "types.LabelType": {
        "type": "string",
        "enum": [
          "QuickPayment",
          "QuickReceipt",
          "CustomerPayment",
          "CreditNote",
          "Invoice",
          "CashTransfer",
          "Expense",
          "DebitNote",
          "JournalVoucher",
          "PurchaseBill",
          "PurchaseOrder",
          "Quotation",
          "SalesOrder",
          "WarehouseTransfer",
          "InventoryAdjustment",
          "SupplierPayment"
        ],
        "x-enum-varnames": [
          "QuickPaymentLabelType",
          "QuickReceiptLabelType",
          "CustomerPaymentLabelType",
          "CreditNoteLabelType",
          "InvoiceLabelType",
          "CashTransferLabelType",
          "ExpenseLabelType",
          "DebitNoteLabelType",
          "JournalVoucherLabelType",
          "PurchaseBillLabelType",
          "PurchaseOrderLabelType",
          "QuotationLabelType",
          "SalesOrderLabelType",
          "WarehouseTransferLabelType",
          "InventoryAdjustmentLabelType",
          "SupplierPaymentLabelType"
        ]
      },
      "types.LocationType": {
        "type": "string",
        "enum": [
          "Bar",
          "Retail"
        ],
        "x-enum-varnames": [
          "BarLocationType",
          "RetailLocationType"
        ]
      },
      "types.OrderType": {
        "type": "string",
        "enum": [
          "Dine In",
          "Take Away",
          "Delivery",
          "Retail"
        ],
        "x-enum-varnames": [
          "DineIn",
          "TakeAway",
          "Delivery",
          "Retail"
        ]
      },
      "types.OrgSyncState": {
        "type": "string",
        "enum": [
          "OrgEdited"
        ],
        "x-enum-varnames": [
          "OrgEdited"
        ]
      },
      "types.PaymentModeType": {
        "type": "string",
        "enum": [
          "Credit",
          "Cash",
          "Card",
          "E-Payment",
          "Delivery",
          "Other"
        ],
        "x-enum-varnames": [
          "CreditPaymentModeType",
          "CashPaymentModeType",
          "CardPaymentModeType",
          "EPaymentModeType",
          "DeliveryModeType",
          "OtherPaymentModeType"
        ]
      },
      "types.PrivacyType": {
        "type": "string",
        "enum": [
          "PRIVATE",
          "PUBLIC"
        ],
        "x-enum-varnames": [
          "PrivatePrivacyType",
          "PublicPrivacyType"
        ]
      },
      "types.SearchEntity": {
        "type": "string",
        "enum": [
          "Purchase Order",
          "Supplier Payment",
          "Quotation",
          "Sales Order",
          "Invoice",
          "Credit Note",
          "Customer Payment",
          "Expense",
          "Debit Note",
          "Purchase Bill",
          "Inventory Adjustment",
          "Warehouse Transfer",
          "Contact",
          "Opportunity",
          "Task",
          "Account",
          "Bank",
          "Product"
        ],
        "x-enum-varnames": [
          "SearchSourcePurchaseOrder",
          "SearchSourceSupplierPayment",
          "SearchSourceQuotation",
          "SearchSourceSalesOrder",
          "SearchSourceInvoice",
          "SearchSourceCreditNote",
          "SearchSourceCustomerPayment",
          "SearchSourceExpense",
          "SearchSourceDebitNote",
          "SearchSourcePurchaseBill",
          "SearchSourceInventoryAdjustment",
          "SearchSourceWarehouseTransfer",
          "SearchContact",
          "SearchOpportunity",
          "SearchTask",
          "SearchAccount",
          "SearchBank",
          "SearchProduct"
        ]
      },
      "types.SessionStatus": {
        "type": "string",
        "enum": [
          "In Progress",
          "Closed"
        ],
        "x-enum-varnames": [
          "InProgressSessionStatus",
          "ClosedSessionStatus"
        ]
      },
      "types.Source": {
        "type": "string",
        "enum": [
          "SupplierPayment",
          "CustomerPayment",
          "CreditNote",
          "BankAccount",
          "QuickReceipt",
          "QuickPayment",
          "CashTransfer",
          "JournalVoucher",
          "ProductService",
          "WarehouseAdjustment",
          "WarehouseTransfer",
          "PurchaseBill",
          "DebitNote",
          "SalesOrder",
          "PurchaseOrder",
          "OpeningBalance",
          "Quotation",
          "Contact",
          "ContactGroup",
          "Opportunity",
          "Tasks",
          "Expense",
          "Account",
          "AccountGroup",
          "Invoice",
          "Attachment",
          "ProductVariant",
          "Session",
          "MeasurementUnit",
          "ProductCategory",
          "Product",
          "VariantAttribute",
          "Comment",
          "Cheque",
          "ProductionJournal",
          "ProductionOrder",
          "BillOfMaterial",
          "AlertScheduler"
        ],
        "x-enum-varnames": [
          "SourceCompactSupplierPayment",
          "SourceCompactCustomerPayment",
          "SourceCompactCreditNote",
          "SourceCompactBankAccount",
          "SourceCompactQuickReceipt",
          "SourceCompactQuickPayment",
          "SourceCompactCashTransfer",
          "SourceCompactJournalVoucher",
          "SourceCompactProductService",
          "SourceCompactInventoryAdjustment",
          "SourceCompactWarehouseTransfer",
          "SourceCompactPurchaseBill",
          "SourceCompactDebitNote",
          "SourceCompactSalesOrder",
          "SourceCompactPurchaseOrder",
          "SourceCompactOpeningBalance",
          "SourceCompactQuotation",
          "SourceCompactContact",
          "SourceCompactContactGroup",
          "SourceCompactOpportunity",
          "SourceCompactTask",
          "SourceCompactExpense",
          "SourceCompactAccount",
          "SourceCompactAccountGroup",
          "SourceCompactInvoice",
          "SourceCompactAttachment",
          "SourceCompactProductVariant",
          "SourceCompactSession",
          "SourceCompactMeasurementUnit",
          "SourceCompactProductCategory",
          "SourceCompactProduct",
          "SourceCompactVariantAttribute",
          "SourceCompactComment",
          "SourceCompactCheque",
          "SourceCompactProductionJournal",
          "SourceCompactProductionOrder",
          "SourceCompactBillofMaterial",
          "SourceAlertScheduler"
        ]
      },
      "types.Status": {
        "type": "string",
        "enum": [
          "Draft",
          "Approved",
          "Void"
        ],
        "x-enum-varnames": [
          "Draft",
          "Approved",
          "Void"
        ]
      },
      "types.StatusType": {
        "type": "string",
        "enum": [
          "Pending",
          "Done"
        ],
        "x-enum-varnames": [
          "PendingStatusType",
          "DoneStatusType"
        ]
      },
      "types.TableShape": {
        "type": "string",
        "enum": [
          "Rectangle",
          "Circle"
        ],
        "x-enum-varnames": [
          "RectangleTableShape",
          "CircleTableShape"
        ]
      },
      "types.TaskPriority": {
        "type": "string",
        "enum": [
          "Normal",
          "Low",
          "Urgent"
        ],
        "x-enum-varnames": [
          "Normal",
          "Low",
          "Urgent"
        ]
      },
      "types.TaskPrivacy": {
        "type": "string",
        "enum": [
          "Public",
          "Private"
        ],
        "x-enum-varnames": [
          "Public",
          "Private"
        ]
      },
      "types.TaskStatus": {
        "type": "string",
        "enum": [
          "Pending",
          "Started",
          "Done"
        ],
        "x-enum-varnames": [
          "Pending",
          "Started",
          "Done"
        ]
      },
      "types.TaxType": {
        "type": "string",
        "enum": [
          "NO_VAT",
          "0 VAT",
          "13 VAT"
        ],
        "x-enum-varnames": [
          "NoTaxType",
          "ZeroTaxType",
          "ThirteenTaxType"
        ]
      },
      "types.ThumbnailName": {
        "type": "string",
        "enum": [
          "printing_thumb_invoice_receipt.jpg",
          "printing_thumb_minimal.jpg",
          "printing_thumb_modern.jpg",
          "printing_thumb_standard.jpg",
          "printing_thumb_traditional.jpg",
          "printing_thumb_classic.jpg"
        ],
        "x-enum-varnames": [
          "ThumbnailReceipt",
          "ThumbnailMinimal",
          "ThumbnailModern",
          "ThumbnailStandard",
          "ThumbnailTraditional",
          "ThumbnailClassic"
        ]
      },
      "types.TreeDataType": {
        "type": "string",
        "enum": [
          "Root",
          "Account Class",
          "Account Group",
          "Account"
        ],
        "x-enum-varnames": [
          "RootTreeDataType",
          "AccountClassTreeDataType",
          "AccountGroupTreeDataType",
          "AccountTreeDataType"
        ]
      },
      "types.TxnSource": {
        "type": "string",
        "enum": [
          "Journal Voucher",
          "Cash Transfer",
          "Quick Payment",
          "Quick Receipt",
          "Purchase Order",
          "Supplier Payment",
          "Quotation",
          "Sales Order",
          "Invoice",
          "Credit Note",
          "Customer Payment",
          "Expense",
          "Debit Note",
          "Purchase Bill",
          "Inventory Adjustment",
          "Warehouse Transfer",
          "Opening Balance",
          "Production Journal",
          "Production Order",
          "Bill Of Material"
        ],
        "x-enum-varnames": [
          "SourceJournalVoucher",
          "SourceCashTransfer",
          "SourceQuickPayment",
          "SourceQuickReceipt",
          "SourcePurchaseOrder",
          "SourceSupplierPayment",
          "SourceQuotation",
          "SourceSalesOrder",
          "SourceInvoice",
          "SourceCreditNote",
          "SourceCustomerPayment",
          "SourceExpense",
          "SourceDebitNote",
          "SourcePurchaseBill",
          "SourceInventoryAdjustment",
          "SourceWarehouseTransfer",
          "SourceOpeningBalance",
          "SourceProductionJournal",
          "SourceProductionOrder",
          "SourceBillofMaterial"
        ]
      },
      "types.TxnType": {
        "type": "string",
        "enum": [
          "DR",
          "CR"
        ],
        "x-enum-varnames": [
          "Debit",
          "Credit"
        ]
      },
      "types.UserSyncState": {
        "type": "string",
        "enum": [
          "UserRemoved"
        ],
        "x-enum-varnames": [
          "UserRemoved"
        ]
      },
      "types.Vat": {
        "type": "string",
        "enum": [
          "Inclusive",
          "Exclusive"
        ],
        "x-enum-varnames": [
          "InclusiveVat",
          "ExclusiveVat"
        ]
      },
      "types.VatType": {
        "type": "string",
        "enum": [
          "SALES",
          "PURCHASE"
        ],
        "x-enum-varnames": [
          "SalesVatType",
          "PurchaseVatType"
        ]
      },
      "view.AccountCreateView": {
        "type": "object",
        "required": [
          "account_groups"
        ],
        "properties": {
          "account_groups": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.AccountGroupView"
            }
          }
        }
      },
      "view.AccountGroupView": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "parent_id": {
            "type": "string"
          }
        }
      },
      "view.AccountItemView": {
        "type": "object",
        "properties": {
          "account_id": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "description": {
            "type": "string"
          },
          "sub_account_id": {
            "type": "string"
          }
        }
      },
      "view.AccountOpeningBalanceRequest": {
        "type": "object",
        "properties": {
          "account_id": {
            "type": "string"
          },
          "conversion_rate": {
            "type": "number"
          },
          "currency_code": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "location_id": {
            "type": "string"
          },
          "opening_balance": {
            "type": "number"
          },
          "opening_balance_type": {
            "$ref": "#/definitions/types.TxnType"
          },
          "reporting_tags": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.IdValue"
            }
          },
          "sub_account_id": {
            "type": "string"
          }
        }
      },
      "view.AccountView": {
        "type": "object",
        "properties": {
          "account_group_id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 3
          }
        }
      },
      "view.AccountingView": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "account_id": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "attachment_id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "conversion_rate": {
            "type": "number"
          },
          "currency_code": {
            "type": "string"
          },
          "custom_fields": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.IdValue"
            }
          },
          "date": {
            "type": "string"
          },
          "items": {
            "type": "array",
            "minItems": 1,
            "items": {
              "$ref": "#/definitions/view.AccountItemView"
            }
          },
          "location_id": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "overrides": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "reference_no": {
            "type": "string"
          },
          "referrer_id": {
            "type": "string"
          },
          "referrer_source": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.IdValue"
            }
          },
          "statement_id": {
            "type": "string"
          },
          "sub_account_id": {
            "type": "string"
          }
        }
      },
      "view.ActivityLogFilterParams": {
        "type": "object",
        "required": [
          "from_date",
          "to_date"
        ],
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "channel": {
            "type": "string"
          },
          "from_date": {
            "type": "string"
          },
          "is_date_bs": {
            "type": "boolean"
          },
          "is_export": {
            "type": "boolean"
          },
          "location_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "report_id": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.ReportingTagFilterItem"
            }
          },
          "sources": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/types.Source"
            }
          },
          "to_date": {
            "type": "string"
          },
          "user_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "view.AddAttributeRequest": {
        "type": "object",
        "properties": {
          "attributes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "variant_id": {
            "type": "string"
          }
        }
      },
      "view.AddBarcodeRequest": {
        "type": "object",
        "properties": {
          "barcode": {
            "type": "string"
          },
          "conversion_rate": {
            "type": "number"
          },
          "measurement_unit_id": {
            "type": "string"
          },
          "purchase_price": {
            "type": "number"
          },
          "selling_price": {
            "type": "number"
          }
        }
      },
      "view.AddSecondaryUnitRequest": {
        "type": "object",
        "properties": {
          "conversion_rate": {
            "type": "number"
          },
          "measurement_unit_id": {
            "type": "string"
          },
          "purchase_price": {
            "type": "number"
          },
          "selling_price": {
            "type": "number"
          }
        }
      },
      "view.AddVariantProductRequest": {
        "type": "object",
        "required": [
          "code",
          "name"
        ],
        "properties": {
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.ProductAttributeView"
            }
          },
          "code": {
            "type": "string",
            "maxLength": 100
          },
          "name": {
            "type": "string",
            "maxLength": 100
          },
          "purchase_price": {
            "type": "number"
          },
          "selling_price": {
            "type": "number"
          },
          "track_inventory": {
            "type": "boolean"
          }
        }
      },
      "view.AdditionalCostSummaryFilterParams": {
        "type": "object",
        "properties": {
          "purchase_bill_id": {
            "type": "string"
          }
        }
      },
      "view.AdditionalCostTermView": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "value",
              "quantity"
            ]
          }
        }
      },
      "view.AdditionalCostView": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number"
          },
          "cost_term_id": {
            "type": "string"
          },
          "cr_account_id": {
            "type": "string"
          },
          "cr_sub_account_id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "dr_account_id": {
            "type": "string"
          },
          "dr_sub_account_id": {
            "type": "string"
          },
          "method": {
            "type": "string",
            "enum": [
              "manual",
              "quantity",
              "value",
              "tax_base"
            ]
          },
          "product_id": {
            "type": "string"
          },
          "row_id": {
            "type": "string"
          }
        }
      },
      "view.AllocationRecordView": {
        "type": "object",
        "properties": {
          "allocation_amount": {
            "type": "number"
          },
          "allocation_id": {
            "type": "string"
          }
        }
      },
      "view.AlterActiveSourceView": {
        "type": "object",
        "required": [
          "ids"
        ],
        "properties": {
          "ids": {
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string"
            }
          },
          "inactive": {
            "type": "boolean"
          },
          "type": {
            "$ref": "#/definitions/types.InactiveSourceType"
          }
        }
      },
      "view.AlterActiveView": {
        "type": "object",
        "required": [
          "ids"
        ],
        "properties": {
          "ids": {
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string"
            }
          },
          "inactive": {
            "type": "boolean"
          }
        }
      },
      "view.AlterAdminView": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "is_admin": {
            "type": "boolean"
          }
        }
      },
      "view.AlterCurrencyView": {
        "type": "object",
        "required": [
          "code_slug"
        ],
        "properties": {
          "code_slug": {
            "type": "string"
          },
          "inactive": {
            "type": "boolean"
          }
        }
      },
      "view.AmountRoundRequest": {
        "type": "object",
        "properties": {
          "account_id": {
            "type": "string"
          },
          "round_amount": {
            "type": "boolean"
          }
        }
      },
      "view.Annex13FilterParams": {
        "type": "object",
        "required": [
          "from_date",
          "to_date"
        ],
        "properties": {
          "contact_type": {
            "type": "string"
          },
          "from_date": {
            "type": "string"
          },
          "is_date_bs": {
            "type": "boolean"
          },
          "is_export": {
            "type": "boolean"
          },
          "report_id": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.ReportingTagFilterItem"
            }
          },
          "to_date": {
            "type": "string"
          }
        }
      },
      "view.Annex5FilterParams": {
        "type": "object",
        "required": [
          "from_date",
          "to_date"
        ],
        "properties": {
          "channel": {
            "type": "string"
          },
          "from_date": {
            "type": "string"
          },
          "is_date_bs": {
            "type": "boolean"
          },
          "is_export": {
            "type": "boolean"
          },
          "location_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "report_id": {
            "type": "string"
          },
          "to_date": {
            "type": "string"
          }
        }
      },
      "view.AreaView": {
        "type": "object",
        "properties": {
          "location_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "view.AttachmentCreate": {
        "type": "object",
        "required": [
          "file_size",
          "file_type",
          "file_url",
          "name"
        ],
        "properties": {
          "Source_id": {
            "type": "string"
          },
          "Source_type": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "file_size": {
            "type": "integer"
          },
          "file_type": {
            "type": "string"
          },
          "file_url": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "view.AttachmentDelete": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "view.AttachmentDownload": {
        "type": "object",
        "properties": {
          "file_name": {
            "type": "string"
          },
          "key": {
            "type": "string"
          }
        }
      },
      "view.AttachmentGroupMerge": {
        "type": "object",
        "properties": {
          "attachment_group_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "view.AttachmentGroupUpdate": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "label": {
            "description": "validate:\"oneof='SalesOrder' 'PurchaseOrder' 'Quotation' 'DebitNote' 'PurchaseBill' 'Expense' 'WarehouseTransfer' 'InventoryAdjustment' 'CustomerPayment' 'JournalVoucher' 'CashTransfer' 'QuickPayment' 'QuickReceipt' 'CreditNote' 'Invoice' 'SupplierPayment'\"`",
            "allOf": [
              {
                "$ref": "#/definitions/types.LabelType"
              }
            ]
          },
          "status": {
            "$ref": "#/definitions/types.StatusType"
          }
        }
      },
      "view.AttributeView": {
        "type": "object",
        "properties": {
          "option_ids": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string"
            }
          },
          "variant_id": {
            "type": "string"
          }
        }
      },
      "view.BalanceSheetFilterParams": {
        "type": "object",
        "required": [
          "from_date",
          "to_date"
        ],
        "properties": {
          "from_date": {
            "type": "string"
          },
          "hide_object_with_zero_closing_balance": {
            "type": "boolean"
          },
          "is_date_bs": {
            "type": "boolean"
          },
          "is_export": {
            "type": "boolean"
          },
          "report_id": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.ReportingTagFilterItem"
            }
          },
          "to_date": {
            "type": "string"
          }
        }
      },
      "view.BankAndCashBalanceSummary": {
        "type": "object",
        "properties": {
          "account_id": {
            "type": "string"
          },
          "balance": {
            "type": "number"
          },
          "bank_account_name": {
            "type": "string"
          },
          "bank_account_number": {
            "type": "string"
          },
          "bank_account_type": {
            "type": "string"
          },
          "bank_id": {
            "type": "string"
          },
          "bank_info": {
            "$ref": "#/definitions/domain.Bank"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "view.BankView": {
        "type": "object",
        "properties": {
          "logo": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "view.BarcodePrintReqView": {
        "type": "object",
        "properties": {
          "barcode_list": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/domain.BarcodeQty"
            }
          }
        }
      },
      "view.BillingLocationEditView": {
        "type": "object",
        "properties": {
          "billing_location_count": {
            "type": "integer"
          },
          "is_billing_location_enabled": {
            "type": "boolean"
          }
        }
      },
      "view.BulkProductView": {
        "type": "object",
        "required": [
          "code",
          "name",
          "track_inventory",
          "type"
        ],
        "properties": {
          "code": {
            "type": "string",
            "maxLength": 100
          },
          "description": {
            "type": "string"
          },
          "hs_code": {
            "type": "string",
            "maxLength": 20
          },
          "name": {
            "type": "string",
            "maxLength": 100
          },
          "primary_unit_id": {
            "type": "string"
          },
          "product_category_id": {
            "type": "string"
          },
          "purchase_account_id": {
            "type": "string"
          },
          "purchase_price": {
            "type": "number"
          },
          "purchase_return_account_id": {
            "type": "string"
          },
          "purchase_return_sub_account_id": {
            "type": "string"
          },
          "purchase_sub_account_id": {
            "type": "string"
          },
          "re_order_level": {
            "type": "number"
          },
          "sales_account_id": {
            "type": "string"
          },
          "sales_return_account_id": {
            "type": "string"
          },
          "sales_return_sub_account_id": {
            "type": "string"
          },
          "sales_sub_account_id": {
            "type": "string"
          },
          "selling_price": {
            "type": "number"
          },
          "tax": {
            "$ref": "#/definitions/types.TaxType"
          },
          "track_inventory": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "enum": [
              "Goods",
              "Service"
            ]
          },
          "valuation_method": {
            "type": "string"
          }
        }
      },
      "view.CashAndBankAccountView": {
        "type": "object",
        "properties": {
          "account_id": {
            "type": "string"
          },
          "account_name": {
            "type": "string"
          },
          "account_number": {
            "type": "string"
          },
          "account_type": {
            "$ref": "#/definitions/types.CashAndBankAccountType"
          },
          "bank_id": {
            "type": "string"
          },
          "branch": {
            "type": "string"
          },
          "branch_email": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "configurations": {
  
          },
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "$ref": "#/definitions/domain.BankConnected"
          },
          "type": {
            "enum": [
              "Cash",
              "Bank"
            ],
            "allOf": [
              {
                "$ref": "#/definitions/types.ForCashAndBankAccount"
              }
            ]
          }
        }
      },
      "view.CbmsConfigReqView": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "api_credit_note": {
            "type": "string"
          },
          "api_invoice": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "type": {
            "enum": [
              "cbms"
            ],
            "allOf": [
              {
                "$ref": "#/definitions/types.GeneralSettingType"
              }
            ]
          },
          "username": {
            "type": "string"
          }
        }
      },
      "view.CbmsConfigurationView": {
        "type": "object",
        "properties": {
          "api_credit_note": {
            "type": "string"
          },
          "api_invoice": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "view.ChangePasswordView": {
        "type": "object",
        "required": [
          "changed_at",
          "email",
          "password"
        ],
        "properties": {
          "changed_at": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "view.ChequeAddEditView": {
        "type": "object",
        "required": [
          "account_id",
          "amount",
          "cheque_date",
          "cheque_number",
          "issued_date",
          "status_id",
          "txn_type"
        ],
        "properties": {
          "account_id": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "bank_account_id": {
            "type": "string"
          },
          "bank_id": {
            "type": "string"
          },
          "cheque_date": {
            "type": "string"
          },
          "cheque_number": {
            "type": "string"
          },
          "issued_date": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "payee_name": {
            "type": "string"
          },
          "status_id": {
            "type": "string"
          },
          "txn_type": {
            "$ref": "#/definitions/types.ChequeTransactionType"
          }
        }
      },
      "view.ChequeField": {
        "type": "object",
        "properties": {
          "col": {
            "type": "string"
          },
          "ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "value": {
  
          }
        }
      },
      "view.ChequeSummaryView": {
        "type": "object",
        "properties": {
          "total_amount": {
            "type": "number"
          },
          "total_count": {
            "type": "integer"
          },
          "txn_type": {
            "type": "string"
          }
        }
      },
      "view.CodeSetting": {
        "type": "object",
        "required": [
          "auto"
        ],
        "properties": {
          "add_fiscal_year": {
            "type": "boolean"
          },
          "auto": {
            "type": "boolean"
          },
          "editable": {
            "type": "boolean"
          },
          "fiscal_reset": {
            "type": "boolean"
          },
          "fiscal_year_settings": {
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            }
          },
          "location_based_numbering": {
            "type": "boolean"
          },
          "location_code_settings": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "integer"
              }
            }
          },
          "prefix": {
            "type": "string",
            "maxLength": 10,
            "minLength": 1
          },
          "start_number": {
            "type": "integer",
            "minimum": 1
          }
        }
      },
      "view.CommentView": {
        "type": "object",
        "properties": {
          "formatted_text": {
            "type": "string"
          },
          "location_id": {
            "type": "string"
          },
          "source_id": {
            "type": "string"
          },
          "source_type": {
            "$ref": "#/definitions/types.Source"
          },
          "text": {
            "type": "string",
            "minLength": 1
          }
        }
      },
      "view.ContactGroupView": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "parent_id": {
            "type": "string"
          }
        }
      },
      "view.ContactReceivablePayableFilterParams": {
        "type": "object",
        "required": [
          "contact_balance_format",
          "contact_type",
          "from_date",
          "to_date"
        ],
        "properties": {
          "contact_balance_format": {
            "type": "string",
            "enum": [
              "DR_BALANCE_ONLY",
              "CR_BALANCE_ONLY",
              "ALL"
            ]
          },
          "contact_group_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "contact_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "contact_type": {
            "type": "string",
            "enum": [
              "Customer",
              "Supplier"
            ]
          },
          "from_date": {
            "type": "string"
          },
          "hide_object_with_no_transaction": {
            "type": "boolean"
          },
          "hide_object_with_zero_closing_balance": {
            "type": "boolean"
          },
          "hide_object_with_zero_opening_balance": {
            "type": "boolean"
          },
          "is_date_bs": {
            "type": "boolean"
          },
          "is_export": {
            "type": "boolean"
          },
          "report_id": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.ReportingTagFilterItem"
            }
          },
          "to_date": {
            "type": "string"
          }
        }
      },
      "view.ContactView": {
        "type": "object",
        "properties": {
          "accept_buy_sell": {
            "type": "boolean"
          },
          "address": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "contact_group_id": {
            "type": "string"
          },
          "credit_limit": {
            "type": "number"
          },
          "credit_term_id": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "opening_balance": {
            "type": "number"
          },
          "opening_balance_type": {
            "enum": [
              "DR",
              "CR"
            ],
            "allOf": [
              {
                "$ref": "#/definitions/types.TxnType"
              }
            ]
          },
          "organization_id": {
            "type": "string"
          },
          "organization_title": {
            "type": "string"
          },
          "override": {
            "type": "boolean"
          },
          "pan_no": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          },
          "type": {
            "enum": [
              "Customer",
              "Supplier",
              "Lead",
              "Contact"
            ],
            "allOf": [
              {
                "$ref": "#/definitions/types.ContactType"
              }
            ]
          }
        }
      },
      "view.CreditNoteView": {
        "type": "object",
        "required": [
          "code",
          "date"
        ],
        "properties": {
          "attachment_id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "contact_id": {
            "description": "TODO: Make it customer_id",
            "type": "string"
          },
          "conversion_rate": {
            "type": "number"
          },
          "currency_code": {
            "type": "string"
          },
          "custom_fields": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.IdValue"
            }
          },
          "date": {
            "type": "string"
          },
          "discount": {
            "type": "number"
          },
          "discount_type": {
            "enum": [
              "Amount",
              "Percent"
            ],
            "allOf": [
              {
                "$ref": "#/definitions/types.DiscountType"
              }
            ]
          },
          "items": {
            "type": "array",
            "minItems": 1,
            "items": {
              "$ref": "#/definitions/view.OperationItemView"
            }
          },
          "location_id": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "overrides": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "reference_no": {
            "type": "string"
          },
          "referrer_id": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.IdValue"
            }
          },
          "terms_and_conditions": {
            "type": "string"
          }
        }
      },
      "view.CreditTermsView": {
        "type": "object",
        "required": [
          "days",
          "name"
        ],
        "properties": {
          "days": {
            "type": "integer",
            "minimum": 0
          },
          "name": {
            "type": "string"
          }
        }
      },
      "view.CurrencyCodeEditView": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "symbol": {
            "type": "string"
          }
        }
      },
      "view.CurrencyCodeView": {
        "type": "object",
        "properties": {
          "code_slug": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "symbol": {
            "type": "string"
          }
        }
      },
      "view.CustomFieldUpdate": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 100
          },
          "options": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "order": {
            "type": "integer"
          },
          "type": {
            "enum": [
              "text",
              "number",
              "description",
              "choice",
              "lookup"
            ],
            "allOf": [
              {
                "$ref": "#/definitions/types.FieldType"
              }
            ]
          }
        }
      },
      "view.CustomFieldView": {
        "type": "object",
        "required": [
          "source"
        ],
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 100
          },
          "options": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "order": {
            "type": "integer"
          },
          "source": {
            "type": "array",
            "minItems": 1,
            "items": {
              "$ref": "#/definitions/types.Source"
            }
          },
          "type": {
            "enum": [
              "text",
              "number",
              "description",
              "choice",
              "lookup"
            ],
            "allOf": [
              {
                "$ref": "#/definitions/types.FieldType"
              }
            ]
          }
        }
      },
      "view.CustomOrderView": {
        "type": "object",
        "properties": {
          "color_code": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "maxLength": 100
          },
          "status_for": {
            "enum": [
              "SalesOrder",
              "PurchaseOrder",
              "Quotation",
              "Cheque",
              "ProductionOrder"
            ],
            "allOf": [
              {
                "$ref": "#/definitions/types.Source"
              }
            ]
          }
        }
      },
      "view.CustomerSupplierAgeingSummaryFilterParams": {
        "type": "object",
        "required": [
          "to_date"
        ],
        "properties": {
          "columns": {
            "type": "integer"
          },
          "contact_group_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "intervals": {
            "type": "integer"
          },
          "is_date_bs": {
            "type": "boolean"
          },
          "is_export": {
            "type": "boolean"
          },
          "report_id": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.ReportingTagFilterItem"
            }
          },
          "to_date": {
            "type": "string"
          }
        }
      },
      "view.CustomerSupplierStatementFilterParams": {
        "type": "object",
        "required": [
          "contact_type",
          "from_date",
          "to_date"
        ],
        "properties": {
          "account_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "contact_group_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "contact_type": {
            "type": "string",
            "enum": [
              "Customer",
              "Supplier"
            ]
          },
          "currency": {
            "type": "string"
          },
          "from_date": {
            "type": "string"
          },
          "group_by": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "is_date_bs": {
            "type": "boolean"
          },
          "is_export": {
            "type": "boolean"
          },
          "report_id": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.ReportingTagFilterItem"
            }
          },
          "to_date": {
            "type": "string"
          }
        }
      },
      "view.DaySummaryFilterParams": {
        "type": "object",
        "required": [
          "date"
        ],
        "properties": {
          "date": {
            "type": "string"
          },
          "is_date_bs": {
            "type": "boolean"
          },
          "is_export": {
            "type": "boolean"
          },
          "location_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "report_id": {
            "type": "string"
          }
        }
      },
      "view.DealCampaignView": {
        "type": "object",
        "properties": {
          "color_code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "view.DealStageView": {
        "type": "object",
        "properties": {
          "color_code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "view.DebitNoteView": {
        "type": "object",
        "required": [
          "code"
        ],
        "properties": {
          "attachment_id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "contact_id": {
            "description": "TODO: Make it customer_id",
            "type": "string"
          },
          "conversion_rate": {
            "type": "number"
          },
          "currency_code": {
            "type": "string"
          },
          "custom_fields": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.IdValue"
            }
          },
          "date": {
            "type": "string"
          },
          "discount": {
            "type": "number"
          },
          "discount_type": {
            "enum": [
              "Amount",
              "Percent"
            ],
            "allOf": [
              {
                "$ref": "#/definitions/types.DiscountType"
              }
            ]
          },
          "items": {
            "type": "array",
            "minItems": 1,
            "items": {
              "$ref": "#/definitions/view.OperationItemView"
            }
          },
          "location_id": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "overrides": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "reference_no": {
            "type": "string"
          },
          "referrer_id": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.IdValue"
            }
          }
        }
      },
      "view.DeliveryPartnerStatementFilterParams": {
        "type": "object",
        "required": [
          "from_date",
          "to_date"
        ],
        "properties": {
          "delivery_partner_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "from_date": {
            "type": "string"
          },
          "is_date_bs": {
            "type": "boolean"
          },
          "is_export": {
            "type": "boolean"
          },
          "is_summary": {
            "type": "boolean"
          },
          "location_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "report_id": {
            "type": "string"
          },
          "to_date": {
            "type": "string"
          }
        }
      },
      "view.DeliveryPartnerView": {
        "type": "object",
        "properties": {
          "account_id": {
            "type": "string"
          },
          "logo": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "view.DetailLedgerFilterParams": {
        "type": "object",
        "required": [
          "from_date",
          "to_date"
        ],
        "properties": {
          "account_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "contact_group_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "contact_type": {
            "type": "string"
          },
          "currency": {
            "type": "string"
          },
          "from_date": {
            "type": "string"
          },
          "group_by": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "group_by_sub_account": {
            "type": "boolean"
          },
          "is_date_bs": {
            "type": "boolean"
          },
          "is_export": {
            "type": "boolean"
          },
          "report_id": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.ReportingTagFilterItem"
            }
          },
          "sub_account_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "to_date": {
            "type": "string"
          },
          "transaction_order": {
            "type": "string"
          }
        }
      },
      "view.DummyVariantView": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.AttributeView"
            }
          },
          "name": {
            "type": "string",
            "maxLength": 100
          },
          "purchase_price": {
            "type": "number"
          },
          "selling_price": {
            "type": "number"
          }
        }
      },
      "view.ExpenseItemView": {
        "type": "object",
        "required": [
          "vat_type"
        ],
        "properties": {
          "account_id": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "description": {
            "type": "string"
          },
          "sub_account_id": {
            "type": "string"
          },
          "vat_type": {
            "enum": [
              "NO_VAT",
              "0 VAT",
              "13 VAT"
            ],
            "allOf": [
              {
                "$ref": "#/definitions/types.TaxType"
              }
            ]
          }
        }
      },
      "view.ExpensesView": {
        "type": "object",
        "properties": {
          "attachment_id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "contact_id": {
            "type": "string"
          },
          "conversion_rate": {
            "type": "number"
          },
          "currency_code": {
            "type": "string"
          },
          "custom_fields": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.IdValue"
            }
          },
          "date": {
            "type": "string"
          },
          "due_date": {
            "type": "string"
          },
          "items": {
            "type": "array",
            "minItems": 1,
            "items": {
              "$ref": "#/definitions/view.ExpenseItemView"
            }
          },
          "location_id": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "overrides": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "reference_id": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.IdValue"
            }
          },
          "supplier_invoice_reference": {
            "type": "string"
          },
          "supplier_invoice_reference_no": {
            "type": "string"
          },
          "tds_account_id": {
            "type": "string"
          },
          "tds_amount": {
            "type": "number"
          },
          "tds_sub_account_id": {
            "type": "string"
          },
          "tds_type_id": {
            "type": "string"
          },
          "terms_and_conditions": {
            "type": "string"
          }
        }
      },
      "view.ExportModelView": {
        "type": "object",
        "properties": {
          "account_id": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          },
          "amountFrom": {
            "type": "string"
          },
          "amountTo": {
            "type": "string"
          },
          "date_gte": {
            "type": "string"
          },
          "date_lte": {
            "type": "string"
          },
          "ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "reconciled": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "view.ExportTypeView": {
        "type": "object",
        "required": [
          "entity"
        ],
        "properties": {
          "entity": {
            "enum": [
              "Customer",
              "Supplier",
              "Contact",
              "Product",
              "Account",
              "Opening Balance"
            ],
            "allOf": [
              {
                "$ref": "#/definitions/types.ExportCollectionType"
              }
            ]
          }
        }
      },
      "view.FloorLayoutView": {
        "type": "object",
        "properties": {
          "area_id": {
            "type": "string"
          },
          "height": {
            "type": "number"
          },
          "location_id": {
            "type": "string"
          },
          "table": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.TableView"
            }
          },
          "width": {
            "type": "number"
          }
        }
      },
      "view.FourPartSummary": {
        "type": "object",
        "properties": {
          "payment": {
            "$ref": "#/definitions/view.PeriodSummary"
          },
          "purchase": {
            "$ref": "#/definitions/view.PeriodSummary"
          },
          "receipt": {
            "$ref": "#/definitions/view.PeriodSummary"
          },
          "sales": {
            "$ref": "#/definitions/view.PeriodSummary"
          }
        }
      },
      "view.GeneralLedgerFilterParams": {
        "type": "object",
        "required": [
          "from_date",
          "to_date"
        ],
        "properties": {
          "account_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "from_date": {
            "type": "string"
          },
          "group_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "hide_object_with_no_transaction": {
            "type": "boolean"
          },
          "hide_object_with_zero_closing_balance": {
            "type": "boolean"
          },
          "hide_object_with_zero_opening_balance": {
            "type": "boolean"
          },
          "is_date_bs": {
            "type": "boolean"
          },
          "is_export": {
            "type": "boolean"
          },
          "report_id": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.ReportingTagFilterItem"
            }
          },
          "to_date": {
            "type": "string"
          }
        }
      },
      "view.GeneralSettingDataView": {
        "type": "object",
        "properties": {
          "options": {
            "type": "array",
            "items": {
  
            }
          },
          "type": {
            "type": "string"
          },
          "value": {
  
          }
        }
      },
      "view.GeneralSettingReqView": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "crossed_credit_limit",
              "discount_method",
              "negative_cash_balance",
              "negative_stock_balance",
              "location_enabled",
              "multiple_warehouse_enabled",
              "default_currency",
              "multiple_currency_enabled",
              "suggest_selling_price"
            ],
            "allOf": [
              {
                "$ref": "#/definitions/types.GeneralSettingType"
              }
            ]
          },
          "value": {
  
          }
        }
      },
      "view.GeneralSettingsView": {
        "type": "object",
        "properties": {
          "crossed_credit_limit": {
            "type": "object"
          },
          "default_currency": {
            "type": "object"
          },
          "discount_method": {
            "type": "object"
          },
          "location_enabled": {
            "type": "object"
          },
          "multiple_currency_enabled": {
            "type": "object"
          },
          "multiple_warehouse_enabled": {
            "type": "object"
          },
          "negative_cash_balance": {
            "type": "object"
          },
          "negative_stock_balance": {
            "type": "object"
          },
          "suggest_selling_price": {
            "type": "object"
          }
        }
      },
      "view.GeneralVatSettingsReqView": {
        "type": "object",
        "required": [
          "account_id",
          "type"
        ],
        "properties": {
          "account_id": {
            "type": "string"
          },
          "sub_account_id": {
            "type": "string"
          },
          "type": {
            "enum": [
              "SALES",
              "PURCHASE"
            ],
            "allOf": [
              {
                "$ref": "#/definitions/types.VatType"
              }
            ]
          }
        }
      },
      "view.GeneralVatSettingsView": {
        "type": "object",
        "properties": {
          "purchase_vat_account_id": {
            "type": "string"
          },
          "purchase_vat_account_obj": {
            "$ref": "#/definitions/view.AccountView"
          },
          "purchase_vat_sub_account_id": {
            "type": "string"
          },
          "purchase_vat_sub_account_obj": {
            "$ref": "#/definitions/view.SubAccountView"
          },
          "sales_vat_account_id": {
            "type": "string"
          },
          "sales_vat_account_obj": {
            "$ref": "#/definitions/view.AccountView"
          },
          "sales_vat_sub_account_id": {
            "type": "string"
          },
          "sales_vat_sub_account_obj": {
            "$ref": "#/definitions/view.SubAccountView"
          }
        }
      },
      "view.GlMasterFilterParams": {
        "type": "object",
        "required": [
          "from_date",
          "to_date"
        ],
        "properties": {
          "from_date": {
            "type": "string"
          },
          "is_date_bs": {
            "type": "boolean"
          },
          "is_export": {
            "type": "boolean"
          },
          "report_id": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.ReportingTagFilterItem"
            }
          },
          "to_date": {
            "type": "string"
          },
          "transaction_type": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/types.Source"
            }
          }
        }
      },
      "view.IdValue": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "view.ImportAccountView": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/definitions/view.AccountView"
          },
          "opening_balance": {
            "type": "number"
          },
          "opening_balance_type": {
            "$ref": "#/definitions/types.TxnType"
          }
        }
      },
      "view.ImportContact": {
        "type": "object",
        "properties": {
          "contact": {
            "$ref": "#/definitions/view.ContactView"
          },
          "opening_balance": {
            "type": "number"
          },
          "opening_balance_type": {
            "$ref": "#/definitions/types.TxnType"
          }
        }
      },
      "view.ImportContactView": {
        "type": "object"
      },
      "view.ImportView": {
        "type": "object"
      },
      "view.IncomeStatementFilterParams": {
        "type": "object",
        "required": [
          "from_date",
          "to_date"
        ],
        "properties": {
          "exclude_opening_balance": {
            "type": "boolean"
          },
          "from_date": {
            "type": "string"
          },
          "hide_object_with_zero_closing_balance": {
            "type": "boolean"
          },
          "is_date_bs": {
            "type": "boolean"
          },
          "is_export": {
            "type": "boolean"
          },
          "report_id": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.ReportingTagFilterItem"
            }
          },
          "to_date": {
            "type": "string"
          }
        }
      },
      "view.InventoryAdjustmentItemView": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "measurement_unit_id": {
            "type": "string"
          },
          "operation": {
            "type": "string",
            "enum": [
              "In",
              "Out"
            ]
          },
          "product_id": {
            "type": "string"
          },
          "quantity": {
            "type": "number"
          },
          "rate": {
            "type": "number"
          },
          "warehouse_id": {
            "type": "string"
          }
        }
      },
      "view.InventoryAdjustmentView": {
        "type": "object",
        "properties": {
          "attachment_id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "conversion_rate": {
            "type": "number"
          },
          "currency_code": {
            "type": "string"
          },
          "custom_fields": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.IdValue"
            }
          },
          "date": {
            "type": "string"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.InventoryAdjustmentItemView"
            }
          },
          "location_id": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "overrides": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "reference_no": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.IdValue"
            }
          }
        }
      },
      "view.InventoryLedgerFilterParams": {
        "type": "object",
        "required": [
          "from_date",
          "product_id",
          "to_date"
        ],
        "properties": {
          "from_date": {
            "type": "string"
          },
          "is_date_bs": {
            "type": "boolean"
          },
          "is_export": {
            "type": "boolean"
          },
          "product_id": {
            "type": "array",
            "maxItems": 1,
            "minItems": 1,
            "items": {
              "type": "string"
            }
          },
          "report_id": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.ReportingTagFilterItem"
            }
          },
          "to_date": {
            "type": "string"
          },
          "warehouse_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "view.InventoryMasterFilterParams": {
        "type": "object",
        "required": [
          "from_date",
          "to_date"
        ],
        "properties": {
          "category_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "contact_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "from_date": {
            "type": "string"
          },
          "is_date_bs": {
            "type": "boolean"
          },
          "is_export": {
            "type": "boolean"
          },
          "product_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "report_id": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.ReportingTagFilterItem"
            }
          },
          "to_date": {
            "type": "string"
          },
          "transaction_type": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/types.Source"
            }
          },
          "warehouse_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "view.InventoryMovementFilterParams": {
        "type": "object",
        "required": [
          "from_date",
          "to_date"
        ],
        "properties": {
          "category_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "from_date": {
            "type": "string"
          },
          "is_date_bs": {
            "type": "boolean"
          },
          "is_export": {
            "type": "boolean"
          },
          "product_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "report_id": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.ReportingTagFilterItem"
            }
          },
          "to_date": {
            "type": "string"
          },
          "warehouse_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "view.InventoryPositionFilterParams": {
        "type": "object",
        "required": [
          "from_date",
          "to_date"
        ],
        "properties": {
          "category_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "contact_balance_format": {
            "type": "string"
          },
          "from_date": {
            "type": "string"
          },
          "is_date_bs": {
            "type": "boolean"
          },
          "is_export": {
            "type": "boolean"
          },
          "product_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "report_id": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.ReportingTagFilterItem"
            }
          },
          "shown_columns": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "to_date": {
            "type": "string"
          }
        }
      },
      "view.InvitationView": {
        "type": "object",
        "properties": {
          "location_permissions": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.RoleWithLocationView"
            }
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "user_email": {
            "type": "string"
          }
        }
      },
      "view.InvoicePurchaseBillAgeingFilterParams": {
        "type": "object",
        "required": [
          "from_date",
          "to_date"
        ],
        "properties": {
          "contact_group_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "contact_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "from_date": {
            "type": "string"
          },
          "is_date_bs": {
            "type": "boolean"
          },
          "is_export": {
            "type": "boolean"
          },
          "report_id": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.ReportingTagFilterItem"
            }
          },
          "to_date": {
            "type": "string"
          },
          "transaction_type": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/types.Source"
            }
          }
        }
      },
      "view.InvoiceView": {
        "type": "object",
        "properties": {
          "abbreviated_bill": {
            "type": "boolean"
          },
          "attachment_id": {
            "type": "string"
          },
          "auto_approve": {
            "type": "boolean"
          },
          "code": {
            "type": "string"
          },
          "contact_id": {
            "type": "string"
          },
          "conversion_rate": {
            "type": "number"
          },
          "currency_code": {
            "type": "string"
          },
          "custom_fields": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.IdValue"
            }
          },
          "date": {
            "type": "string"
          },
          "discount": {
            "type": "number"
          },
          "discount_type": {
            "enum": [
              "Amount",
              "Percent"
            ],
            "allOf": [
              {
                "$ref": "#/definitions/types.DiscountType"
              }
            ]
          },
          "due_date": {
            "type": "string"
          },
          "is_import_export": {
            "type": "boolean"
          },
          "items": {
            "type": "array",
            "minItems": 1,
            "items": {
              "$ref": "#/definitions/view.OperationItemView"
            }
          },
          "location_id": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "overrides": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "payment_account_id": {
            "type": "string"
          },
          "payment_amount": {
            "type": "number"
          },
          "payment_mode_id": {
            "type": "string"
          },
          "payment_reference_no": {
            "type": "string"
          },
          "reference_no": {
            "type": "string"
          },
          "referrer_id": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.IdValue"
            }
          },
          "tds_account_id": {
            "type": "string"
          },
          "tds_amount": {
            "type": "number"
          },
          "tds_sub_account_id": {
            "type": "string"
          },
          "tds_type_id": {
            "type": "string"
          },
          "terms_and_conditions": {
            "type": "string"
          },
          "trade_country": {
            "type": "string"
          },
          "trade_date": {
            "type": "string"
          },
          "trade_doc_no": {
            "type": "string"
          }
        }
      },
      "view.IrdInfoEditView": {
        "type": "object",
        "properties": {
          "is_abbreviated_tax_invoice_enabled": {
            "type": "boolean"
          },
          "is_ird_enabled": {
            "type": "boolean"
          },
          "is_ird_verified": {
            "type": "boolean"
          }
        }
      },
      "view.JournalFilterParams": {
        "type": "object",
        "required": [
          "from_date",
          "to_date"
        ],
        "properties": {
          "from_date": {
            "type": "string"
          },
          "is_date_bs": {
            "type": "boolean"
          },
          "is_export": {
            "type": "boolean"
          },
          "report_id": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.ReportingTagFilterItem"
            }
          },
          "to_date": {
            "type": "string"
          },
          "transaction_type": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/types.Source"
            }
          }
        }
      },
      "view.JournalItemView": {
        "type": "object",
        "properties": {
          "account_id": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "description": {
            "type": "string"
          },
          "sub_account_id": {
            "type": "string"
          },
          "txn_type": {
            "$ref": "#/definitions/types.TxnType"
          }
        }
      },
      "view.JournalVoucherView": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "attachment_id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "conversion_rate": {
            "type": "number"
          },
          "currency_code": {
            "type": "string"
          },
          "custom_fields": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.IdValue"
            }
          },
          "date": {
            "type": "string"
          },
          "items": {
            "type": "array",
            "minItems": 2,
            "items": {
              "$ref": "#/definitions/view.JournalItemView"
            }
          },
          "location_id": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "overrides": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "reference_no": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.IdValue"
            }
          }
        }
      },
      "view.LeadSourceView": {
        "type": "object",
        "properties": {
          "color_code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "view.LocationGeneralSettingReqView": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "service_charge_applicable",
              "service_charge_rate",
              "default_tab",
              "estimate_bill",
              "invoice",
              "kot_print",
              "credit_note",
              "is_service_charge_applicable"
            ],
            "allOf": [
              {
                "$ref": "#/definitions/types.GeneralSettingType"
              }
            ]
          },
          "value": {
  
          }
        }
      },
      "view.LocationGeneralSettingsView": {
        "type": "object",
        "properties": {
          "credit_note": {
            "type": "object"
          },
          "default_tab": {
            "type": "object"
          },
          "estimate_bill": {
            "type": "object"
          },
          "invoice": {
            "type": "object"
          },
          "kot_print": {
            "type": "object"
          }
        }
      },
      "view.LocationPaymentModeView": {
        "type": "object",
        "properties": {
          "location_id": {
            "type": "string"
          },
          "payment_mode_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "view.LocationView": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "code": {
            "type": "string",
            "maxLength": 4
          },
          "name": {
            "type": "string"
          },
          "type": {
            "enum": [
              "Bar",
              "Retail"
            ],
            "allOf": [
              {
                "$ref": "#/definitions/types.LocationType"
              }
            ]
          },
          "warehouse_id": {
            "type": "string"
          }
        }
      },
      "view.ManualAllocationView": {
        "type": "object",
        "properties": {
          "allocations": {
            "type": "array",
            "minItems": 1,
            "items": {
              "$ref": "#/definitions/view.AllocationRecordView"
            }
          }
        }
      },
      "view.MeasurementUnitView": {
        "type": "object",
        "properties": {
          "accepts_fraction": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "short_name": {
            "type": "string",
            "maxLength": 3,
            "minLength": 2
          }
        }
      },
      "view.MultiAccountView": {
        "type": "object",
        "required": [
          "accounts"
        ],
        "properties": {
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.ImportAccountView"
            }
          }
        }
      },
      "view.MultiContactView": {
        "type": "object",
        "required": [
          "contacts",
          "type"
        ],
        "properties": {
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.ImportContact"
            }
          },
          "type": {
            "enum": [
              "Customer",
              "Supplier",
              "Contact"
            ],
            "allOf": [
              {
                "$ref": "#/definitions/types.ContactType"
              }
            ]
          }
        }
      },
      "view.MultiOpportunityView": {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "enum": [
              "Pending",
              "Won",
              "Lost"
            ],
            "allOf": [
              {
                "$ref": "#/definitions/types.DealStatusType"
              }
            ]
          }
        }
      },
      "view.MultiProductView": {
        "type": "object",
        "required": [
          "products"
        ],
        "properties": {
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.ProductImportView"
            }
          }
        }
      },
      "view.MultipleAccount": {
        "type": "object",
        "required": [
          "group_id",
          "name"
        ],
        "properties": {
          "code": {
            "type": "string"
          },
          "group_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "view.MultipleAccountView": {
        "type": "object",
        "required": [
          "accounts"
        ],
        "properties": {
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.MultipleAccount"
            }
          }
        }
      },
      "view.NamespaceCredentialView": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "expiry_timestamp": {
            "type": "integer"
          },
          "hash": {
            "type": "string"
          },
          "identity": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          }
        }
      },
      "view.OperationItemView": {
        "type": "object",
        "required": [
          "account_id"
        ],
        "properties": {
          "account_id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "discount": {
            "type": "number"
          },
          "discount_type": {
            "$ref": "#/definitions/types.DiscountType"
          },
          "measurement_unit_id": {
            "type": "string"
          },
          "product_id": {
            "type": "string"
          },
          "quantity": {
            "type": "number"
          },
          "rate": {
            "type": "number"
          },
          "service_charge": {
            "type": "number"
          },
          "service_charge_applicable": {
            "type": "boolean"
          },
          "sub_account_id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "vat_type": {
            "enum": [
              "NO_VAT",
              "0 VAT",
              "13 VAT"
            ],
            "allOf": [
              {
                "$ref": "#/definitions/types.TaxType"
              }
            ]
          },
          "warehouse_id": {
            "type": "string"
          }
        }
      },
      "view.OpportunityView": {
        "type": "object",
        "required": [
          "opportunity_title",
          "privacy",
          "source_id",
          "source_type",
          "status"
        ],
        "properties": {
          "assign_to": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "deal_stage_id": {
            "type": "string"
          },
          "expected_closing_date": {
            "type": "string"
          },
          "expected_revenue": {
            "type": "number"
          },
          "lead_source_id": {
            "type": "string"
          },
          "opportunity_description": {
            "type": "string"
          },
          "opportunity_title": {
            "type": "string"
          },
          "privacy": {
            "enum": [
              "PRIVATE",
              "PUBLIC"
            ],
            "allOf": [
              {
                "$ref": "#/definitions/types.PrivacyType"
              }
            ]
          },
          "source_id": {
            "type": "string"
          },
          "source_type": {
            "type": "string"
          },
          "status": {
            "enum": [
              "Pending",
              "Won",
              "Lost"
            ],
            "allOf": [
              {
                "$ref": "#/definitions/types.DealStatusType"
              }
            ]
          }
        }
      },
      "view.OrderCustomerView": {
        "type": "object",
        "properties": {
          "customer_count": {
            "type": "integer"
          },
          "customer_id": {
            "type": "string"
          }
        }
      },
      "view.OrderItemTransferView": {
        "type": "object",
        "required": [
          "area_id",
          "table_id"
        ],
        "properties": {
          "area_id": {
            "type": "string"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.TransferItemView"
            }
          },
          "table_id": {
            "type": "string"
          }
        }
      },
      "view.OrderSummaryFilterParams": {
        "type": "object",
        "required": [
          "from_date",
          "to_date"
        ],
        "properties": {
          "created_by_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "from_date": {
            "type": "string"
          },
          "is_date_bs": {
            "type": "boolean"
          },
          "is_export": {
            "type": "boolean"
          },
          "location_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "order_type": {
            "type": "string"
          },
          "report_id": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "table_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "to_date": {
            "type": "string"
          }
        }
      },
      "view.OrderUpdateView": {
        "type": "object",
        "properties": {
          "product_item_list_view": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.PosOrderItem"
            }
          }
        }
      },
      "view.OrganizationLockDate": {
        "type": "object",
        "required": [
          "lock_date"
        ],
        "properties": {
          "lock_date": {
            "type": "string"
          }
        }
      },
      "view.OrganizationUpdateView": {
        "type": "object",
        "required": [
          "display_name",
          "name"
        ],
        "properties": {
          "display_name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "logo": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "pan_no": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          },
          "registered_address": {
            "type": "string"
          },
          "vat_registered": {
            "type": "boolean"
          },
          "website": {
            "type": "string"
          }
        }
      },
      "view.OrganizationView": {
        "type": "object",
        "required": [
          "accounting_start_date",
          "display_name",
          "id",
          "name",
          "slug"
        ],
        "properties": {
          "accounting_start_date": {
            "type": "string"
          },
          "bank_connection": {
            "type": "boolean"
          },
          "billing_location_count": {
            "type": "integer"
          },
          "created_at": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "end_date": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "is_ai_enabled": {
            "type": "boolean"
          },
          "is_billing_location_enabled": {
            "type": "boolean"
          },
          "is_ird_enabled": {
            "type": "boolean"
          },
          "is_ird_verified": {
            "type": "boolean"
          },
          "is_pos_enabled": {
            "type": "boolean"
          },
          "is_tigg_enabled": {
            "type": "boolean"
          },
          "is_warehouse_enabled": {
            "type": "boolean"
          },
          "last_renewed_date": {
            "type": "string"
          },
          "logo": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "pan_no": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          },
          "registered_address": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "subscription_active_status": {
            "type": "string"
          },
          "subscription_start_date": {
            "type": "string"
          },
          "subscription_type": {
            "type": "string"
          },
          "transaction_lock_date": {
            "type": "string"
          },
          "transaction_lock_enabled": {
            "type": "boolean"
          },
          "user_info": {
            "$ref": "#/definitions/view.UserView"
          },
          "vat_registered": {
            "type": "boolean"
          },
          "warehouse_count": {
            "type": "integer"
          },
          "website": {
            "type": "string"
          }
        }
      },
      "view.Param": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "inactive": {
            "type": "string"
          },
          "limit": {
            "type": "string"
          },
          "no_pagination": {
            "type": "boolean"
          },
          "page": {
            "type": "string"
          },
          "paginate": {
            "type": "string"
          },
          "search": {
            "type": "string"
          },
          "sorts": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string"
          }
        }
      },
      "view.PaymentModeView": {
        "type": "object",
        "properties": {
          "account_id": {
            "type": "string"
          },
          "client_secret_key": {
            "type": "string"
          },
          "is_pos": {
            "type": "boolean"
          },
          "is_qr_integrated": {
            "type": "boolean"
          },
          "logo": {
            "type": "string"
          },
          "merchant_id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "maxLength": 100
          },
          "password": {
            "type": "string"
          },
          "type": {
            "enum": [
              "Cash",
              "Card",
              "E-Payment",
              "Other"
            ],
            "allOf": [
              {
                "$ref": "#/definitions/types.PaymentModeType"
              }
            ]
          },
          "username": {
            "type": "string"
          }
        }
      },
      "view.PeriodSummary": {
        "type": "object",
        "properties": {
          "current": {
            "type": "number"
          },
          "previous": {
            "type": "number"
          }
        }
      },
      "view.PermissionUpdateView": {
        "type": "object",
        "properties": {
          "location_permissions": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.RoleWithLocationView"
            }
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "view.PosOrderItem": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "discard_reason": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "measurement_unit_id": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "print_profile_id": {
            "type": "string"
          },
          "product_id": {
            "type": "string"
          },
          "quantity": {
            "type": "number"
          },
          "rate": {
            "type": "number"
          },
          "served_quantity": {
            "type": "number"
          },
          "service_charge": {
            "type": "number"
          },
          "service_charge_applicable": {
            "type": "boolean"
          },
          "takeaway_quantity": {
            "type": "number"
          },
          "vat_type": {
            "$ref": "#/definitions/types.TaxType"
          }
        }
      },
      "view.PosOrderView": {
        "type": "object",
        "properties": {
          "area_id": {
            "type": "string"
          },
          "contact_id": {
            "type": "string"
          },
          "customer_count": {
            "type": "integer"
          },
          "delivery_partner_id": {
            "type": "string"
          },
          "items": {
            "type": "array",
            "minItems": 1,
            "items": {
              "$ref": "#/definitions/view.PosOrderItem"
            }
          },
          "location_id": {
            "type": "string"
          },
          "order_type": {
            "enum": [
              "Dine In",
              "Take Away",
              "Delivery",
              "Retail"
            ],
            "allOf": [
              {
                "$ref": "#/definitions/types.OrderType"
              }
            ]
          },
          "service_charge": {
            "type": "number"
          },
          "table_id": {
            "type": "string"
          }
        }
      },
      "view.PosPaymentMethodView": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number"
          },
          "delivery_partner_id": {
            "type": "string"
          },
          "payment_method_id": {
            "type": "string"
          },
          "type": {
            "enum": [
              "Cash",
              "Card",
              "E-Payment",
              "Other",
              "Credit",
              "Delivery"
            ],
            "allOf": [
              {
                "$ref": "#/definitions/types.PaymentModeType"
              }
            ]
          }
        }
      },
      "view.PrintingTemplateView": {
        "type": "object"
      },
      "view.ProductAttributeView": {
        "type": "object",
        "properties": {
          "option_id": {
            "type": "string"
          },
          "variant_id": {
            "type": "string"
          }
        }
      },
      "view.ProductCategoryView": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "maxLength": 100
          },
          "parent_id": {
            "type": "string"
          }
        }
      },
      "view.ProductImportView": {
        "type": "object",
        "properties": {
          "opening_quantity": {
            "type": "number"
          },
          "opening_rate": {
            "type": "number"
          },
          "product": {
            "$ref": "#/definitions/view.BulkProductView"
          }
        }
      },
      "view.ProductItemView": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "discount": {
            "type": "number"
          },
          "discount_type": {
            "$ref": "#/definitions/types.DiscountType"
          },
          "measurement_unit_id": {
            "type": "string"
          },
          "product_id": {
            "type": "string"
          },
          "quantity": {
            "type": "number"
          },
          "rate": {
            "type": "number"
          },
          "service_charge": {
            "type": "number"
          },
          "service_charge_applicable": {
            "type": "boolean"
          },
          "type": {
            "type": "string"
          },
          "vat_type": {
            "enum": [
              "NO_VAT",
              "0 VAT",
              "13 VAT"
            ],
            "allOf": [
              {
                "$ref": "#/definitions/types.TaxType"
              }
            ]
          }
        }
      },
      "view.ProductOpeningBalanceRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "location_id": {
            "type": "string"
          },
          "measurement_unit_id": {
            "type": "string"
          },
          "opening_quantity": {
            "type": "number"
          },
          "opening_rate": {
            "type": "number"
          },
          "product_id": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.IdValue"
            }
          },
          "warehouse_id": {
            "type": "string"
          }
        }
      },
      "view.ProductVariantConfigView": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.ProductVariantOption"
            }
          }
        }
      },
      "view.ProductVariantOption": {
        "type": "object",
        "required": [
          "option"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "option": {
            "type": "string"
          }
        }
      },
      "view.ProductView": {
        "type": "object",
        "required": [
          "code",
          "name",
          "tax"
        ],
        "properties": {
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.ProductAttributeView"
            }
          },
          "available_for_sale": {
            "type": "boolean"
          },
          "code": {
            "type": "string",
            "maxLength": 100
          },
          "description": {
            "type": "string"
          },
          "hs_code": {
            "type": "string",
            "maxLength": 20
          },
          "image": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "maxLength": 100
          },
          "parent_id": {
            "type": "string"
          },
          "primary_unit_id": {
            "type": "string"
          },
          "print_profile_id": {
            "type": "string"
          },
          "product_category_id": {
            "type": "string"
          },
          "purchase_account_id": {
            "type": "string"
          },
          "purchase_price": {
            "type": "number"
          },
          "purchase_return_account_id": {
            "type": "string"
          },
          "purchase_return_sub_account_id": {
            "type": "string"
          },
          "purchase_sub_account_id": {
            "type": "string"
          },
          "re_order_level": {
            "type": "number"
          },
          "sales_account_id": {
            "type": "string"
          },
          "sales_return_account_id": {
            "type": "string"
          },
          "sales_return_sub_account_id": {
            "type": "string"
          },
          "sales_sub_account_id": {
            "type": "string"
          },
          "secondary_units": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.SecondaryUnitView"
            }
          },
          "selling_price": {
            "type": "number"
          },
          "service_charge_applicable": {
            "type": "boolean"
          },
          "tax": {
            "enum": [
              "0 VAT",
              "NO_VAT",
              "13 VAT"
            ],
            "allOf": [
              {
                "$ref": "#/definitions/types.TaxType"
              }
            ]
          },
          "track_inventory": {
            "type": "boolean"
          },
          "type": {
            "type": "string"
          },
          "valuation_method": {
            "type": "string"
          }
        }
      },
      "view.PurchaseBillItemView": {
        "type": "object",
        "required": [
          "account_id"
        ],
        "properties": {
          "account_id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "discount": {
            "type": "number"
          },
          "discount_type": {
            "$ref": "#/definitions/types.DiscountType"
          },
          "measurement_unit_id": {
            "type": "string"
          },
          "product_id": {
            "type": "string"
          },
          "quantity": {
            "type": "number"
          },
          "rate": {
            "type": "number"
          },
          "service_charge": {
            "type": "number"
          },
          "service_charge_applicable": {
            "type": "boolean"
          },
          "sub_account_id": {
            "type": "string"
          },
          "tax_base_amount": {
            "type": "number"
          },
          "tax_base_vat_type": {
            "$ref": "#/definitions/types.TaxType"
          },
          "type": {
            "type": "string"
          },
          "vat_type": {
            "enum": [
              "NO_VAT",
              "0 VAT",
              "13 VAT"
            ],
            "allOf": [
              {
                "$ref": "#/definitions/types.TaxType"
              }
            ]
          },
          "warehouse_id": {
            "type": "string"
          }
        }
      },
      "view.PurchaseBillView": {
        "type": "object",
        "required": [
          "code",
          "contact_id",
          "due_date"
        ],
        "properties": {
          "additional_costs": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.AdditionalCostView"
            }
          },
          "attachment_id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "contact_id": {
            "type": "string"
          },
          "conversion_rate": {
            "type": "number"
          },
          "currency_code": {
            "type": "string"
          },
          "custom_fields": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.IdValue"
            }
          },
          "discount": {
            "type": "number"
          },
          "discount_type": {
            "enum": [
              "Amount",
              "Percent"
            ],
            "allOf": [
              {
                "$ref": "#/definitions/types.DiscountType"
              }
            ]
          },
          "due_date": {
            "type": "string"
          },
          "invoice_date": {
            "type": "string"
          },
          "is_import_export": {
            "type": "boolean"
          },
          "items": {
            "type": "array",
            "minItems": 1,
            "items": {
              "$ref": "#/definitions/view.PurchaseBillItemView"
            }
          },
          "location_id": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "overrides": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "product_wise": {
            "type": "boolean"
          },
          "reference_no": {
            "type": "string"
          },
          "referrer_id": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.IdValue"
            }
          },
          "supplier_invoice_reference_no": {
            "type": "string"
          },
          "tds_account_id": {
            "type": "string"
          },
          "tds_amount": {
            "type": "number"
          },
          "tds_sub_account_id": {
            "type": "string"
          },
          "tds_type_id": {
            "type": "string"
          },
          "trade_country": {
            "type": "string"
          },
          "trade_date": {
            "type": "string"
          },
          "trade_doc_no": {
            "type": "string"
          }
        }
      },
      "view.PurchaseOrderView": {
        "type": "object",
        "required": [
          "code",
          "contact_id"
        ],
        "properties": {
          "attachment_id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "contact_id": {
            "type": "string"
          },
          "conversion_rate": {
            "type": "number"
          },
          "credit_term_id": {
            "type": "string"
          },
          "currency_code": {
            "type": "string"
          },
          "custom_fields": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.IdValue"
            }
          },
          "date": {
            "type": "string"
          },
          "discount": {
            "type": "number"
          },
          "discount_type": {
            "enum": [
              "Amount",
              "Percent"
            ],
            "allOf": [
              {
                "$ref": "#/definitions/types.DiscountType"
              }
            ]
          },
          "items": {
            "type": "array",
            "minItems": 1,
            "items": {
              "$ref": "#/definitions/view.ProductItemView"
            }
          },
          "location_id": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "reference_no": {
            "type": "string"
          },
          "referrer_id": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.IdValue"
            }
          },
          "terms_and_conditions": {
            "type": "string"
          }
        }
      },
      "view.PurchaseRegisterFilterParams": {
        "type": "object",
        "required": [
          "from_date",
          "to_date"
        ],
        "properties": {
          "from_date": {
            "type": "string"
          },
          "group_by_source_id": {
            "type": "boolean"
          },
          "include_debit_note": {
            "type": "boolean"
          },
          "is_date_bs": {
            "type": "boolean"
          },
          "is_export": {
            "type": "boolean"
          },
          "location_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "report_id": {
            "type": "string"
          },
          "to_date": {
            "type": "string"
          }
        }
      },
      "view.PurchaseReturnRegisterFilterParams": {
        "type": "object",
        "required": [
          "from_date",
          "to_date"
        ],
        "properties": {
          "from_date": {
            "type": "string"
          },
          "group_by_source_id": {
            "type": "boolean"
          },
          "is_date_bs": {
            "type": "boolean"
          },
          "is_export": {
            "type": "boolean"
          },
          "location_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "report_id": {
            "type": "string"
          },
          "to_date": {
            "type": "string"
          }
        }
      },
      "view.PurchaseSalesByContactFilterParams": {
        "type": "object",
        "required": [
          "from_date",
          "to_date"
        ],
        "properties": {
          "channel": {
            "type": "string"
          },
          "contact_group_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "from_date": {
            "type": "string"
          },
          "include_credit_note": {
            "type": "boolean"
          },
          "include_debit_note": {
            "type": "boolean"
          },
          "is_date_bs": {
            "type": "boolean"
          },
          "is_export": {
            "type": "boolean"
          },
          "location_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "report_id": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.ReportingTagFilterItem"
            }
          },
          "to_date": {
            "type": "string"
          },
          "total_amount_$gte": {
            "type": "number"
          }
        }
      },
      "view.PurchaseSalesByContactMonthlyFilterParams": {
        "type": "object",
        "required": [
          "fiscal_year"
        ],
        "properties": {
          "contact_group_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fiscal_year": {
            "type": "integer"
          },
          "include_credit_note": {
            "type": "boolean"
          },
          "include_debit_note": {
            "type": "boolean"
          },
          "is_date_bs": {
            "type": "boolean"
          },
          "is_export": {
            "type": "boolean"
          },
          "location_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "report_id": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.ReportingTagFilterItem"
            }
          }
        }
      },
      "view.PurchaseSalesByItemFilterParams": {
        "type": "object",
        "required": [
          "from_date",
          "to_date"
        ],
        "properties": {
          "category_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "channel": {
            "type": "string"
          },
          "from_date": {
            "type": "string"
          },
          "group_by_category": {
            "type": "boolean"
          },
          "include_credit_note": {
            "type": "boolean"
          },
          "include_debit_note": {
            "type": "boolean"
          },
          "is_date_bs": {
            "type": "boolean"
          },
          "is_export": {
            "type": "boolean"
          },
          "location_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "product_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "report_id": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.ReportingTagFilterItem"
            }
          },
          "to_date": {
            "type": "string"
          }
        }
      },
      "view.PurchaseSalesByItemMonthlyFilterParams": {
        "type": "object",
        "required": [
          "field",
          "fiscal_year"
        ],
        "properties": {
          "field": {
            "type": "string",
            "enum": [
              "amount",
              "quantity"
            ]
          },
          "fiscal_year": {
            "type": "integer"
          },
          "include_credit_note": {
            "type": "boolean"
          },
          "include_debit_note": {
            "type": "boolean"
          },
          "is_date_bs": {
            "type": "boolean"
          },
          "is_export": {
            "type": "boolean"
          },
          "location_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "report_id": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.ReportingTagFilterItem"
            }
          }
        }
      },
      "view.PurchaseSalesMasterFilterParams": {
        "type": "object",
        "required": [
          "from_date",
          "to_date"
        ],
        "properties": {
          "category_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "channel": {
            "type": "string"
          },
          "contact_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "from_date": {
            "type": "string"
          },
          "is_date_bs": {
            "type": "boolean"
          },
          "is_export": {
            "type": "boolean"
          },
          "location_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "product_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "report_id": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.ReportingTagFilterItem"
            }
          },
          "to_date": {
            "type": "string"
          },
          "transaction_type": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/types.Source"
            }
          }
        }
      },
      "view.QuantityRequest": {
        "type": "object",
        "properties": {
          "quantity": {
            "type": "number"
          }
        }
      },
      "view.QuickLinkUpdateItem": {
        "type": "object",
        "properties": {
          "app_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "view.QuickLinkUpdateRequest": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.QuickLinkUpdateItem"
            }
          }
        }
      },
      "view.QuotationView": {
        "type": "object",
        "required": [
          "due_date"
        ],
        "properties": {
          "attachment_id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "contact_id": {
            "type": "string"
          },
          "conversion_rate": {
            "type": "number"
          },
          "credit_term_id": {
            "type": "string"
          },
          "currency_code": {
            "type": "string"
          },
          "custom_fields": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.IdValue"
            }
          },
          "date": {
            "type": "string"
          },
          "discount": {
            "type": "number"
          },
          "discount_type": {
            "enum": [
              "Amount",
              "Percent"
            ],
            "allOf": [
              {
                "$ref": "#/definitions/types.DiscountType"
              }
            ]
          },
          "due_date": {
            "type": "string"
          },
          "items": {
            "type": "array",
            "minItems": 1,
            "items": {
              "$ref": "#/definitions/view.ProductItemView"
            }
          },
          "location_id": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.IdValue"
            }
          },
          "terms_and_conditions": {
            "type": "string"
          }
        }
      },
      "view.RefreshTokenView": {
        "type": "object",
        "properties": {
          "refresh_token": {
            "type": "string"
          }
        }
      },
      "view.RejectInvitationView": {
        "type": "object",
        "properties": {
          "invitation_id": {
            "type": "string"
          }
        }
      },
      "view.RemoveUserView": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string"
          }
        }
      },
      "view.ReorderView": {
        "type": "object",
        "required": [
          "ids"
        ],
        "properties": {
          "ids": {
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "view.ReportFilterParams": {
        "type": "object",
        "properties": {
          "activity_log_filter_params": {
            "$ref": "#/definitions/view.ActivityLogFilterParams"
          },
          "additional_cost_summary_filter_params": {
            "$ref": "#/definitions/view.AdditionalCostSummaryFilterParams"
          },
          "annex_13_filter_params": {
            "$ref": "#/definitions/view.Annex13FilterParams"
          },
          "annex_5_filter_params": {
            "$ref": "#/definitions/view.Annex5FilterParams"
          },
          "balance_sheet_filter_params": {
            "$ref": "#/definitions/view.BalanceSheetFilterParams"
          },
          "contact_receivable_payable_filter_params": {
            "$ref": "#/definitions/view.ContactReceivablePayableFilterParams"
          },
          "customer_supplier_ageing_summary_filter_params": {
            "$ref": "#/definitions/view.CustomerSupplierAgeingSummaryFilterParams"
          },
          "customer_supplier_statement_filter_params": {
            "$ref": "#/definitions/view.CustomerSupplierStatementFilterParams"
          },
          "day_summary_filter_params": {
            "$ref": "#/definitions/view.DaySummaryFilterParams"
          },
          "delivery_partner_statement_filter_params": {
            "$ref": "#/definitions/view.DeliveryPartnerStatementFilterParams"
          },
          "detail_ledger_filter_params": {
            "$ref": "#/definitions/view.DetailLedgerFilterParams"
          },
          "general_ledger_filter_params": {
            "$ref": "#/definitions/view.GeneralLedgerFilterParams"
          },
          "gl_master_filter_params": {
            "$ref": "#/definitions/view.GlMasterFilterParams"
          },
          "income_statement_filter_params": {
            "$ref": "#/definitions/view.IncomeStatementFilterParams"
          },
          "inventory_ledger_filter_params": {
            "$ref": "#/definitions/view.InventoryLedgerFilterParams"
          },
          "inventory_master_filter_params": {
            "$ref": "#/definitions/view.InventoryMasterFilterParams"
          },
          "inventory_movement_filter_params": {
            "$ref": "#/definitions/view.InventoryMovementFilterParams"
          },
          "inventory_position_filter_params": {
            "$ref": "#/definitions/view.InventoryPositionFilterParams"
          },
          "invoice_purchase_bill_ageing_filter_params": {
            "$ref": "#/definitions/view.InvoicePurchaseBillAgeingFilterParams"
          },
          "journal_filter_params": {
            "$ref": "#/definitions/view.JournalFilterParams"
          },
          "order_summary_filter_params": {
            "$ref": "#/definitions/view.OrderSummaryFilterParams"
          },
          "purchase_register_filter_params": {
            "$ref": "#/definitions/view.PurchaseRegisterFilterParams"
          },
          "purchase_return_register_filter_params": {
            "$ref": "#/definitions/view.PurchaseReturnRegisterFilterParams"
          },
          "purchase_sales_by_contact_filter_params": {
            "$ref": "#/definitions/view.PurchaseSalesByContactFilterParams"
          },
          "purchase_sales_by_contact_monthly_filter_params": {
            "$ref": "#/definitions/view.PurchaseSalesByContactMonthlyFilterParams"
          },
          "purchase_sales_by_item_filter_params": {
            "$ref": "#/definitions/view.PurchaseSalesByItemFilterParams"
          },
          "purchase_sales_by_item_monthly_filter_params": {
            "$ref": "#/definitions/view.PurchaseSalesByItemMonthlyFilterParams"
          },
          "purchase_sales_master_filter_params": {
            "$ref": "#/definitions/view.PurchaseSalesMasterFilterParams"
          },
          "sales_register_filter_params": {
            "$ref": "#/definitions/view.SalesRegisterFilterParams"
          },
          "sales_return_register_filter_params": {
            "$ref": "#/definitions/view.SalesReturnRegisterFilterParams"
          },
          "sales_summary_filter_params": {
            "$ref": "#/definitions/view.SalesSummaryFilterParams"
          },
          "tds_filter_params": {
            "$ref": "#/definitions/view.TDSFilterParams"
          },
          "transaction_list_filter_params": {
            "$ref": "#/definitions/view.TransactionListFilterParams"
          },
          "trial_balance_filter_params": {
            "$ref": "#/definitions/view.TrialBalanceFilterParams"
          },
          "user_log_filter_params": {
            "$ref": "#/definitions/view.UserLogFilterParams"
          },
          "vat_summary_filter_params": {
            "$ref": "#/definitions/view.VatSummaryFilterParams"
          }
        }
      },
      "view.ReportingTagFilterItem": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "view.ReportingTagsView": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "options": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "view.RoleView": {
        "type": "object",
        "properties": {
          "location_permissions": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.RoleWithLocationView"
            }
          },
          "name": {
            "type": "string"
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "view.RoleWithLocationView": {
        "type": "object",
        "properties": {
          "change_rate": {
            "type": "boolean"
          },
          "discount_limit": {
            "type": "boolean"
          },
          "location_id": {
            "type": "string"
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "remove_service_charge": {
            "type": "boolean"
          }
        }
      },
      "view.SalesOrderView": {
        "type": "object",
        "properties": {
          "attachment_id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "contact_id": {
            "type": "string"
          },
          "conversion_rate": {
            "type": "number"
          },
          "currency_code": {
            "type": "string"
          },
          "custom_fields": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.IdValue"
            }
          },
          "date": {
            "type": "string"
          },
          "delivery_date": {
            "type": "string"
          },
          "discount": {
            "type": "number"
          },
          "discount_type": {
            "enum": [
              "Amount",
              "Percent"
            ],
            "allOf": [
              {
                "$ref": "#/definitions/types.DiscountType"
              }
            ]
          },
          "invoice_reference_no": {
            "type": "string"
          },
          "items": {
            "type": "array",
            "minItems": 1,
            "items": {
              "$ref": "#/definitions/view.ProductItemView"
            }
          },
          "location_id": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "reference_no": {
            "type": "string"
          },
          "referrer_id": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.IdValue"
            }
          },
          "terms_and_conditions": {
            "type": "string"
          }
        }
      },
      "view.SalesRegisterFilterParams": {
        "type": "object",
        "required": [
          "from_date",
          "to_date"
        ],
        "properties": {
          "channel": {
            "type": "string"
          },
          "from_date": {
            "type": "string"
          },
          "group_by_source_id": {
            "type": "boolean"
          },
          "include_credit_note": {
            "type": "boolean"
          },
          "is_date_bs": {
            "type": "boolean"
          },
          "is_export": {
            "type": "boolean"
          },
          "location_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "report_id": {
            "type": "string"
          },
          "to_date": {
            "type": "string"
          }
        }
      },
      "view.SalesReturnRegisterFilterParams": {
        "type": "object",
        "required": [
          "from_date",
          "to_date"
        ],
        "properties": {
          "channel": {
            "type": "string"
          },
          "from_date": {
            "type": "string"
          },
          "group_by_source_id": {
            "type": "boolean"
          },
          "is_date_bs": {
            "type": "boolean"
          },
          "is_export": {
            "type": "boolean"
          },
          "location_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "report_id": {
            "type": "string"
          },
          "to_date": {
            "type": "string"
          }
        }
      },
      "view.SalesSummaryFilterParams": {
        "type": "object",
        "required": [
          "from_date",
          "to_date"
        ],
        "properties": {
          "fiscal_year": {
            "type": "integer"
          },
          "from_date": {
            "type": "string"
          },
          "group_by_location": {
            "type": "boolean"
          },
          "is_date_bs": {
            "type": "boolean"
          },
          "is_export": {
            "type": "boolean"
          },
          "location_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "mode": {
            "type": "string"
          },
          "report_id": {
            "type": "string"
          },
          "to_date": {
            "type": "string"
          }
        }
      },
      "view.SecondaryUnitView": {
        "type": "object",
        "required": [
          "conversion_rate",
          "measurement_unit_id"
        ],
        "properties": {
          "conversion_rate": {
            "type": "number"
          },
          "id": {
            "type": "string"
          },
          "measurement_unit_id": {
            "type": "string"
          },
          "purchase_price": {
            "type": "number"
          },
          "selling_price": {
            "type": "number"
          }
        }
      },
      "view.ServiceChargeReqView": {
        "type": "object",
        "properties": {
          "account_id": {
            "type": "string"
          },
          "is_service_charge_applicable": {
            "type": "boolean"
          },
          "service_charge_rate": {
            "type": "number",
            "maximum": 100
          },
          "sub_account_id": {
            "type": "string"
          }
        }
      },
      "view.SessionStatus": {
        "type": "object",
        "properties": {
          "status": {
            "enum": [
              "Closed"
            ],
            "allOf": [
              {
                "$ref": "#/definitions/types.SessionStatus"
              }
            ]
          }
        }
      },
      "view.SessionView": {
        "type": "object",
        "properties": {
          "location_id": {
            "type": "string"
          }
        }
      },
      "view.SplitPosInvoiceView": {
        "type": "object",
        "required": [
          "contact_id",
          "items"
        ],
        "properties": {
          "abbreviated_bill": {
            "type": "boolean"
          },
          "area_id": {
            "type": "string"
          },
          "change_amount": {
            "type": "number"
          },
          "contact_id": {
            "type": "string"
          },
          "conversion_rate": {
            "type": "number"
          },
          "currency_code": {
            "type": "string"
          },
          "discount": {
            "type": "number"
          },
          "discount_type": {
            "$ref": "#/definitions/types.DiscountType"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.TransferItemView"
            }
          },
          "location_id": {
            "type": "string"
          },
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.PosPaymentMethodView"
            }
          },
          "referrer_id": {
            "type": "string"
          },
          "table_id": {
            "type": "string"
          }
        }
      },
      "view.SubAccountView": {
        "type": "object",
        "properties": {
          "account_id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "view.SubscriptionDetailView": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number"
          },
          "bill_to": {
            "type": "string"
          },
          "end_date": {
            "type": "string"
          },
          "managed_by": {
            "type": "string"
          },
          "no_of_products": {
            "type": "integer"
          },
          "partner_name": {
            "type": "string"
          },
          "pos_txn": {
            "type": "integer"
          },
          "start_date": {
            "type": "string"
          },
          "tigg_txn": {
            "type": "integer"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "view.SubscriptionGeneralSettingsView": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "expiry_date": {
            "type": "string"
          },
          "location_id": {
            "type": "string"
          },
          "subscription_amount": {
            "type": "number"
          },
          "subscription_plan": {
            "type": "string"
          }
        }
      },
      "view.SubscriptionStatusView": {
        "type": "object",
        "properties": {
          "subscription_status": {
            "type": "string"
          }
        }
      },
      "view.SupplierPayment": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number"
          },
          "attachment_id": {
            "type": "string"
          },
          "bank_account_id": {
            "type": "string"
          },
          "bank_charge_account_id": {
            "type": "string"
          },
          "bank_charge_amount": {
            "type": "number"
          },
          "bank_charge_sub_account_id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "contact_id": {
            "type": "string"
          },
          "conversion_rate": {
            "type": "number"
          },
          "currency_code": {
            "type": "string"
          },
          "custom_fields": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.IdValue"
            }
          },
          "date": {
            "type": "string"
          },
          "location_id": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "overrides": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "payment_allocations": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.AllocationRecordView"
            }
          },
          "payment_mode_id": {
            "type": "string"
          },
          "reference_no": {
            "type": "string"
          },
          "referrer_id": {
            "type": "string"
          },
          "referrer_source": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.IdValue"
            }
          },
          "statement_id": {
            "type": "string"
          },
          "tds_account_id": {
            "type": "string"
          },
          "tds_amount": {
            "type": "number"
          },
          "tds_sub_account_id": {
            "type": "string"
          },
          "tds_type_id": {
            "type": "string"
          }
        }
      },
      "view.TDSFilterParams": {
        "type": "object",
        "required": [
          "from_date",
          "to_date"
        ],
        "properties": {
          "from_date": {
            "type": "string"
          },
          "is_date_bs": {
            "type": "boolean"
          },
          "is_export": {
            "type": "boolean"
          },
          "report_id": {
            "type": "string"
          },
          "tds_type": {
            "type": "string"
          },
          "to_date": {
            "type": "string"
          }
        }
      },
      "view.TableView": {
        "type": "object",
        "properties": {
          "capacity": {
            "type": "integer"
          },
          "fill": {
            "type": "string"
          },
          "height": {
            "type": "number"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "shape": {
            "enum": [
              "Rectangle",
              "Circle"
            ],
            "allOf": [
              {
                "$ref": "#/definitions/types.TableShape"
              }
            ]
          },
          "width": {
            "type": "number"
          },
          "x": {
            "type": "number"
          },
          "y": {
            "type": "number"
          }
        }
      },
      "view.TaskCreateView": {
        "type": "object",
        "required": [
          "title"
        ],
        "properties": {
          "assign_to": {
            "description": "from users",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "attachments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "type": "string"
          },
          "due_date": {
            "type": "string"
          },
          "priority": {
            "enum": [
              "Normal",
              "Low",
              "Urgent"
            ],
            "allOf": [
              {
                "$ref": "#/definitions/types.TaskPriority"
              }
            ]
          },
          "privacy": {
            "description": "private public",
            "enum": [
              "Public",
              "Private"
            ],
            "allOf": [
              {
                "$ref": "#/definitions/types.TaskPrivacy"
              }
            ]
          },
          "source_id": {
            "type": "string"
          },
          "source_type": {
            "$ref": "#/definitions/types.Source"
          },
          "task_type_id": {
            "description": "from tasktype",
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "view.TaskMultiEdit": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "$ref": "#/definitions/types.TaskStatus"
          }
        }
      },
      "view.TasktypeView": {
        "type": "object",
        "properties": {
          "color_code": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "maxLength": 100
          }
        }
      },
      "view.TdsTypeView": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "view.TiggAndPosView": {
        "type": "object",
        "properties": {
          "bank_connection": {
            "type": "boolean"
          },
          "is_ai_enabled": {
            "type": "boolean"
          },
          "is_pos_enabled": {
            "type": "boolean"
          },
          "is_tigg_enabled": {
            "type": "boolean"
          }
        }
      },
      "view.TransactionApprovalView": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "overrides": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "reconciliation": {
            "description": "This flag is added to bypass creditlimit check for autoapprova and recociliation",
            "type": "boolean"
          }
        }
      },
      "view.TransactionListFilterParams": {
        "type": "object",
        "required": [
          "from_date",
          "to_date"
        ],
        "properties": {
          "channel": {
            "type": "string"
          },
          "created_by_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "from_date": {
            "type": "string"
          },
          "is_date_bs": {
            "type": "boolean"
          },
          "is_export": {
            "type": "boolean"
          },
          "location_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "report_id": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.ReportingTagFilterItem"
            }
          },
          "status": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/types.Status"
            }
          },
          "to_date": {
            "type": "string"
          },
          "transaction_type": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/types.Source"
            }
          }
        }
      },
      "view.TransferItemView": {
        "type": "object",
        "required": [
          "id",
          "quantity"
        ],
        "properties": {
          "discount": {
            "type": "number"
          },
          "discount_type": {
            "$ref": "#/definitions/types.DiscountType"
          },
          "id": {
            "type": "string"
          },
          "quantity": {
            "type": "number"
          },
          "rate": {
            "type": "number"
          },
          "service_charge": {
            "type": "number"
          },
          "service_charge_applicable": {
            "type": "boolean"
          }
        }
      },
      "view.TrialBalanceFilterParams": {
        "type": "object",
        "required": [
          "from_date",
          "to_date"
        ],
        "properties": {
          "from_date": {
            "type": "string"
          },
          "hide_object_with_zero_closing_balance": {
            "type": "boolean"
          },
          "is_date_bs": {
            "type": "boolean"
          },
          "is_export": {
            "type": "boolean"
          },
          "report_id": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.ReportingTagFilterItem"
            }
          },
          "to_date": {
            "type": "string"
          }
        }
      },
      "view.UpdateBarcodeView": {
        "type": "object",
        "properties": {
          "purchase_price": {
            "type": "number"
          },
          "selling_price": {
            "type": "number"
          }
        }
      },
      "view.UpdateSubAccountView": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "view.UpdateTabRequest": {
        "type": "object",
        "properties": {
          "default_tab": {
            "$ref": "#/definitions/types.OrderType"
          }
        }
      },
      "view.UpgradeCredentialView": {
        "type": "object",
        "properties": {
          "namespace": {
            "type": "string"
          }
        }
      },
      "view.UserLogFilterParams": {
        "type": "object",
        "required": [
          "from_date",
          "to_date"
        ],
        "properties": {
          "from_date": {
            "type": "string"
          },
          "is_date_bs": {
            "type": "boolean"
          },
          "is_export": {
            "type": "boolean"
          },
          "report_id": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.ReportingTagFilterItem"
            }
          },
          "to_date": {
            "type": "string"
          },
          "user_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "view.UserLoginView": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "view.UserUpdateView": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "date_of_birth": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "image": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          }
        }
      },
      "view.UserView": {
        "type": "object",
        "required": [
          "email",
          "name",
          "password"
        ],
        "properties": {
          "date_of_birth": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          }
        }
      },
      "view.VariantCreateView": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.ProductAttributeView"
            }
          },
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "maxLength": 100
          },
          "purchase_price": {
            "type": "number"
          },
          "selling_price": {
            "type": "number"
          }
        }
      },
      "view.VariantProductView": {
        "type": "object",
        "required": [
          "code",
          "name",
          "tax"
        ],
        "properties": {
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.AttributeView"
            }
          },
          "available_for_sale": {
            "type": "boolean"
          },
          "code": {
            "type": "string",
            "maxLength": 100
          },
          "description": {
            "type": "string"
          },
          "hs_code": {
            "type": "string",
            "maxLength": 20
          },
          "image": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "maxLength": 100
          },
          "parent_id": {
            "type": "string"
          },
          "primary_unit_id": {
            "type": "string"
          },
          "print_profile_id": {
            "type": "string"
          },
          "product_category_id": {
            "type": "string"
          },
          "purchase_account_id": {
            "type": "string"
          },
          "purchase_price": {
            "type": "number"
          },
          "purchase_return_account_id": {
            "type": "string"
          },
          "purchase_return_sub_account_id": {
            "type": "string"
          },
          "purchase_sub_account_id": {
            "type": "string"
          },
          "re_order_level": {
            "type": "number"
          },
          "sales_account_id": {
            "type": "string"
          },
          "sales_return_account_id": {
            "type": "string"
          },
          "sales_return_sub_account_id": {
            "type": "string"
          },
          "sales_sub_account_id": {
            "type": "string"
          },
          "secondary_units": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.SecondaryUnitView"
            }
          },
          "selling_price": {
            "type": "number"
          },
          "service_charge_applicable": {
            "type": "boolean"
          },
          "tax": {
            "enum": [
              "0 VAT",
              "NO_VAT",
              "13 VAT"
            ],
            "allOf": [
              {
                "$ref": "#/definitions/types.TaxType"
              }
            ]
          },
          "track_inventory": {
            "type": "boolean"
          },
          "type": {
            "type": "string"
          },
          "valuation_method": {
            "type": "string"
          },
          "variants": {
            "type": "array",
            "minItems": 1,
            "items": {
              "$ref": "#/definitions/view.VariantCreateView"
            }
          }
        }
      },
      "view.VatSummaryFilterParams": {
        "type": "object",
        "required": [
          "fiscal_year"
        ],
        "properties": {
          "fiscal_year": {
            "type": "integer"
          },
          "is_date_bs": {
            "type": "boolean"
          },
          "is_export": {
            "type": "boolean"
          },
          "report_id": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.ReportingTagFilterItem"
            }
          }
        }
      },
      "view.WareHouseTransferItemView": {
        "type": "object",
        "properties": {
          "measurement_unit_id": {
            "type": "string"
          },
          "product_description": {
            "type": "string"
          },
          "product_id": {
            "type": "string"
          },
          "quantity": {
            "type": "number"
          }
        }
      },
      "view.WareHouseTransferView": {
        "type": "object",
        "properties": {
          "attachment_id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "custom_fields": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.IdValue"
            }
          },
          "date": {
            "type": "string"
          },
          "destination_warehouse_id": {
            "type": "string"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.WareHouseTransferItemView"
            }
          },
          "location_id": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "overrides": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "reference_no": {
            "type": "string"
          },
          "reporting_tags": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/view.IdValue"
            }
          },
          "source_warehouse_id": {
            "type": "string"
          }
        }
      },
      "view.WarehouseEditView": {
        "type": "object",
        "properties": {
          "is_warehouse_enabled": {
            "type": "boolean"
          },
          "warehouse_count": {
            "type": "integer"
          }
        }
      },
      "view.WarehouseView": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "maxLength": 100
          },
          "phone": {
            "type": "string"
          }
        }
      }
    },
    "securityDefinitions": {
      "Bearer": {
        "description": "format : Bearer \\\u003CAccess Token\\\u003E",
        "type": "apiKey",
        "name": "Authorization",
        "in": "header"
      },
      "namespace": {
        "description": "pos",
        "type": "apiKey",
        "name": "namespace",
        "in": "query"
      }
    }
  }